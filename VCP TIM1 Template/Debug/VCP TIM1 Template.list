
C:\Users\Divesh Dutt\Downloads\VCP TIM1 Template with PAO as ADC input\VCP TIM1 Template\Debug\VCP TIM1 Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800446c  0800446c  0001446c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004474  08004474  00014474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000508  20000000  0800447c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000170  20000508  08004984  00020508  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000678  08004984  00020678  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010fdb  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002577  00000000  00000000  00031513  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008d6c  00000000  00000000  00033a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c08  00000000  00000000  0003c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ee8  00000000  00000000  0003d400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005fd8  00000000  00000000  0003e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000454f  00000000  00000000  000442c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0004880f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002954  00000000  00000000  00048890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000508 	.word	0x20000508
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004364 	.word	0x08004364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000050c 	.word	0x2000050c
 80001cc:	08004364 	.word	0x08004364

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97e 	b.w	8000594 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460e      	mov	r6, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9d08      	ldr	r5, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d150      	bne.n	8000362 <__udivmoddi4+0xb2>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96c      	bls.n	80003a0 <__udivmoddi4+0xf0>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0420 	rsb	r4, lr, #32
 80002d4:	fa20 f404 	lsr.w	r4, r0, r4
 80002d8:	fa01 f60e 	lsl.w	r6, r1, lr
 80002dc:	ea44 0c06 	orr.w	ip, r4, r6
 80002e0:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80002ec:	0c22      	lsrs	r2, r4, #16
 80002ee:	fbbc f0f9 	udiv	r0, ip, r9
 80002f2:	fa1f f887 	uxth.w	r8, r7
 80002f6:	fb09 c610 	mls	r6, r9, r0, ip
 80002fa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80002fe:	fb00 f308 	mul.w	r3, r0, r8
 8000302:	42b3      	cmp	r3, r6
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0x6a>
 8000306:	19f6      	adds	r6, r6, r7
 8000308:	f100 32ff 	add.w	r2, r0, #4294967295
 800030c:	f080 8122 	bcs.w	8000554 <__udivmoddi4+0x2a4>
 8000310:	42b3      	cmp	r3, r6
 8000312:	f240 811f 	bls.w	8000554 <__udivmoddi4+0x2a4>
 8000316:	3802      	subs	r0, #2
 8000318:	443e      	add	r6, r7
 800031a:	1af6      	subs	r6, r6, r3
 800031c:	b2a2      	uxth	r2, r4
 800031e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000322:	fb09 6613 	mls	r6, r9, r3, r6
 8000326:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800032a:	fb03 f808 	mul.w	r8, r3, r8
 800032e:	45a0      	cmp	r8, r4
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x96>
 8000332:	19e4      	adds	r4, r4, r7
 8000334:	f103 32ff 	add.w	r2, r3, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x2a0>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x2a0>
 8000342:	3b02      	subs	r3, #2
 8000344:	443c      	add	r4, r7
 8000346:	ebc8 0404 	rsb	r4, r8, r4
 800034a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800034e:	2100      	movs	r1, #0
 8000350:	2d00      	cmp	r5, #0
 8000352:	d062      	beq.n	800041a <__udivmoddi4+0x16a>
 8000354:	fa24 f40e 	lsr.w	r4, r4, lr
 8000358:	2300      	movs	r3, #0
 800035a:	602c      	str	r4, [r5, #0]
 800035c:	606b      	str	r3, [r5, #4]
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0xc6>
 8000366:	2d00      	cmp	r5, #0
 8000368:	d055      	beq.n	8000416 <__udivmoddi4+0x166>
 800036a:	2100      	movs	r1, #0
 800036c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000370:	4608      	mov	r0, r1
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	f040 8090 	bne.w	80004a0 <__udivmoddi4+0x1f0>
 8000380:	42b3      	cmp	r3, r6
 8000382:	d302      	bcc.n	800038a <__udivmoddi4+0xda>
 8000384:	4282      	cmp	r2, r0
 8000386:	f200 80f8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800038a:	1a84      	subs	r4, r0, r2
 800038c:	eb66 0603 	sbc.w	r6, r6, r3
 8000390:	2001      	movs	r0, #1
 8000392:	46b4      	mov	ip, r6
 8000394:	2d00      	cmp	r5, #0
 8000396:	d040      	beq.n	800041a <__udivmoddi4+0x16a>
 8000398:	e885 1010 	stmia.w	r5, {r4, ip}
 800039c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a0:	b912      	cbnz	r2, 80003a8 <__udivmoddi4+0xf8>
 80003a2:	2701      	movs	r7, #1
 80003a4:	fbb7 f7f2 	udiv	r7, r7, r2
 80003a8:	fab7 fe87 	clz	lr, r7
 80003ac:	f1be 0f00 	cmp.w	lr, #0
 80003b0:	d135      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b2:	1bf3      	subs	r3, r6, r7
 80003b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c2:	0c22      	lsrs	r2, r4, #16
 80003c4:	fb08 3610 	mls	r6, r8, r0, r3
 80003c8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80003cc:	fb0c f300 	mul.w	r3, ip, r0
 80003d0:	42b3      	cmp	r3, r6
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19f6      	adds	r6, r6, r7
 80003d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42b3      	cmp	r3, r6
 80003de:	f200 80ce 	bhi.w	800057e <__udivmoddi4+0x2ce>
 80003e2:	4610      	mov	r0, r2
 80003e4:	1af6      	subs	r6, r6, r3
 80003e6:	b2a2      	uxth	r2, r4
 80003e8:	fbb6 f3f8 	udiv	r3, r6, r8
 80003ec:	fb08 6613 	mls	r6, r8, r3, r6
 80003f0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80003f4:	fb0c fc03 	mul.w	ip, ip, r3
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f103 32ff 	add.w	r2, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b5 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 800040a:	4613      	mov	r3, r2
 800040c:	ebcc 0404 	rsb	r4, ip, r4
 8000410:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000414:	e79c      	b.n	8000350 <__udivmoddi4+0xa0>
 8000416:	4629      	mov	r1, r5
 8000418:	4628      	mov	r0, r5
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0120 	rsb	r1, lr, #32
 8000422:	fa06 f30e 	lsl.w	r3, r6, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f901 	lsr.w	r9, r0, r1
 800042e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000432:	40ce      	lsrs	r6, r1
 8000434:	ea49 0903 	orr.w	r9, r9, r3
 8000438:	fbb6 faf8 	udiv	sl, r6, r8
 800043c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000440:	fb08 661a 	mls	r6, r8, sl, r6
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800044c:	fb0a f20c 	mul.w	r2, sl, ip
 8000450:	429a      	cmp	r2, r3
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d90a      	bls.n	800046e <__udivmoddi4+0x1be>
 8000458:	19db      	adds	r3, r3, r7
 800045a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800045e:	f080 8087 	bcs.w	8000570 <__udivmoddi4+0x2c0>
 8000462:	429a      	cmp	r2, r3
 8000464:	f240 8084 	bls.w	8000570 <__udivmoddi4+0x2c0>
 8000468:	f1aa 0a02 	sub.w	sl, sl, #2
 800046c:	443b      	add	r3, r7
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	fa1f f989 	uxth.w	r9, r9
 8000474:	fbb3 f1f8 	udiv	r1, r3, r8
 8000478:	fb08 3311 	mls	r3, r8, r1, r3
 800047c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000480:	fb01 f60c 	mul.w	r6, r1, ip
 8000484:	429e      	cmp	r6, r3
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1e8>
 8000488:	19db      	adds	r3, r3, r7
 800048a:	f101 32ff 	add.w	r2, r1, #4294967295
 800048e:	d26b      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d969      	bls.n	8000568 <__udivmoddi4+0x2b8>
 8000494:	3902      	subs	r1, #2
 8000496:	443b      	add	r3, r7
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800049e:	e78e      	b.n	80003be <__udivmoddi4+0x10e>
 80004a0:	f1c1 0e20 	rsb	lr, r1, #32
 80004a4:	fa22 f40e 	lsr.w	r4, r2, lr
 80004a8:	408b      	lsls	r3, r1
 80004aa:	4323      	orrs	r3, r4
 80004ac:	fa20 f70e 	lsr.w	r7, r0, lr
 80004b0:	fa06 f401 	lsl.w	r4, r6, r1
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	fa26 f60e 	lsr.w	r6, r6, lr
 80004bc:	433c      	orrs	r4, r7
 80004be:	fbb6 f9fc 	udiv	r9, r6, ip
 80004c2:	0c27      	lsrs	r7, r4, #16
 80004c4:	fb0c 6619 	mls	r6, ip, r9, r6
 80004c8:	fa1f f883 	uxth.w	r8, r3
 80004cc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80004d0:	fb09 f708 	mul.w	r7, r9, r8
 80004d4:	42b7      	cmp	r7, r6
 80004d6:	fa02 f201 	lsl.w	r2, r2, r1
 80004da:	fa00 fa01 	lsl.w	sl, r0, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x242>
 80004e0:	18f6      	adds	r6, r6, r3
 80004e2:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e6:	d241      	bcs.n	800056c <__udivmoddi4+0x2bc>
 80004e8:	42b7      	cmp	r7, r6
 80004ea:	d93f      	bls.n	800056c <__udivmoddi4+0x2bc>
 80004ec:	f1a9 0902 	sub.w	r9, r9, #2
 80004f0:	441e      	add	r6, r3
 80004f2:	1bf6      	subs	r6, r6, r7
 80004f4:	b2a0      	uxth	r0, r4
 80004f6:	fbb6 f4fc 	udiv	r4, r6, ip
 80004fa:	fb0c 6614 	mls	r6, ip, r4, r6
 80004fe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000502:	fb04 f808 	mul.w	r8, r4, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x26a>
 800050a:	18ff      	adds	r7, r7, r3
 800050c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000510:	d228      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d926      	bls.n	8000564 <__udivmoddi4+0x2b4>
 8000516:	3c02      	subs	r4, #2
 8000518:	441f      	add	r7, r3
 800051a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800051e:	ebc8 0707 	rsb	r7, r8, r7
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	4644      	mov	r4, r8
 800052a:	464e      	mov	r6, r9
 800052c:	d314      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	d029      	beq.n	8000584 <__udivmoddi4+0x2d4>
 8000530:	b365      	cbz	r5, 800058c <__udivmoddi4+0x2dc>
 8000532:	ebba 0304 	subs.w	r3, sl, r4
 8000536:	eb67 0706 	sbc.w	r7, r7, r6
 800053a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800053e:	40cb      	lsrs	r3, r1
 8000540:	40cf      	lsrs	r7, r1
 8000542:	ea4e 0303 	orr.w	r3, lr, r3
 8000546:	e885 0088 	stmia.w	r5, {r3, r7}
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	4613      	mov	r3, r2
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x96>
 8000554:	4610      	mov	r0, r2
 8000556:	e6e0      	b.n	800031a <__udivmoddi4+0x6a>
 8000558:	ebb8 0402 	subs.w	r4, r8, r2
 800055c:	eb69 0603 	sbc.w	r6, r9, r3
 8000560:	3801      	subs	r0, #1
 8000562:	e7e5      	b.n	8000530 <__udivmoddi4+0x280>
 8000564:	4604      	mov	r4, r0
 8000566:	e7d8      	b.n	800051a <__udivmoddi4+0x26a>
 8000568:	4611      	mov	r1, r2
 800056a:	e795      	b.n	8000498 <__udivmoddi4+0x1e8>
 800056c:	4681      	mov	r9, r0
 800056e:	e7c0      	b.n	80004f2 <__udivmoddi4+0x242>
 8000570:	468a      	mov	sl, r1
 8000572:	e77c      	b.n	800046e <__udivmoddi4+0x1be>
 8000574:	3b02      	subs	r3, #2
 8000576:	443c      	add	r4, r7
 8000578:	e748      	b.n	800040c <__udivmoddi4+0x15c>
 800057a:	4608      	mov	r0, r1
 800057c:	e70a      	b.n	8000394 <__udivmoddi4+0xe4>
 800057e:	3802      	subs	r0, #2
 8000580:	443e      	add	r6, r7
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x134>
 8000584:	45c2      	cmp	sl, r8
 8000586:	d3e7      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000588:	463e      	mov	r6, r7
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x280>
 800058c:	4629      	mov	r1, r5
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800059e:	6818      	ldr	r0, [r3, #0]
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 fb52 	bl	8000c50 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	4621      	mov	r1, r4
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
 80005b4:	f000 fb18 	bl	8000be8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005b8:	2000      	movs	r0, #0
 80005ba:	bd10      	pop	{r4, pc}
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 fafe 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffe5 	bl	8000598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ce:	f002 fb1f 	bl	8002c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005d2:	2000      	movs	r0, #0
 80005d4:	bd08      	pop	{r3, pc}
	...

080005d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005d8:	4a02      	ldr	r2, [pc, #8]	; (80005e4 <HAL_IncTick+0xc>)
 80005da:	6813      	ldr	r3, [r2, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000055c 	.word	0x2000055c

080005e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <HAL_GetTick+0x8>)
 80005ea:	6818      	ldr	r0, [r3, #0]
}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000055c 	.word	0x2000055c

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b538      	push	{r3, r4, r5, lr}
 80005f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005f8:	f7ff fff6 	bl	80005e8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fc:	1c63      	adds	r3, r4, #1
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 80005fe:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000600:	bf18      	it	ne
 8000602:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000604:	f7ff fff0 	bl	80005e8 <HAL_GetTick>
 8000608:	1b40      	subs	r0, r0, r5
 800060a:	4284      	cmp	r4, r0
 800060c:	d8fa      	bhi.n	8000604 <HAL_Delay+0x10>
  {
  }
}
 800060e:	bd38      	pop	{r3, r4, r5, pc}

08000610 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
  __IO uint32_t wait_loop_index = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000616:	4604      	mov	r4, r0
 8000618:	2800      	cmp	r0, #0
 800061a:	f000 80c4 	beq.w	80007a6 <HAL_ADC_Init+0x196>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800061e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000620:	b925      	cbnz	r5, 800062c <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000622:	f002 fb3b 	bl	8002c9c <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000626:	65e5      	str	r5, [r4, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000628:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }
  
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	689a      	ldr	r2, [r3, #8]
 8000630:	0092      	lsls	r2, r2, #2
  {
    /* Exit deep power down mode */ 
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8000632:	bf42      	ittt	mi
 8000634:	689a      	ldrmi	r2, [r3, #8]
 8000636:	f022 5200 	bicmi.w	r2, r2, #536870912	; 0x20000000
 800063a:	609a      	strmi	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	00d7      	lsls	r7, r2, #3
 8000640:	d504      	bpl.n	800064c <HAL_ADC_Init+0x3c>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))  
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	00d6      	lsls	r6, r2, #3
 8000646:	d513      	bpl.n	8000670 <HAL_ADC_Init+0x60>
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000648:	2000      	movs	r0, #0
 800064a:	e01a      	b.n	8000682 <HAL_ADC_Init+0x72>
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
  {  
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 800064c:	689a      	ldr	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 800064e:	495c      	ldr	r1, [pc, #368]	; (80007c0 <HAL_ADC_Init+0x1b0>)
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
  {  
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8000650:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000654:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000656:	4a5b      	ldr	r2, [pc, #364]	; (80007c4 <HAL_ADC_Init+0x1b4>)
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	fbb2 f1f1 	udiv	r1, r2, r1
 800065e:	220a      	movs	r2, #10
 8000660:	434a      	muls	r2, r1
    while(wait_loop_index != 0)
    {
      wait_loop_index--;
 8000662:	9201      	str	r2, [sp, #4]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
    while(wait_loop_index != 0)
 8000664:	9a01      	ldr	r2, [sp, #4]
 8000666:	2a00      	cmp	r2, #0
 8000668:	d0eb      	beq.n	8000642 <HAL_ADC_Init+0x32>
    {
      wait_loop_index--;
 800066a:	9a01      	ldr	r2, [sp, #4]
 800066c:	3a01      	subs	r2, #1
 800066e:	e7f8      	b.n	8000662 <HAL_ADC_Init+0x52>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))  
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000670:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000672:	f042 0210 	orr.w	r2, r2, #16
 8000676:	65a2      	str	r2, [r4, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000678:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800067a:	f042 0201 	orr.w	r2, r2, #1
 800067e:	65e2      	str	r2, [r4, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8000680:	2001      	movs	r0, #1
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000682:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000684:	06d5      	lsls	r5, r2, #27
 8000686:	f100 808a 	bmi.w	800079e <HAL_ADC_Init+0x18e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 800068a:	689a      	ldr	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800068c:	0751      	lsls	r1, r2, #29
 800068e:	f100 8086 	bmi.w	800079e <HAL_ADC_Init+0x18e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
  {
    
    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8000692:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000694:	f042 0202 	orr.w	r2, r2, #2
 8000698:	65a2      	str	r2, [r4, #88]	; 0x58
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	f002 0203 	and.w	r2, r2, #3
 80006a0:	2a01      	cmp	r2, #1
 80006a2:	f040 8082 	bne.w	80007aa <HAL_ADC_Init+0x19a>
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	07d2      	lsls	r2, r2, #31
 80006aa:	d57e      	bpl.n	80007aa <HAL_ADC_Init+0x19a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b0:	fa91 f1a1 	rbit	r1, r1
 80006b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80006b8:	fab1 f581 	clz	r5, r1
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 80006bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80006be:	fa92 f2a2 	rbit	r2, r2
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80006c2:	68e1      	ldr	r1, [r4, #12]
 80006c4:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80006c6:	430f      	orrs	r7, r1
 80006c8:	68a1      	ldr	r1, [r4, #8]
 80006ca:	430f      	orrs	r7, r1
 80006cc:	69e1      	ldr	r1, [r4, #28]
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 80006ce:	fab2 f282 	clz	r2, r2
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80006d2:	40a9      	lsls	r1, r5
 80006d4:	4339      	orrs	r1, r7
 80006d6:	fa06 f202 	lsl.w	r2, r6, r2
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006da:	2e01      	cmp	r6, #1
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80006dc:	ea42 0201 	orr.w	r2, r2, r1
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006e0:	d109      	bne.n	80006f6 <HAL_ADC_Init+0xe6>
 80006e2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80006e6:	fa91 f1a1 	rbit	r1, r1
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80006ea:	fab1 f581 	clz	r5, r1
 80006ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80006f0:	3901      	subs	r1, #1
 80006f2:	40a9      	lsls	r1, r5
 80006f4:	430a      	orrs	r2, r1
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006f6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80006f8:	2d01      	cmp	r5, #1
 80006fa:	d003      	beq.n	8000704 <HAL_ADC_Init+0xf4>
    &&  (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 80006fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80006fe:	b109      	cbz	r1, 8000704 <HAL_ADC_Init+0xf4>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 8000700:	4329      	orrs	r1, r5
 8000702:	430a      	orrs	r2, r1
    }
    
     /* Update Configuration Register CFGR */
     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000704:	68dd      	ldr	r5, [r3, #12]
 8000706:	4930      	ldr	r1, [pc, #192]	; (80007c8 <HAL_ADC_Init+0x1b8>)
 8000708:	4029      	ands	r1, r5
 800070a:	430a      	orrs	r2, r1
 800070c:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800070e:	689a      	ldr	r2, [r3, #8]
 8000710:	f012 0f0c 	tst.w	r2, #12
 8000714:	d12e      	bne.n	8000774 <HAL_ADC_Init+0x164>
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	fa92 f2a2 	rbit	r2, r2
 800071e:	2502      	movs	r5, #2
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000720:	fab2 f282 	clz	r2, r2
 8000724:	fa95 f5a5 	rbit	r5, r5
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8000728:	fab5 f685 	clz	r6, r5
               
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800072c:	69a5      	ldr	r5, [r4, #24]
 800072e:	68d9      	ldr	r1, [r3, #12]
 8000730:	fa05 f202 	lsl.w	r2, r5, r2
 8000734:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000736:	40b5      	lsls	r5, r6
 8000738:	4315      	orrs	r5, r2
 800073a:	f421 4280 	bic.w	r2, r1, #16384	; 0x4000
 800073e:	f022 0202 	bic.w	r2, r2, #2
 8000742:	432a      	orrs	r2, r5
 8000744:	60da      	str	r2, [r3, #12]
    
 
      if (hadc->Init.OversamplingMode == ENABLE)
 8000746:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000748:	2a01      	cmp	r2, #1
 800074a:	d10f      	bne.n	800076c <HAL_ADC_Init+0x15c>
       /* Configuration of Oversampler:                                       */
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS, 
 800074c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800074e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000750:	6919      	ldr	r1, [r3, #16]
 8000752:	432a      	orrs	r2, r5
 8000754:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000756:	f042 0201 	orr.w	r2, r2, #1
 800075a:	432a      	orrs	r2, r5
 800075c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800075e:	4315      	orrs	r5, r2
 8000760:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 8000764:	f022 0205 	bic.w	r2, r2, #5
 8000768:	432a      	orrs	r2, r5
 800076a:	e002      	b.n	8000772 <HAL_ADC_Init+0x162>
                               hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800076c:	691a      	ldr	r2, [r3, #16]
 800076e:	f022 0201 	bic.w	r2, r2, #1
 8000772:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000774:	6922      	ldr	r2, [r4, #16]
 8000776:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));  
 8000778:	bf08      	it	eq
 800077a:	6a21      	ldreq	r1, [r4, #32]
 800077c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800077e:	bf03      	ittte	eq
 8000780:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8000784:	f022 020f 	biceq.w	r2, r2, #15
 8000788:	430a      	orreq	r2, r1
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800078a:	f022 020f 	bicne.w	r2, r2, #15
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000792:	f023 0303 	bic.w	r3, r3, #3
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	65a3      	str	r3, [r4, #88]	; 0x58
 800079c:	e00d      	b.n	80007ba <HAL_ADC_Init+0x1aa>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800079e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	65a3      	str	r3, [r4, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80007a6:	2001      	movs	r0, #1
 80007a8:	e007      	b.n	80007ba <HAL_ADC_Init+0x1aa>
      /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
           
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 80007aa:	4d08      	ldr	r5, [pc, #32]	; (80007cc <HAL_ADC_Init+0x1bc>)
 80007ac:	68aa      	ldr	r2, [r5, #8]
 80007ae:	f422 117c 	bic.w	r1, r2, #4128768	; 0x3f0000
 80007b2:	6862      	ldr	r2, [r4, #4]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	60aa      	str	r2, [r5, #8]
 80007b8:	e778      	b.n	80006ac <HAL_ADC_Init+0x9c>
    tmp_hal_status = HAL_ERROR;
  }  /*  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)  && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  ) */
  
  /* Return function status */
  return tmp_hal_status;
}
 80007ba:	b003      	add	sp, #12
 80007bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007be:	bf00      	nop
 80007c0:	001e8480 	.word	0x001e8480
 80007c4:	20000000 	.word	0x20000000
 80007c8:	fff0c007 	.word	0xfff0c007
 80007cc:	50040300 	.word	0x50040300

080007d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80007d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007d6:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80007da:	2b01      	cmp	r3, #1
 80007dc:	f000 815a 	beq.w	8000a94 <HAL_ADC_ConfigChannel+0x2c4>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007e0:	6803      	ldr	r3, [r0, #0]
 80007e2:	689a      	ldr	r2, [r3, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007e4:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007e6:	0756      	lsls	r6, r2, #29
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007e8:	f880 4054 	strb.w	r4, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007ec:	f100 8149 	bmi.w	8000a82 <HAL_ADC_ConfigChannel+0x2b2>
  {
    
      /* Regular sequence configuration */
      /* Clear the old SQx bits then set the new ones for the selected rank */
      /* For Rank 1 to 4 */
      if (sConfig->Rank < 5)
 80007f0:	684a      	ldr	r2, [r1, #4]
 80007f2:	680c      	ldr	r4, [r1, #0]
 80007f4:	2a04      	cmp	r2, #4
 80007f6:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 80007fa:	d815      	bhi.n	8000828 <HAL_ADC_ConfigChannel+0x58>
      {      
        MODIFY_REG(hadc->Instance->SQR1, 
 80007fc:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80007fe:	fa95 f6a5 	rbit	r6, r5
 8000802:	fab6 f686 	clz	r6, r6
 8000806:	fa95 f5a5 	rbit	r5, r5
 800080a:	f04f 0e1f 	mov.w	lr, #31
 800080e:	4356      	muls	r6, r2
 8000810:	fab5 f585 	clz	r5, r5
 8000814:	fa0e f606 	lsl.w	r6, lr, r6
 8000818:	436a      	muls	r2, r5
 800081a:	ea27 0606 	bic.w	r6, r7, r6
 800081e:	fa04 f202 	lsl.w	r2, r4, r2
 8000822:	4332      	orrs	r2, r6
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
 8000826:	e048      	b.n	80008ba <HAL_ADC_ConfigChannel+0xea>
                  ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank), 
                  ADC_SQR1_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 5 to 9 */
      else if (sConfig->Rank < 10)
 8000828:	2a09      	cmp	r2, #9
 800082a:	d816      	bhi.n	800085a <HAL_ADC_ConfigChannel+0x8a>
      {
        MODIFY_REG(hadc->Instance->SQR2, 
 800082c:	f8d3 e034 	ldr.w	lr, [r3, #52]	; 0x34
 8000830:	fa95 f6a5 	rbit	r6, r5
 8000834:	fab6 f686 	clz	r6, r6
 8000838:	1f57      	subs	r7, r2, #5
 800083a:	fa95 f5a5 	rbit	r5, r5
 800083e:	fab5 f285 	clz	r2, r5
 8000842:	437e      	muls	r6, r7
 8000844:	251f      	movs	r5, #31
 8000846:	fa05 f606 	lsl.w	r6, r5, r6
 800084a:	437a      	muls	r2, r7
 800084c:	ea2e 0606 	bic.w	r6, lr, r6
 8000850:	fa04 f202 	lsl.w	r2, r4, r2
 8000854:	4332      	orrs	r2, r6
 8000856:	635a      	str	r2, [r3, #52]	; 0x34
 8000858:	e02f      	b.n	80008ba <HAL_ADC_ConfigChannel+0xea>
                  ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank), 
                  ADC_SQR2_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 10 to 14 */
      else if (sConfig->Rank < 15)
 800085a:	2a0e      	cmp	r2, #14
 800085c:	d817      	bhi.n	800088e <HAL_ADC_ConfigChannel+0xbe>
      {
        MODIFY_REG(hadc->Instance->SQR3, 
 800085e:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 8000862:	fa95 f7a5 	rbit	r7, r5
 8000866:	fab7 f787 	clz	r7, r7
 800086a:	f1a2 060a 	sub.w	r6, r2, #10
 800086e:	fa95 f5a5 	rbit	r5, r5
 8000872:	fab5 f285 	clz	r2, r5
 8000876:	4377      	muls	r7, r6
 8000878:	251f      	movs	r5, #31
 800087a:	fa05 f707 	lsl.w	r7, r5, r7
 800087e:	4372      	muls	r2, r6
 8000880:	ea2e 0707 	bic.w	r7, lr, r7
 8000884:	fa04 f202 	lsl.w	r2, r4, r2
 8000888:	433a      	orrs	r2, r7
 800088a:	639a      	str	r2, [r3, #56]	; 0x38
 800088c:	e015      	b.n	80008ba <HAL_ADC_ConfigChannel+0xea>
                  ADC_SQR3_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 15 to 16 */
      else
      {   
        MODIFY_REG(hadc->Instance->SQR4, 
 800088e:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8000890:	fa95 f6a5 	rbit	r6, r5
 8000894:	fab6 f686 	clz	r6, r6
 8000898:	3a0f      	subs	r2, #15
 800089a:	fa95 f5a5 	rbit	r5, r5
 800089e:	f04f 0e1f 	mov.w	lr, #31
 80008a2:	4356      	muls	r6, r2
 80008a4:	fab5 f585 	clz	r5, r5
 80008a8:	fa0e f606 	lsl.w	r6, lr, r6
 80008ac:	436a      	muls	r2, r5
 80008ae:	ea27 0606 	bic.w	r6, r7, r6
 80008b2:	fa04 f202 	lsl.w	r2, r4, r2
 80008b6:	4332      	orrs	r2, r6
 80008b8:	63da      	str	r2, [r3, #60]	; 0x3c
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	f012 0f0c 	tst.w	r2, #12
 80008c0:	f040 80c1 	bne.w	8000a46 <HAL_ADC_ConfigChannel+0x276>
      {
       
        /* Channel sampling time configuration */
        /* Clear the old sample time then set the new one for the selected channel */
        /* For channels 10 to 18 */
        if (sConfig->Channel >= ADC_CHANNEL_10)
 80008c4:	2c09      	cmp	r4, #9
 80008c6:	f04f 0238 	mov.w	r2, #56	; 0x38
 80008ca:	688f      	ldr	r7, [r1, #8]
 80008cc:	d919      	bls.n	8000902 <HAL_ADC_ConfigChannel+0x132>
        {
          ADC_SMPR2_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel);
 80008ce:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80008d2:	fa92 fea2 	rbit	lr, r2
 80008d6:	fabe fe8e 	clz	lr, lr
 80008da:	f1a4 060a 	sub.w	r6, r4, #10
 80008de:	fa92 f2a2 	rbit	r2, r2
 80008e2:	fab2 f582 	clz	r5, r2
 80008e6:	fb06 f20e 	mul.w	r2, r6, lr
 80008ea:	f04f 0e07 	mov.w	lr, #7
 80008ee:	fa0e f202 	lsl.w	r2, lr, r2
 80008f2:	436e      	muls	r6, r5
 80008f4:	ea2c 0202 	bic.w	r2, ip, r2
 80008f8:	fa07 f506 	lsl.w	r5, r7, r6
 80008fc:	4315      	orrs	r5, r2
 80008fe:	619d      	str	r5, [r3, #24]
 8000900:	e014      	b.n	800092c <HAL_ADC_ConfigChannel+0x15c>
        }
        else /* For channels 0 to 9 */
        {
          ADC_SMPR1_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel);
 8000902:	695d      	ldr	r5, [r3, #20]
 8000904:	fa92 f6a2 	rbit	r6, r2
 8000908:	fab6 f686 	clz	r6, r6
 800090c:	fa92 f2a2 	rbit	r2, r2
 8000910:	f04f 0e07 	mov.w	lr, #7
 8000914:	fab2 f282 	clz	r2, r2
 8000918:	4366      	muls	r6, r4
 800091a:	fa0e f606 	lsl.w	r6, lr, r6
 800091e:	4362      	muls	r2, r4
 8000920:	ea25 0606 	bic.w	r6, r5, r6
 8000924:	fa07 f502 	lsl.w	r5, r7, r2
 8000928:	4335      	orrs	r5, r6
 800092a:	615d      	str	r5, [r3, #20]
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800092c:	68da      	ldr	r2, [r3, #12]
      
       switch (sConfig->OffsetNumber)
 800092e:	690d      	ldr	r5, [r1, #16]
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000930:	694e      	ldr	r6, [r1, #20]
 8000932:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8000936:	0052      	lsls	r2, r2, #1
      
       switch (sConfig->OffsetNumber)
 8000938:	3d01      	subs	r5, #1
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800093a:	4096      	lsls	r6, r2
 800093c:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
      
       switch (sConfig->OffsetNumber)
 8000940:	2d03      	cmp	r5, #3
 8000942:	d83e      	bhi.n	80009c2 <HAL_ADC_ConfigChannel+0x1f2>
 8000944:	e8df f005 	tbb	[pc, r5]
 8000948:	2f201102 	.word	0x2f201102
        /* Configure offset register i when applicable:                         */
        /* - Enable offset                                                      */
        /* - Set channel number                                                 */
        /* - Set offset value                                                   */
       case ADC_OFFSET_1:
          MODIFY_REG(hadc->Instance->OFR1,
 800094c:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 800094e:	fa92 f5a2 	rbit	r5, r2
 8000952:	4a97      	ldr	r2, [pc, #604]	; (8000bb0 <HAL_ADC_ConfigChannel+0x3e0>)
 8000954:	403a      	ands	r2, r7
 8000956:	fab5 f585 	clz	r5, r5
 800095a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800095e:	4332      	orrs	r2, r6
 8000960:	fa04 f505 	lsl.w	r5, r4, r5
 8000964:	432a      	orrs	r2, r5
 8000966:	661a      	str	r2, [r3, #96]	; 0x60
                  ADC_OFR_FIELDS,
                  ADC_OFR1_OFFSET1_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                   
         break;
 8000968:	e06d      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x276>
      
       case ADC_OFFSET_2:
         MODIFY_REG(hadc->Instance->OFR2,
 800096a:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800096c:	fa92 f5a2 	rbit	r5, r2
 8000970:	4a8f      	ldr	r2, [pc, #572]	; (8000bb0 <HAL_ADC_ConfigChannel+0x3e0>)
 8000972:	403a      	ands	r2, r7
 8000974:	fab5 f585 	clz	r5, r5
 8000978:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800097c:	4332      	orrs	r2, r6
 800097e:	fa04 f505 	lsl.w	r5, r4, r5
 8000982:	432a      	orrs	r2, r5
 8000984:	665a      	str	r2, [r3, #100]	; 0x64
                  ADC_OFR_FIELDS, 
                  ADC_OFR2_OFFSET2_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                  
         break;
 8000986:	e05e      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x276>
          
       case ADC_OFFSET_3:
         MODIFY_REG(hadc->Instance->OFR3,
 8000988:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 800098a:	fa92 f2a2 	rbit	r2, r2
 800098e:	4d88      	ldr	r5, [pc, #544]	; (8000bb0 <HAL_ADC_ConfigChannel+0x3e0>)
 8000990:	403d      	ands	r5, r7
 8000992:	fab2 f282 	clz	r2, r2
 8000996:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800099a:	432e      	orrs	r6, r5
 800099c:	fa04 f202 	lsl.w	r2, r4, r2
 80009a0:	4332      	orrs	r2, r6
 80009a2:	669a      	str	r2, [r3, #104]	; 0x68
                  ADC_OFR_FIELDS,
                  ADC_OFR3_OFFSET3_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                  
         break;
 80009a4:	e04f      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x276>
      
       case ADC_OFFSET_4:
         MODIFY_REG(hadc->Instance->OFR4,
 80009a6:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 80009a8:	fa92 f2a2 	rbit	r2, r2
 80009ac:	4d80      	ldr	r5, [pc, #512]	; (8000bb0 <HAL_ADC_ConfigChannel+0x3e0>)
 80009ae:	403d      	ands	r5, r7
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80009b8:	432e      	orrs	r6, r5
 80009ba:	fa04 f202 	lsl.w	r2, r4, r2
 80009be:	4332      	orrs	r2, r6
 80009c0:	e040      	b.n	8000a44 <HAL_ADC_ConfigChannel+0x274>
       /* Case ADC_OFFSET_NONE */
       default :
       /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
         if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80009c2:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80009c4:	fa92 f2a2 	rbit	r2, r2
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	fa04 f202 	lsl.w	r2, r4, r2
 80009d0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80009d4:	4295      	cmp	r5, r2
         {
           CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80009d6:	bf02      	ittt	eq
 80009d8:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80009da:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80009de:	661a      	streq	r2, [r3, #96]	; 0x60
         }
         if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80009e0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80009e2:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 80009e6:	fa92 f2a2 	rbit	r2, r2
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	fa04 f202 	lsl.w	r2, r4, r2
 80009f2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80009f6:	4295      	cmp	r5, r2
         {
           CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN);
 80009f8:	bf02      	ittt	eq
 80009fa:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 80009fc:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a00:	665a      	streq	r2, [r3, #100]	; 0x64
         }
         if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a02:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8000a04:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8000a08:	fa92 f2a2 	rbit	r2, r2
 8000a0c:	fab2 f282 	clz	r2, r2
 8000a10:	fa04 f202 	lsl.w	r2, r4, r2
 8000a14:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000a18:	4295      	cmp	r5, r2
         {
           CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000a1a:	bf02      	ittt	eq
 8000a1c:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000a1e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a22:	669a      	streq	r2, [r3, #104]	; 0x68
         }
         if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a24:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8000a26:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8000a2a:	fa92 f2a2 	rbit	r2, r2
 8000a2e:	fab2 f282 	clz	r2, r2
 8000a32:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000a36:	fa04 f202 	lsl.w	r2, r4, r2
 8000a3a:	4295      	cmp	r5, r2
 8000a3c:	d103      	bne.n	8000a46 <HAL_ADC_ConfigChannel+0x276>
         {
           CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000a3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000a40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000a44:	66da      	str	r2, [r3, #108]	; 0x6c
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	f002 0203 	and.w	r2, r2, #3
 8000a4c:	2a01      	cmp	r2, #1
 8000a4e:	d102      	bne.n	8000a56 <HAL_ADC_ConfigChannel+0x286>
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	07d5      	lsls	r5, r2, #31
 8000a54:	d413      	bmi.n	8000a7e <HAL_ADC_ConfigChannel+0x2ae>
    {
      /* Configuration of differential mode */
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000a56:	68ca      	ldr	r2, [r1, #12]
 8000a58:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000a5c:	f04f 0201 	mov.w	r2, #1
 8000a60:	d01a      	beq.n	8000a98 <HAL_ADC_ConfigChannel+0x2c8>
      {
        /* Disable differential mode (default mode: single-ended) */
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000a62:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000a66:	40a2      	lsls	r2, r4
 8000a68:	ea21 0202 	bic.w	r2, r1, r2
 8000a6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a70:	2c11      	cmp	r4, #17
 8000a72:	d14b      	bne.n	8000b0c <HAL_ADC_ConfigChannel+0x33c>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a74:	4a4f      	ldr	r2, [pc, #316]	; (8000bb4 <HAL_ADC_ConfigChannel+0x3e4>)
 8000a76:	6892      	ldr	r2, [r2, #8]
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a78:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a7c:	d054      	beq.n	8000b28 <HAL_ADC_ConfigChannel+0x358>
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a7e:	2400      	movs	r4, #0
 8000a80:	e003      	b.n	8000a8a <HAL_ADC_ConfigChannel+0x2ba>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a82:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000a84:	f043 0320 	orr.w	r3, r3, #32
 8000a88:	6583      	str	r3, [r0, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
 8000a90:	4620      	mov	r0, r4
 8000a92:	e08a      	b.n	8000baa <HAL_ADC_ConfigChannel+0x3da>
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a94:	2002      	movs	r0, #2
 8000a96:	e088      	b.n	8000baa <HAL_ADC_ConfigChannel+0x3da>
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
      }
      else
      {
        /* Enable differential mode */
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000a98:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8000a9c:	40a2      	lsls	r2, r4
 8000a9e:	432a      	orrs	r2, r5
        
        /* Sampling time configuration of channel ADC_IN+1 (negative input)     */
        /* Clear the old sample time then set the new one for the selected      */
        /* channel.                                                             */
        /* Starting from channel 9, SMPR2 register must be configured           */
        if (sConfig->Channel >= ADC_CHANNEL_9)
 8000aa0:	2c08      	cmp	r4, #8
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
      }
      else
      {
        /* Enable differential mode */
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000aa2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000aa6:	688d      	ldr	r5, [r1, #8]
 8000aa8:	f04f 0238 	mov.w	r2, #56	; 0x38
        
        /* Sampling time configuration of channel ADC_IN+1 (negative input)     */
        /* Clear the old sample time then set the new one for the selected      */
        /* channel.                                                             */
        /* Starting from channel 9, SMPR2 register must be configured           */
        if (sConfig->Channel >= ADC_CHANNEL_9)
 8000aac:	d917      	bls.n	8000ade <HAL_ADC_ConfigChannel+0x30e>
        {
          ADC_SMPR2_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel+1);
 8000aae:	699f      	ldr	r7, [r3, #24]
 8000ab0:	fa92 f6a2 	rbit	r6, r2
 8000ab4:	fab6 f686 	clz	r6, r6
 8000ab8:	f1a4 0109 	sub.w	r1, r4, #9
 8000abc:	fa92 f2a2 	rbit	r2, r2
 8000ac0:	f04f 0e07 	mov.w	lr, #7
 8000ac4:	fab2 f282 	clz	r2, r2
 8000ac8:	434e      	muls	r6, r1
 8000aca:	fa0e f606 	lsl.w	r6, lr, r6
 8000ace:	4351      	muls	r1, r2
 8000ad0:	ea27 0606 	bic.w	r6, r7, r6
 8000ad4:	fa05 f201 	lsl.w	r2, r5, r1
 8000ad8:	4332      	orrs	r2, r6
 8000ada:	619a      	str	r2, [r3, #24]
 8000adc:	e7c8      	b.n	8000a70 <HAL_ADC_ConfigChannel+0x2a0>
        }
        else /* For channels 0 to 8, SMPR1 must be configured */
        {
          ADC_SMPR1_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel+1);
 8000ade:	695f      	ldr	r7, [r3, #20]
 8000ae0:	fa92 f6a2 	rbit	r6, r2
 8000ae4:	fab6 f686 	clz	r6, r6
 8000ae8:	1c61      	adds	r1, r4, #1
 8000aea:	fa92 f2a2 	rbit	r2, r2
 8000aee:	f04f 0e07 	mov.w	lr, #7
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	434e      	muls	r6, r1
 8000af8:	fa0e f606 	lsl.w	r6, lr, r6
 8000afc:	434a      	muls	r2, r1
 8000afe:	ea27 0606 	bic.w	r6, r7, r6
 8000b02:	fa05 f202 	lsl.w	r2, r5, r2
 8000b06:	4332      	orrs	r2, r6
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	e7b1      	b.n	8000a70 <HAL_ADC_ConfigChannel+0x2a0>
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000b0c:	2c12      	cmp	r4, #18
 8000b0e:	d104      	bne.n	8000b1a <HAL_ADC_ConfigChannel+0x34a>
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000b10:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <HAL_ADC_ConfigChannel+0x3e4>)
 8000b12:	6892      	ldr	r2, [r2, #8]
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000b14:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000b18:	e7b0      	b.n	8000a7c <HAL_ADC_ConfigChannel+0x2ac>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d1af      	bne.n	8000a7e <HAL_ADC_ConfigChannel+0x2ae>
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000b1e:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <HAL_ADC_ConfigChannel+0x3e4>)
 8000b20:	6892      	ldr	r2, [r2, #8]
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000b22:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000b26:	e7a9      	b.n	8000a7c <HAL_ADC_ConfigChannel+0x2ac>
      {
        /* Configuration of common ADC parameters (continuation)                */
  
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	f002 0203 	and.w	r2, r2, #3
 8000b2e:	2a01      	cmp	r2, #1
 8000b30:	d108      	bne.n	8000b44 <HAL_ADC_ConfigChannel+0x374>
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	07c9      	lsls	r1, r1, #31
 8000b36:	d505      	bpl.n	8000b44 <HAL_ADC_ConfigChannel+0x374>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else  
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b38:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000b3a:	f043 0320 	orr.w	r3, r3, #32
 8000b3e:	6583      	str	r3, [r0, #88]	; 0x58
          
          tmp_hal_status = HAL_ERROR;
 8000b40:	4614      	mov	r4, r2
 8000b42:	e7a2      	b.n	8000a8a <HAL_ADC_ConfigChannel+0x2ba>
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
        {
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b44:	2c11      	cmp	r4, #17
 8000b46:	d116      	bne.n	8000b76 <HAL_ADC_ConfigChannel+0x3a6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <HAL_ADC_ConfigChannel+0x3e8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d197      	bne.n	8000a7e <HAL_ADC_ConfigChannel+0x2ae>
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000b4e:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
 8000b52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b56:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially          */
              /*       CPU processing cycles.                                 */
              wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_ADC_ConfigChannel+0x3ec>)
 8000b5c:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <HAL_ADC_ConfigChannel+0x3f0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b64:	2378      	movs	r3, #120	; 0x78
 8000b66:	4353      	muls	r3, r2
              while(wait_loop_index != 0)
              {
                wait_loop_index--;
 8000b68:	9301      	str	r3, [sp, #4]
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially          */
              /*       CPU processing cycles.                                 */
              wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
              while(wait_loop_index != 0)
 8000b6a:	9b01      	ldr	r3, [sp, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d086      	beq.n	8000a7e <HAL_ADC_ConfigChannel+0x2ae>
              {
                wait_loop_index--;
 8000b70:	9b01      	ldr	r3, [sp, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	e7f8      	b.n	8000b68 <HAL_ADC_ConfigChannel+0x398>
              }
            }
          }
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8000b76:	2c12      	cmp	r4, #18
 8000b78:	d109      	bne.n	8000b8e <HAL_ADC_ConfigChannel+0x3be>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_ADC_ConfigChannel+0x3e8>)
 8000b7c:	4293      	cmp	r3, r2
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000b7e:	bf02      	ittt	eq
 8000b80:	f8d2 3308 	ldreq.w	r3, [r2, #776]	; 0x308
 8000b84:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8000b88:	f8c2 3308 	streq.w	r3, [r2, #776]	; 0x308
 8000b8c:	e777      	b.n	8000a7e <HAL_ADC_ConfigChannel+0x2ae>
            }
          }
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000b8e:	2c00      	cmp	r4, #0
 8000b90:	f47f af75 	bne.w	8000a7e <HAL_ADC_ConfigChannel+0x2ae>
          { 
            if (ADC_VREFINT_INSTANCE(hadc))
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_ADC_ConfigChannel+0x3e8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	f47f af71 	bne.w	8000a7e <HAL_ADC_ConfigChannel+0x2ae>
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000b9c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
 8000ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8000ba8:	e76f      	b.n	8000a8a <HAL_ADC_ConfigChannel+0x2ba>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000baa:	b003      	add	sp, #12
 8000bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	03fff000 	.word	0x03fff000
 8000bb4:	50040300 	.word	0x50040300
 8000bb8:	50040000 	.word	0x50040000
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	001e8480 	.word	0x001e8480

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bc6:	68d3      	ldr	r3, [r2, #12]
 8000bc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bcc:	041b      	lsls	r3, r3, #16
 8000bce:	0c1b      	lsrs	r3, r3, #16
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000bd4:	0200      	lsls	r0, r0, #8
 8000bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bda:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000bde:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000be0:	60d3      	str	r3, [r2, #12]
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_NVIC_SetPriority+0x60>)
 8000bea:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	2c04      	cmp	r4, #4
 8000bfa:	bf28      	it	cs
 8000bfc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	2d06      	cmp	r5, #6

  return (
 8000c00:	f04f 0501 	mov.w	r5, #1
 8000c04:	fa05 f404 	lsl.w	r4, r5, r4
 8000c08:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0c:	bf8c      	ite	hi
 8000c0e:	3b03      	subhi	r3, #3
 8000c10:	2300      	movls	r3, #0

  return (
 8000c12:	400c      	ands	r4, r1
 8000c14:	409c      	lsls	r4, r3
 8000c16:	fa05 f303 	lsl.w	r3, r5, r3
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000c1e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000c20:	ea42 0204 	orr.w	r2, r2, r4
 8000c24:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	bfaf      	iteee	ge
 8000c2a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	f000 000f 	andlt.w	r0, r0, #15
 8000c32:	4b06      	ldrlt	r3, [pc, #24]	; (8000c4c <HAL_NVIC_SetPriority+0x64>)
 8000c34:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	bfa5      	ittet	ge
 8000c38:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000c3c:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c44:	bd30      	pop	{r4, r5, pc}
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00
 8000c4c:	e000ed14 	.word	0xe000ed14

08000c50 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	3801      	subs	r0, #1
 8000c52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c56:	d20a      	bcs.n	8000c6e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5c:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	21f0      	movs	r1, #240	; 0xf0
 8000c60:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c7e:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c80:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c82:	bf0c      	ite	eq
 8000c84:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c88:	f022 0204 	bicne.w	r2, r2, #4
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	4770      	bx	lr
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c94:	4770      	bx	lr

08000c96 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c96:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c98:	f7ff fffc 	bl	8000c94 <HAL_SYSTICK_Callback>
 8000c9c:	bd08      	pop	{r3, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ca4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ca6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	f8df c168 	ldr.w	ip, [pc, #360]	; 8000e14 <HAL_GPIO_Init+0x174>
 8000cac:	4c57      	ldr	r4, [pc, #348]	; (8000e0c <HAL_GPIO_Init+0x16c>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cae:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cb0:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8000cb4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cb6:	9a01      	ldr	r2, [sp, #4]
 8000cb8:	40da      	lsrs	r2, r3
 8000cba:	f000 80a4 	beq.w	8000e06 <HAL_GPIO_Init+0x166>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 8000cc4:	9a01      	ldr	r2, [sp, #4]
 8000cc6:	ea12 0509 	ands.w	r5, r2, r9
 8000cca:	f000 809a 	beq.w	8000e02 <HAL_GPIO_Init+0x162>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cce:	684a      	ldr	r2, [r1, #4]
 8000cd0:	f022 0a10 	bic.w	sl, r2, #16
 8000cd4:	f1ba 0f02 	cmp.w	sl, #2
 8000cd8:	d113      	bne.n	8000d02 <HAL_GPIO_Init+0x62>
 8000cda:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000cde:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ce2:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ce6:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000cee:	fa08 f60b 	lsl.w	r6, r8, fp
 8000cf2:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000cf6:	690e      	ldr	r6, [r1, #16]
 8000cf8:	fa06 f60b 	lsl.w	r6, r6, fp
 8000cfc:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000cfe:	f8ce 6020 	str.w	r6, [lr, #32]
 8000d02:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000d06:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d08:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000d0a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d0e:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d10:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000d14:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d16:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d1e:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d22:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8000d26:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d28:	d811      	bhi.n	8000d4e <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d2a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000d2c:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d30:	68cf      	ldr	r7, [r1, #12]
 8000d32:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d36:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000d3a:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d3e:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d42:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000d46:	409f      	lsls	r7, r3
 8000d48:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000d4c:	6047      	str	r7, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d4e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000d50:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d52:	688f      	ldr	r7, [r1, #8]
 8000d54:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d58:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000d5a:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d5c:	00d6      	lsls	r6, r2, #3
 8000d5e:	d550      	bpl.n	8000e02 <HAL_GPIO_Init+0x162>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d60:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 8000d64:	f046 0601 	orr.w	r6, r6, #1
 8000d68:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
 8000d6c:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 8000d70:	f006 0601 	and.w	r6, r6, #1
 8000d74:	9603      	str	r6, [sp, #12]
 8000d76:	9e03      	ldr	r6, [sp, #12]
 8000d78:	f023 0603 	bic.w	r6, r3, #3
 8000d7c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000d80:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d84:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8000d88:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d8a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000d8e:	fa08 fe09 	lsl.w	lr, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000d92:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d96:	ea27 0a0e 	bic.w	sl, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000d9a:	d00b      	beq.n	8000db4 <HAL_GPIO_Init+0x114>
 8000d9c:	4f1c      	ldr	r7, [pc, #112]	; (8000e10 <HAL_GPIO_Init+0x170>)
 8000d9e:	42b8      	cmp	r0, r7
 8000da0:	d00b      	beq.n	8000dba <HAL_GPIO_Init+0x11a>
 8000da2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000da6:	42b8      	cmp	r0, r7
 8000da8:	bf14      	ite	ne
 8000daa:	f04f 0e07 	movne.w	lr, #7
 8000dae:	f04f 0e02 	moveq.w	lr, #2
 8000db2:	e004      	b.n	8000dbe <HAL_GPIO_Init+0x11e>
 8000db4:	f04f 0e00 	mov.w	lr, #0
 8000db8:	e001      	b.n	8000dbe <HAL_GPIO_Init+0x11e>
 8000dba:	f04f 0e01 	mov.w	lr, #1
 8000dbe:	fa0e f909 	lsl.w	r9, lr, r9
 8000dc2:	ea49 070a 	orr.w	r7, r9, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8000dc6:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dc8:	4e10      	ldr	r6, [pc, #64]	; (8000e0c <HAL_GPIO_Init+0x16c>)
 8000dca:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dcc:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dce:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	bf0c      	ite	eq
 8000dd4:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000dd6:	432e      	orrne	r6, r5
        }
        EXTI->IMR1 = temp;
 8000dd8:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR1;
 8000dda:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ddc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 8000de0:	bf0c      	ite	eq
 8000de2:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000de4:	432e      	orrne	r6, r5
        }
        EXTI->EMR1 = temp;
 8000de6:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de8:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dea:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 8000dee:	bf0c      	ite	eq
 8000df0:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000df2:	432e      	orrne	r6, r5
        }
        EXTI->RTSR1 = temp;
 8000df4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR1;
 8000df6:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df8:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	bf54      	ite	pl
 8000dfc:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000dfe:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR1 = temp;
 8000e00:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 8000e02:	3301      	adds	r3, #1
 8000e04:	e757      	b.n	8000cb6 <HAL_GPIO_Init+0x16>
  }
}
 8000e06:	b005      	add	sp, #20
 8000e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e0c:	40010400 	.word	0x40010400
 8000e10:	48000400 	.word	0x48000400
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e18:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000e1a:	4219      	tst	r1, r3
}
 8000e1c:	bf14      	ite	ne
 8000e1e:	2001      	movne	r0, #1
 8000e20:	2000      	moveq	r0, #0
 8000e22:	4770      	bx	lr

08000e24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e24:	b10a      	cbz	r2, 8000e2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e26:	6181      	str	r1, [r0, #24]
 8000e28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	6281      	str	r1, [r0, #40]	; 0x28
 8000e2c:	4770      	bx	lr
	...

08000e30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e30:	4b02      	ldr	r3, [pc, #8]	; (8000e3c <HAL_PWREx_GetVoltageRange+0xc>)
 8000e32:	6818      	ldr	r0, [r3, #0]
}
 8000e34:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40007000 	.word	0x40007000

08000e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_PWREx_ControlVoltageScaling+0x60>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e42:	681a      	ldr	r2, [r3, #0]
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e44:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e48:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e4c:	d11a      	bne.n	8000e84 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e4e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000e52:	d020      	beq.n	8000e96 <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e54:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000e56:	4913      	ldr	r1, [pc, #76]	; (8000ea4 <HAL_PWREx_ControlVoltageScaling+0x64>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e60:	601a      	str	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000e62:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	fbb2 f1f1 	udiv	r1, r2, r1
 8000e6a:	2232      	movs	r2, #50	; 0x32
 8000e6c:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000e6e:	b122      	cbz	r2, 8000e7a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000e70:	6959      	ldr	r1, [r3, #20]
 8000e72:	0549      	lsls	r1, r1, #21
 8000e74:	d501      	bpl.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 8000e76:	3a01      	subs	r2, #1
 8000e78:	e7f9      	b.n	8000e6e <HAL_PWREx_ControlVoltageScaling+0x2e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_PWREx_ControlVoltageScaling+0x60>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	055b      	lsls	r3, r3, #21
 8000e80:	d40b      	bmi.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x5a>
 8000e82:	e008      	b.n	8000e96 <HAL_PWREx_ControlVoltageScaling+0x56>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e84:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e88:	bf1f      	itttt	ne
 8000e8a:	681a      	ldrne	r2, [r3, #0]
 8000e8c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000e90:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000e94:	601a      	strne	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8000e96:	2000      	movs	r0, #0
 8000e98:	4770      	bx	lr
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
      {
        return HAL_TIMEOUT;
 8000e9a:	2003      	movs	r0, #3
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
}  
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40007000 	.word	0x40007000
 8000ea4:	000f4240 	.word	0x000f4240
 8000ea8:	20000000 	.word	0x20000000

08000eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000eae:	4d1e      	ldr	r5, [pc, #120]	; (8000f28 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000eb0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000eb2:	00d9      	lsls	r1, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000eb4:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000eb6:	d502      	bpl.n	8000ebe <RCC_SetFlashLatencyFromMSIRange+0x12>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000eb8:	f7ff ffba 	bl	8000e30 <HAL_PWREx_GetVoltageRange>
 8000ebc:	e00e      	b.n	8000edc <RCC_SetFlashLatencyFromMSIRange+0x30>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	65ab      	str	r3, [r5, #88]	; 0x58
 8000ec6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000ed0:	f7ff ffae 	bl	8000e30 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000ed4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eda:	65ab      	str	r3, [r5, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000edc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000ee0:	d106      	bne.n	8000ef0 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000ee2:	2c80      	cmp	r4, #128	; 0x80
 8000ee4:	d90c      	bls.n	8000f00 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000ee6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000ee8:	bf8c      	ite	hi
 8000eea:	2302      	movhi	r3, #2
 8000eec:	2301      	movls	r3, #1
 8000eee:	e00c      	b.n	8000f0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8000ef0:	2c80      	cmp	r4, #128	; 0x80
 8000ef2:	d807      	bhi.n	8000f04 <RCC_SetFlashLatencyFromMSIRange+0x58>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000ef4:	d008      	beq.n	8000f08 <RCC_SetFlashLatencyFromMSIRange+0x5c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000ef6:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 8000efa:	4253      	negs	r3, r2
 8000efc:	4153      	adcs	r3, r2
 8000efe:	e004      	b.n	8000f0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000f00:	2300      	movs	r3, #0
 8000f02:	e002      	b.n	8000f0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  else
  {
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8000f04:	2303      	movs	r3, #3
 8000f06:	e000      	b.n	8000f0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000f08:	2302      	movs	r3, #2
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000f0c:	680a      	ldr	r2, [r1, #0]
 8000f0e:	f022 0207 	bic.w	r2, r2, #7
 8000f12:	431a      	orrs	r2, r3
 8000f14:	600a      	str	r2, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000f16:	6808      	ldr	r0, [r1, #0]
 8000f18:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000f1c:	1ac0      	subs	r0, r0, r3
 8000f1e:	bf18      	it	ne
 8000f20:	2001      	movne	r0, #1
 8000f22:	b003      	add	sp, #12
 8000f24:	bd30      	pop	{r4, r5, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40022000 	.word	0x40022000

08000f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f30:	b570      	push	{r4, r5, r6, lr}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000f32:	4c4a      	ldr	r4, [pc, #296]	; (800105c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000f34:	68a3      	ldr	r3, [r4, #8]
 8000f36:	f013 0f0c 	tst.w	r3, #12
 8000f3a:	d009      	beq.n	8000f50 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000f3c:	68a3      	ldr	r3, [r4, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000f3e:	f003 030c 	and.w	r3, r3, #12
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	d126      	bne.n	8000f94 <HAL_RCC_GetSysClockFreq+0x64>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000f46:	68e3      	ldr	r3, [r4, #12]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d121      	bne.n	8000f94 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000f50:	6822      	ldr	r2, [r4, #0]
 8000f52:	4b42      	ldr	r3, [pc, #264]	; (800105c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000f54:	0712      	lsls	r2, r2, #28
 8000f56:	d40a      	bmi.n	8000f6e <HAL_RCC_GetSysClockFreq+0x3e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8000f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f5c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000f60:	fa92 f2a2 	rbit	r2, r2
 8000f64:	fab2 f282 	clz	r2, r2
 8000f68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000f6c:	e007      	b.n	8000f7e <HAL_RCC_GetSysClockFreq+0x4e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	22f0      	movs	r2, #240	; 0xf0
 8000f72:	fa92 f2a2 	rbit	r2, r2
 8000f76:	fab2 f282 	clz	r2, r2
 8000f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f7e:	40d3      	lsrs	r3, r2
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000f80:	4a37      	ldr	r2, [pc, #220]	; (8001060 <HAL_RCC_GetSysClockFreq+0x130>)
 8000f82:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000f86:	68a3      	ldr	r3, [r4, #8]
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000f88:	f013 0f0c 	tst.w	r3, #12
 8000f8c:	bf0c      	ite	eq
 8000f8e:	4630      	moveq	r0, r6
 8000f90:	2000      	movne	r0, #0
 8000f92:	e011      	b.n	8000fb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000f94:	68a3      	ldr	r3, [r4, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d007      	beq.n	8000fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d104      	bne.n	8000fb4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000faa:	482e      	ldr	r0, [pc, #184]	; (8001064 <HAL_RCC_GetSysClockFreq+0x134>)
 8000fac:	e000      	b.n	8000fb0 <HAL_RCC_GetSysClockFreq+0x80>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000fae:	482e      	ldr	r0, [pc, #184]	; (8001068 <HAL_RCC_GetSysClockFreq+0x138>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000fb0:	2600      	movs	r6, #0
 8000fb2:	e001      	b.n	8000fb8 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8000fb4:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000fb6:	4606      	mov	r6, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000fb8:	68a3      	ldr	r3, [r4, #8]
 8000fba:	4a28      	ldr	r2, [pc, #160]	; (800105c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	d149      	bne.n	8001058 <HAL_RCC_GetSysClockFreq+0x128>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000fc4:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8000fc6:	68d3      	ldr	r3, [r2, #12]
 8000fc8:	2070      	movs	r0, #112	; 0x70
 8000fca:	fa90 f0a0 	rbit	r0, r0
 8000fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000fd2:	fab0 f080 	clz	r0, r0
 8000fd6:	fa23 f000 	lsr.w	r0, r3, r0

    switch (pllsource)
 8000fda:	f001 0303 	and.w	r3, r1, #3
 8000fde:	2b02      	cmp	r3, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8000fe0:	f100 0501 	add.w	r5, r0, #1
 8000fe4:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00

    switch (pllsource)
 8000fe8:	d00c      	beq.n	8001004 <HAL_RCC_GetSysClockFreq+0xd4>
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d119      	bne.n	8001022 <HAL_RCC_GetSysClockFreq+0xf2>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000fee:	68d3      	ldr	r3, [r2, #12]
 8000ff0:	fa91 f1a1 	rbit	r1, r1
 8000ff4:	fab1 f181 	clz	r1, r1
 8000ff8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000ffc:	fa23 f101 	lsr.w	r1, r3, r1
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_RCC_GetSysClockFreq+0x134>)
 8001002:	e009      	b.n	8001018 <HAL_RCC_GetSysClockFreq+0xe8>
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001004:	68d3      	ldr	r3, [r2, #12]
 8001006:	fa91 f1a1 	rbit	r1, r1
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_RCC_GetSysClockFreq+0x138>)
 800100c:	fab1 f181 	clz	r1, r1
 8001010:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001014:	fa23 f101 	lsr.w	r1, r3, r1
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001018:	fbb2 f0f5 	udiv	r0, r2, r5
 800101c:	fb00 f301 	mul.w	r3, r0, r1
      break;
 8001020:	e00b      	b.n	800103a <HAL_RCC_GetSysClockFreq+0x10a>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001022:	68d2      	ldr	r2, [r2, #12]
 8001024:	fa91 f1a1 	rbit	r1, r1
 8001028:	fab1 f181 	clz	r1, r1
 800102c:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8001030:	40ca      	lsrs	r2, r1
 8001032:	fbb6 f0f5 	udiv	r0, r6, r5
 8001036:	fb00 f302 	mul.w	r3, r0, r2
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 800103a:	68e2      	ldr	r2, [r4, #12]
 800103c:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 8001040:	fa90 f0a0 	rbit	r0, r0
 8001044:	fab0 f080 	clz	r0, r0
    sysclockfreq = pllvco/pllr;
 8001048:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 800104c:	fa22 f000 	lsr.w	r0, r2, r0
 8001050:	3001      	adds	r0, #1
 8001052:	0040      	lsls	r0, r0, #1
 8001054:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 8001058:	bd70      	pop	{r4, r5, r6, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	080043d0 	.word	0x080043d0
 8001064:	007a1200 	.word	0x007a1200
 8001068:	00f42400 	.word	0x00f42400

0800106c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800106c:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001072:	06dd      	lsls	r5, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001074:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001076:	f140 808f 	bpl.w	8001198 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800107a:	4d9e      	ldr	r5, [pc, #632]	; (80012f4 <HAL_RCC_OscConfig+0x288>)
 800107c:	68ab      	ldr	r3, [r5, #8]
 800107e:	f013 0f0c 	tst.w	r3, #12
 8001082:	d153      	bne.n	800112c <HAL_RCC_OscConfig+0xc0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	0798      	lsls	r0, r3, #30
 8001088:	d503      	bpl.n	8001092 <HAL_RCC_OscConfig+0x26>
 800108a:	69a3      	ldr	r3, [r4, #24]
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8256 	beq.w	800153e <HAL_RCC_OscConfig+0x4d2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001092:	682a      	ldr	r2, [r5, #0]
 8001094:	4b97      	ldr	r3, [pc, #604]	; (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001096:	6a20      	ldr	r0, [r4, #32]
 8001098:	0711      	lsls	r1, r2, #28
 800109a:	bf56      	itet	pl
 800109c:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80010a0:	681b      	ldrmi	r3, [r3, #0]
 80010a2:	091b      	lsrpl	r3, r3, #4
 80010a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010a8:	4283      	cmp	r3, r0
 80010aa:	d216      	bcs.n	80010da <HAL_RCC_OscConfig+0x6e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ac:	f7ff fefe 	bl	8000eac <RCC_SetFlashLatencyFromMSIRange>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	f040 8244 	bne.w	800153e <HAL_RCC_OscConfig+0x4d2>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	602b      	str	r3, [r5, #0]
 80010be:	682b      	ldr	r3, [r5, #0]
 80010c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c4:	6a23      	ldr	r3, [r4, #32]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ca:	686b      	ldr	r3, [r5, #4]
 80010cc:	69e2      	ldr	r2, [r4, #28]
 80010ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80010d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80010d6:	606b      	str	r3, [r5, #4]
 80010d8:	e014      	b.n	8001104 <HAL_RCC_OscConfig+0x98>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010da:	682b      	ldr	r3, [r5, #0]
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	602b      	str	r3, [r5, #0]
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010e8:	4303      	orrs	r3, r0
 80010ea:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ec:	686b      	ldr	r3, [r5, #4]
 80010ee:	69e2      	ldr	r2, [r4, #28]
 80010f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80010f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80010f8:	606b      	str	r3, [r5, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010fa:	f7ff fed7 	bl	8000eac <RCC_SetFlashLatencyFromMSIRange>
 80010fe:	2800      	cmp	r0, #0
 8001100:	f040 821d 	bne.w	800153e <HAL_RCC_OscConfig+0x4d2>
            return HAL_ERROR;
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001104:	f7ff ff14 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 8001108:	68ab      	ldr	r3, [r5, #8]
 800110a:	22f0      	movs	r2, #240	; 0xf0
 800110c:	fa92 f2a2 	rbit	r2, r2
 8001110:	fab2 f282 	clz	r2, r2
 8001114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001118:	40d3      	lsrs	r3, r2
 800111a:	4a77      	ldr	r2, [pc, #476]	; (80012f8 <HAL_RCC_OscConfig+0x28c>)
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	40d8      	lsrs	r0, r3
 8001120:	4b76      	ldr	r3, [pc, #472]	; (80012fc <HAL_RCC_OscConfig+0x290>)
 8001122:	6018      	str	r0, [r3, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff fa37 	bl	8000598 <HAL_InitTick>
 800112a:	e035      	b.n	8001198 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800112c:	6983      	ldr	r3, [r0, #24]
 800112e:	b31b      	cbz	r3, 8001178 <HAL_RCC_OscConfig+0x10c>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001138:	f7ff fa56 	bl	80005e8 <HAL_GetTick>
 800113c:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800113e:	682a      	ldr	r2, [r5, #0]
 8001140:	4b6c      	ldr	r3, [pc, #432]	; (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001142:	0792      	lsls	r2, r2, #30
 8001144:	d406      	bmi.n	8001154 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001146:	f7ff fa4f 	bl	80005e8 <HAL_GetTick>
 800114a:	1b80      	subs	r0, r0, r6
 800114c:	2802      	cmp	r0, #2
 800114e:	d9f6      	bls.n	800113e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001150:	2003      	movs	r0, #3
 8001152:	e1f5      	b.n	8001540 <HAL_RCC_OscConfig+0x4d4>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f042 0208 	orr.w	r2, r2, #8
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8001162:	6a22      	ldr	r2, [r4, #32]
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	69e1      	ldr	r1, [r4, #28]
 800116c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001170:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	e00f      	b.n	8001198 <HAL_RCC_OscConfig+0x12c>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001180:	f7ff fa32 	bl	80005e8 <HAL_GetTick>
 8001184:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001186:	682b      	ldr	r3, [r5, #0]
 8001188:	079f      	lsls	r7, r3, #30
 800118a:	d505      	bpl.n	8001198 <HAL_RCC_OscConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800118c:	f7ff fa2c 	bl	80005e8 <HAL_GetTick>
 8001190:	1b80      	subs	r0, r0, r6
 8001192:	2802      	cmp	r0, #2
 8001194:	d9f7      	bls.n	8001186 <HAL_RCC_OscConfig+0x11a>
 8001196:	e7db      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	07de      	lsls	r6, r3, #31
 800119c:	d403      	bmi.n	80011a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	079d      	lsls	r5, r3, #30
 80011a2:	d448      	bmi.n	8001236 <HAL_RCC_OscConfig+0x1ca>
 80011a4:	e09f      	b.n	80012e6 <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80011a6:	4d53      	ldr	r5, [pc, #332]	; (80012f4 <HAL_RCC_OscConfig+0x288>)
 80011a8:	68ab      	ldr	r3, [r5, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d009      	beq.n	80011c6 <HAL_RCC_OscConfig+0x15a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011b2:	68ab      	ldr	r3, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	d10b      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011bc:	68eb      	ldr	r3, [r5, #12]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c6:	682b      	ldr	r3, [r5, #0]
 80011c8:	0398      	lsls	r0, r3, #14
 80011ca:	d5e8      	bpl.n	800119e <HAL_RCC_OscConfig+0x132>
 80011cc:	6863      	ldr	r3, [r4, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1e5      	bne.n	800119e <HAL_RCC_OscConfig+0x132>
 80011d2:	e1b4      	b.n	800153e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d006      	beq.n	80011ea <HAL_RCC_OscConfig+0x17e>
 80011dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e0:	d108      	bne.n	80011f4 <HAL_RCC_OscConfig+0x188>
 80011e2:	682b      	ldr	r3, [r5, #0]
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	602b      	str	r3, [r5, #0]
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	602b      	str	r3, [r5, #0]
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x19a>
 80011f4:	682a      	ldr	r2, [r5, #0]
 80011f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011fa:	602a      	str	r2, [r5, #0]
 80011fc:	682a      	ldr	r2, [r5, #0]
 80011fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001202:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001204:	b15b      	cbz	r3, 800121e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001206:	f7ff f9ef 	bl	80005e8 <HAL_GetTick>
 800120a:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	0399      	lsls	r1, r3, #14
 8001210:	d4c5      	bmi.n	800119e <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001212:	f7ff f9e9 	bl	80005e8 <HAL_GetTick>
 8001216:	1b80      	subs	r0, r0, r6
 8001218:	2864      	cmp	r0, #100	; 0x64
 800121a:	d9f7      	bls.n	800120c <HAL_RCC_OscConfig+0x1a0>
 800121c:	e798      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121e:	f7ff f9e3 	bl	80005e8 <HAL_GetTick>
 8001222:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	039a      	lsls	r2, r3, #14
 8001228:	d5b9      	bpl.n	800119e <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122a:	f7ff f9dd 	bl	80005e8 <HAL_GetTick>
 800122e:	1b80      	subs	r0, r0, r6
 8001230:	2864      	cmp	r0, #100	; 0x64
 8001232:	d9f7      	bls.n	8001224 <HAL_RCC_OscConfig+0x1b8>
 8001234:	e78c      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001236:	4d2f      	ldr	r5, [pc, #188]	; (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001238:	68ab      	ldr	r3, [r5, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b04      	cmp	r3, #4
 8001240:	d009      	beq.n	8001256 <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001242:	68ab      	ldr	r3, [r5, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b0c      	cmp	r3, #12
 800124a:	d11a      	bne.n	8001282 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800124c:	68eb      	ldr	r3, [r5, #12]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d115      	bne.n	8001282 <HAL_RCC_OscConfig+0x216>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	055b      	lsls	r3, r3, #21
 800125a:	d503      	bpl.n	8001264 <HAL_RCC_OscConfig+0x1f8>
 800125c:	68e3      	ldr	r3, [r4, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 816d 	beq.w	800153e <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	686b      	ldr	r3, [r5, #4]
 8001266:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 800126a:	fa92 f2a2 	rbit	r2, r2
 800126e:	6921      	ldr	r1, [r4, #16]
 8001270:	fab2 f282 	clz	r2, r2
 8001274:	fa01 f202 	lsl.w	r2, r1, r2
 8001278:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800127c:	4313      	orrs	r3, r2
 800127e:	606b      	str	r3, [r5, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001280:	e031      	b.n	80012e6 <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001282:	68e3      	ldr	r3, [r4, #12]
 8001284:	b1fb      	cbz	r3, 80012c6 <HAL_RCC_OscConfig+0x25a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128c:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128e:	f7ff f9ab 	bl	80005e8 <HAL_GetTick>
 8001292:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	4817      	ldr	r0, [pc, #92]	; (80012f4 <HAL_RCC_OscConfig+0x288>)
 8001298:	055f      	lsls	r7, r3, #21
 800129a:	d405      	bmi.n	80012a8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff f9a4 	bl	80005e8 <HAL_GetTick>
 80012a0:	1b80      	subs	r0, r0, r6
 80012a2:	2802      	cmp	r0, #2
 80012a4:	d9f6      	bls.n	8001294 <HAL_RCC_OscConfig+0x228>
 80012a6:	e753      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	6843      	ldr	r3, [r0, #4]
 80012aa:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	6921      	ldr	r1, [r4, #16]
 80012b4:	fab2 f282 	clz	r2, r2
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80012c0:	4313      	orrs	r3, r2
 80012c2:	6043      	str	r3, [r0, #4]
 80012c4:	e00f      	b.n	80012e6 <HAL_RCC_OscConfig+0x27a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c6:	682b      	ldr	r3, [r5, #0]
 80012c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012cc:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff f98b 	bl	80005e8 <HAL_GetTick>
 80012d2:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	0558      	lsls	r0, r3, #21
 80012d8:	d505      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff f985 	bl	80005e8 <HAL_GetTick>
 80012de:	1b80      	subs	r0, r0, r6
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9f7      	bls.n	80012d4 <HAL_RCC_OscConfig+0x268>
 80012e4:	e734      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	0719      	lsls	r1, r3, #28
 80012ea:	d409      	bmi.n	8001300 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	075a      	lsls	r2, r3, #29
 80012f0:	d42f      	bmi.n	8001352 <HAL_RCC_OscConfig+0x2e6>
 80012f2:	e097      	b.n	8001424 <HAL_RCC_OscConfig+0x3b8>
 80012f4:	40021000 	.word	0x40021000
 80012f8:	080043b5 	.word	0x080043b5
 80012fc:	20000000 	.word	0x20000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001300:	6963      	ldr	r3, [r4, #20]
 8001302:	4d91      	ldr	r5, [pc, #580]	; (8001548 <HAL_RCC_OscConfig+0x4dc>)
 8001304:	b193      	cbz	r3, 800132c <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001312:	f7ff f969 	bl	80005e8 <HAL_GetTick>
 8001316:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001318:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800131c:	079b      	lsls	r3, r3, #30
 800131e:	d4e5      	bmi.n	80012ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff f962 	bl	80005e8 <HAL_GetTick>
 8001324:	1b80      	subs	r0, r0, r6
 8001326:	2802      	cmp	r0, #2
 8001328:	d9f6      	bls.n	8001318 <HAL_RCC_OscConfig+0x2ac>
 800132a:	e711      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff f956 	bl	80005e8 <HAL_GetTick>
 800133c:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800133e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001342:	079f      	lsls	r7, r3, #30
 8001344:	d5d2      	bpl.n	80012ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff f94f 	bl	80005e8 <HAL_GetTick>
 800134a:	1b80      	subs	r0, r0, r6
 800134c:	2802      	cmp	r0, #2
 800134e:	d9f6      	bls.n	800133e <HAL_RCC_OscConfig+0x2d2>
 8001350:	e6fe      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001352:	4d7d      	ldr	r5, [pc, #500]	; (8001548 <HAL_RCC_OscConfig+0x4dc>)
 8001354:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001356:	00d8      	lsls	r0, r3, #3
 8001358:	d40a      	bmi.n	8001370 <HAL_RCC_OscConfig+0x304>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	65ab      	str	r3, [r5, #88]	; 0x58
 8001362:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800136c:	2701      	movs	r7, #1
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x306>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001370:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001372:	4e76      	ldr	r6, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x4e0>)
 8001374:	6833      	ldr	r3, [r6, #0]
 8001376:	05d9      	lsls	r1, r3, #23
 8001378:	d503      	bpl.n	8001382 <HAL_RCC_OscConfig+0x316>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137a:	68a3      	ldr	r3, [r4, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d111      	bne.n	80013a4 <HAL_RCC_OscConfig+0x338>
 8001380:	e018      	b.n	80013b4 <HAL_RCC_OscConfig+0x348>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001382:	6833      	ldr	r3, [r6, #0]
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138a:	f7ff f92d 	bl	80005e8 <HAL_GetTick>
 800138e:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001390:	6833      	ldr	r3, [r6, #0]
 8001392:	05da      	lsls	r2, r3, #23
 8001394:	d4f1      	bmi.n	800137a <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001396:	f7ff f927 	bl	80005e8 <HAL_GetTick>
 800139a:	ebc8 0000 	rsb	r0, r8, r0
 800139e:	2802      	cmp	r0, #2
 80013a0:	d9f6      	bls.n	8001390 <HAL_RCC_OscConfig+0x324>
 80013a2:	e6d5      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d10c      	bne.n	80013c2 <HAL_RCC_OscConfig+0x356>
 80013a8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80013b4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80013c0:	e00c      	b.n	80013dc <HAL_RCC_OscConfig+0x370>
 80013c2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 80013ce:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80013d2:	f022 0204 	bic.w	r2, r2, #4
 80013d6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013da:	b173      	cbz	r3, 80013fa <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff f904 	bl	80005e8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f241 3888 	movw	r8, #5000	; 0x1388

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80013e6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80013ea:	079b      	lsls	r3, r3, #30
 80013ec:	d40e      	bmi.n	800140c <HAL_RCC_OscConfig+0x3a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff f8fb 	bl	80005e8 <HAL_GetTick>
 80013f2:	1b80      	subs	r0, r0, r6
 80013f4:	4540      	cmp	r0, r8
 80013f6:	d9f6      	bls.n	80013e6 <HAL_RCC_OscConfig+0x37a>
 80013f8:	e6aa      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fa:	f7ff f8f5 	bl	80005e8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001404:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001408:	0798      	lsls	r0, r3, #30
 800140a:	d405      	bmi.n	8001418 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800140c:	b157      	cbz	r7, 8001424 <HAL_RCC_OscConfig+0x3b8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001414:	65ab      	str	r3, [r5, #88]	; 0x58
 8001416:	e005      	b.n	8001424 <HAL_RCC_OscConfig+0x3b8>
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f7ff f8e6 	bl	80005e8 <HAL_GetTick>
 800141c:	1b80      	subs	r0, r0, r6
 800141e:	4540      	cmp	r0, r8
 8001420:	d9f0      	bls.n	8001404 <HAL_RCC_OscConfig+0x398>
 8001422:	e695      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	0699      	lsls	r1, r3, #26
 8001428:	d402      	bmi.n	8001430 <HAL_RCC_OscConfig+0x3c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800142a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800142c:	bb4a      	cbnz	r2, 8001482 <HAL_RCC_OscConfig+0x416>
 800142e:	e05f      	b.n	80014f0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001432:	4d45      	ldr	r5, [pc, #276]	; (8001548 <HAL_RCC_OscConfig+0x4dc>)
 8001434:	b193      	cbz	r3, 800145c <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001436:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001442:	f7ff f8d1 	bl	80005e8 <HAL_GetTick>
 8001446:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001448:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800144c:	079a      	lsls	r2, r3, #30
 800144e:	d4ec      	bmi.n	800142a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001450:	f7ff f8ca 	bl	80005e8 <HAL_GetTick>
 8001454:	1b80      	subs	r0, r0, r6
 8001456:	2802      	cmp	r0, #2
 8001458:	d9f6      	bls.n	8001448 <HAL_RCC_OscConfig+0x3dc>
 800145a:	e679      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800145c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff f8be 	bl	80005e8 <HAL_GetTick>
 800146c:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800146e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001472:	079b      	lsls	r3, r3, #30
 8001474:	d5d9      	bpl.n	800142a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001476:	f7ff f8b7 	bl	80005e8 <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f6      	bls.n	800146e <HAL_RCC_OscConfig+0x402>
 8001480:	e666      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001482:	4d31      	ldr	r5, [pc, #196]	; (8001548 <HAL_RCC_OscConfig+0x4dc>)
 8001484:	68ab      	ldr	r3, [r5, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d057      	beq.n	800153e <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148e:	682b      	ldr	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001490:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001496:	602b      	str	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001498:	d138      	bne.n	800150c <HAL_RCC_OscConfig+0x4a0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff f8a5 	bl	80005e8 <HAL_GetTick>
 800149e:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	4829      	ldr	r0, [pc, #164]	; (8001548 <HAL_RCC_OscConfig+0x4dc>)
 80014a4:	019f      	lsls	r7, r3, #6
 80014a6:	d425      	bmi.n	80014f4 <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80014aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014ae:	06f6      	lsls	r6, r6, #27
 80014b0:	ea46 2103 	orr.w	r1, r6, r3, lsl #8
 80014b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014b6:	3a01      	subs	r2, #1
 80014b8:	430b      	orrs	r3, r1
 80014ba:	ea43 1102 	orr.w	r1, r3, r2, lsl #4
 80014be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	3b01      	subs	r3, #1
 80014c4:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 80014c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	3b01      	subs	r3, #1
 80014ce:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 80014d2:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d4:	6803      	ldr	r3, [r0, #0]
 80014d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014da:	6003      	str	r3, [r0, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014dc:	68c3      	ldr	r3, [r0, #12]
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e2:	60c3      	str	r3, [r0, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff f880 	bl	80005e8 <HAL_GetTick>
 80014e8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80014ea:	682b      	ldr	r3, [r5, #0]
 80014ec:	0199      	lsls	r1, r3, #6
 80014ee:	d507      	bpl.n	8001500 <HAL_RCC_OscConfig+0x494>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80014f0:	2000      	movs	r0, #0
 80014f2:	e025      	b.n	8001540 <HAL_RCC_OscConfig+0x4d4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff f878 	bl	80005e8 <HAL_GetTick>
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d9d0      	bls.n	80014a0 <HAL_RCC_OscConfig+0x434>
 80014fe:	e627      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001500:	f7ff f872 	bl	80005e8 <HAL_GetTick>
 8001504:	1b00      	subs	r0, r0, r4
 8001506:	2802      	cmp	r0, #2
 8001508:	d9ef      	bls.n	80014ea <HAL_RCC_OscConfig+0x47e>
 800150a:	e621      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800150c:	682b      	ldr	r3, [r5, #0]
 800150e:	011a      	lsls	r2, r3, #4
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001510:	bf5e      	ittt	pl
 8001512:	68eb      	ldrpl	r3, [r5, #12]
 8001514:	f023 0303 	bicpl.w	r3, r3, #3
 8001518:	60eb      	strpl	r3, [r5, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800151a:	68eb      	ldr	r3, [r5, #12]
 800151c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001524:	60eb      	str	r3, [r5, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff f85f 	bl	80005e8 <HAL_GetTick>
 800152a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	019b      	lsls	r3, r3, #6
 8001530:	d5de      	bpl.n	80014f0 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff f859 	bl	80005e8 <HAL_GetTick>
 8001536:	1b00      	subs	r0, r0, r4
 8001538:	2802      	cmp	r0, #2
 800153a:	d9f7      	bls.n	800152c <HAL_RCC_OscConfig+0x4c0>
 800153c:	e608      	b.n	8001150 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800153e:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 8001540:	b002      	add	sp, #8
 8001542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	40007000 	.word	0x40007000

08001550 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001550:	4a57      	ldr	r2, [pc, #348]	; (80016b0 <HAL_RCC_ClockConfig+0x160>)
 8001552:	6813      	ldr	r3, [r2, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800155e:	4605      	mov	r5, r0
 8001560:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001562:	d30a      	bcc.n	800157a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	6829      	ldr	r1, [r5, #0]
 8001566:	0788      	lsls	r0, r1, #30
 8001568:	d514      	bpl.n	8001594 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156a:	4852      	ldr	r0, [pc, #328]	; (80016b4 <HAL_RCC_ClockConfig+0x164>)
 800156c:	6883      	ldr	r3, [r0, #8]
 800156e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001572:	68ab      	ldr	r3, [r5, #8]
 8001574:	4313      	orrs	r3, r2
 8001576:	6083      	str	r3, [r0, #8]
 8001578:	e00c      	b.n	8001594 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	f023 0307 	bic.w	r3, r3, #7
 8001580:	430b      	orrs	r3, r1
 8001582:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	4299      	cmp	r1, r3
 800158c:	d0ea      	beq.n	8001564 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800158e:	2001      	movs	r0, #1
 8001590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001594:	07ca      	lsls	r2, r1, #31
 8001596:	d406      	bmi.n	80015a6 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001598:	4a45      	ldr	r2, [pc, #276]	; (80016b0 <HAL_RCC_ClockConfig+0x160>)
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	429e      	cmp	r6, r3
 80015a2:	d351      	bcc.n	8001648 <HAL_RCC_ClockConfig+0xf8>
 80015a4:	e05a      	b.n	800165c <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	686b      	ldr	r3, [r5, #4]
 80015a8:	4c42      	ldr	r4, [pc, #264]	; (80016b4 <HAL_RCC_ClockConfig+0x164>)
 80015aa:	2b02      	cmp	r3, #2
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80015ac:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ae:	d102      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80015b0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d102      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80015ba:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015be:	e005      	b.n	80015cc <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015c0:	b913      	cbnz	r3, 80015c8 <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80015c2:	f012 0f02 	tst.w	r2, #2
 80015c6:	e001      	b.n	80015cc <HAL_RCC_ClockConfig+0x7c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80015c8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80015cc:	d0df      	beq.n	800158e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ce:	68a2      	ldr	r2, [r4, #8]
 80015d0:	f022 0203 	bic.w	r2, r2, #3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60a3      	str	r3, [r4, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015d8:	f7ff f806 	bl	80005e8 <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015dc:	686b      	ldr	r3, [r5, #4]
 80015de:	2b02      	cmp	r3, #2
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015e0:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e2:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_ClockConfig+0xb2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80015e8:	68a3      	ldr	r3, [r4, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d0d2      	beq.n	8001598 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f2:	f7fe fff9 	bl	80005e8 <HAL_GetTick>
 80015f6:	1bc0      	subs	r0, r0, r7
 80015f8:	4540      	cmp	r0, r8
 80015fa:	d9f5      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x98>
        {
          return HAL_TIMEOUT;
 80015fc:	2003      	movs	r0, #3
 80015fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	2b03      	cmp	r3, #3
 8001604:	d10a      	bne.n	800161c <HAL_RCC_ClockConfig+0xcc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001606:	68a3      	ldr	r3, [r4, #8]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b0c      	cmp	r3, #12
 800160e:	d0c3      	beq.n	8001598 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7fe ffea 	bl	80005e8 <HAL_GetTick>
 8001614:	1bc0      	subs	r0, r0, r7
 8001616:	4540      	cmp	r0, r8
 8001618:	d9f5      	bls.n	8001606 <HAL_RCC_ClockConfig+0xb6>
 800161a:	e7ef      	b.n	80015fc <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800161c:	b973      	cbnz	r3, 800163c <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800161e:	68a3      	ldr	r3, [r4, #8]
 8001620:	f013 0f0c 	tst.w	r3, #12
 8001624:	d0b8      	beq.n	8001598 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001626:	f7fe ffdf 	bl	80005e8 <HAL_GetTick>
 800162a:	1bc0      	subs	r0, r0, r7
 800162c:	4540      	cmp	r0, r8
 800162e:	d9f6      	bls.n	800161e <HAL_RCC_ClockConfig+0xce>
 8001630:	e7e4      	b.n	80015fc <HAL_RCC_ClockConfig+0xac>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001632:	f7fe ffd9 	bl	80005e8 <HAL_GetTick>
 8001636:	1bc0      	subs	r0, r0, r7
 8001638:	4540      	cmp	r0, r8
 800163a:	d8df      	bhi.n	80015fc <HAL_RCC_ClockConfig+0xac>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800163c:	68a3      	ldr	r3, [r4, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b04      	cmp	r3, #4
 8001644:	d1f5      	bne.n	8001632 <HAL_RCC_ClockConfig+0xe2>
 8001646:	e7a7      	b.n	8001598 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001648:	6813      	ldr	r3, [r2, #0]
 800164a:	f023 0307 	bic.w	r3, r3, #7
 800164e:	4333      	orrs	r3, r6
 8001650:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001652:	6813      	ldr	r3, [r2, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	429e      	cmp	r6, r3
 800165a:	d198      	bne.n	800158e <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	6829      	ldr	r1, [r5, #0]
 800165e:	4c15      	ldr	r4, [pc, #84]	; (80016b4 <HAL_RCC_ClockConfig+0x164>)
 8001660:	f011 0f04 	tst.w	r1, #4
 8001664:	d005      	beq.n	8001672 <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001666:	68a3      	ldr	r3, [r4, #8]
 8001668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800166c:	68eb      	ldr	r3, [r5, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	60a3      	str	r3, [r4, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001672:	070b      	lsls	r3, r1, #28
 8001674:	d506      	bpl.n	8001684 <HAL_RCC_ClockConfig+0x134>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001676:	68a3      	ldr	r3, [r4, #8]
 8001678:	692a      	ldr	r2, [r5, #16]
 800167a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800167e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001682:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001684:	f7ff fc54 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 8001688:	68a3      	ldr	r3, [r4, #8]
 800168a:	22f0      	movs	r2, #240	; 0xf0
 800168c:	fa92 f2a2 	rbit	r2, r2
 8001690:	fab2 f282 	clz	r2, r2
 8001694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001698:	40d3      	lsrs	r3, r2
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_RCC_ClockConfig+0x168>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	40d8      	lsrs	r0, r3
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_ClockConfig+0x16c>)
 80016a2:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7fe ff77 	bl	8000598 <HAL_InitTick>

  return HAL_OK;
 80016aa:	2000      	movs	r0, #0
}
 80016ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016b0:	40022000 	.word	0x40022000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	080043b5 	.word	0x080043b5
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80016c0:	4b01      	ldr	r3, [pc, #4]	; (80016c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000000 	.word	0x20000000

080016cc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	fa92 f2a2 	rbit	r2, r2
 80016d8:	fab2 f282 	clz	r2, r2
 80016dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016e0:	40d3      	lsrs	r3, r2
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016e4:	5cd3      	ldrb	r3, [r2, r3]
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80016e8:	6810      	ldr	r0, [r2, #0]
}
 80016ea:	40d8      	lsrs	r0, r3
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	080043c5 	.word	0x080043c5
 80016f8:	20000000 	.word	0x20000000

080016fc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	fa92 f2a2 	rbit	r2, r2
 8001708:	fab2 f282 	clz	r2, r2
 800170c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001710:	40d3      	lsrs	r3, r2
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001714:	5cd3      	ldrb	r3, [r2, r3]
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001718:	6810      	ldr	r0, [r2, #0]
}
 800171a:	40d8      	lsrs	r0, r3
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	080043c5 	.word	0x080043c5
 8001728:	20000000 	.word	0x20000000

0800172c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800172e:	4b5a      	ldr	r3, [pc, #360]	; (8001898 <RCCEx_PLLSAI1_Config+0x16c>)
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	f012 0f03 	tst.w	r2, #3
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001736:	4604      	mov	r4, r0
 8001738:	460e      	mov	r6, r1
 800173a:	461d      	mov	r5, r3
 800173c:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800173e:	d013      	beq.n	8001768 <RCCEx_PLLSAI1_Config+0x3c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	f002 0203 	and.w	r2, r2, #3
 8001746:	4282      	cmp	r2, r0
 8001748:	d124      	bne.n	8001794 <RCCEx_PLLSAI1_Config+0x68>
       || 
 800174a:	b31a      	cbz	r2, 8001794 <RCCEx_PLLSAI1_Config+0x68>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	2370      	movs	r3, #112	; 0x70
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	fab3 f183 	clz	r1, r3
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 8001758:	f002 0370 	and.w	r3, r2, #112	; 0x70
 800175c:	40cb      	lsrs	r3, r1
 800175e:	6862      	ldr	r2, [r4, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	4293      	cmp	r3, r2
 8001764:	d116      	bne.n	8001794 <RCCEx_PLLSAI1_Config+0x68>
 8001766:	e025      	b.n	80017b4 <RCCEx_PLLSAI1_Config+0x88>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001768:	2802      	cmp	r0, #2
 800176a:	d008      	beq.n	800177e <RCCEx_PLLSAI1_Config+0x52>
 800176c:	2803      	cmp	r0, #3
 800176e:	d00a      	beq.n	8001786 <RCCEx_PLLSAI1_Config+0x5a>
 8001770:	2801      	cmp	r0, #1
 8001772:	d10f      	bne.n	8001794 <RCCEx_PLLSAI1_Config+0x68>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	079f      	lsls	r7, r3, #30
 8001778:	f140 808d 	bpl.w	8001896 <RCCEx_PLLSAI1_Config+0x16a>
 800177c:	e00c      	b.n	8001798 <RCCEx_PLLSAI1_Config+0x6c>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001784:	e005      	b.n	8001792 <RCCEx_PLLSAI1_Config+0x66>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	0391      	lsls	r1, r2, #14
 800178a:	d405      	bmi.n	8001798 <RCCEx_PLLSAI1_Config+0x6c>
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001792:	d101      	bne.n	8001798 <RCCEx_PLLSAI1_Config+0x6c>
 8001794:	2001      	movs	r0, #1
 8001796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    if(status == HAL_OK)
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8001798:	68e9      	ldr	r1, [r5, #12]
 800179a:	2370      	movs	r3, #112	; 0x70
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	fab3 f283 	clz	r2, r3
 80017a4:	6863      	ldr	r3, [r4, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	4093      	lsls	r3, r2
 80017aa:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 80017ae:	4310      	orrs	r0, r2
 80017b0:	4318      	orrs	r0, r3
 80017b2:	60e8      	str	r0, [r5, #12]
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80017ba:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017bc:	f7fe ff14 	bl	80005e8 <HAL_GetTick>
 80017c0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80017c2:	682b      	ldr	r3, [r5, #0]
 80017c4:	4934      	ldr	r1, [pc, #208]	; (8001898 <RCCEx_PLLSAI1_Config+0x16c>)
 80017c6:	011a      	lsls	r2, r3, #4
 80017c8:	d506      	bpl.n	80017d8 <RCCEx_PLLSAI1_Config+0xac>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80017ca:	f7fe ff0d 	bl	80005e8 <HAL_GetTick>
 80017ce:	1bc0      	subs	r0, r0, r7
 80017d0:	2802      	cmp	r0, #2
 80017d2:	d9f6      	bls.n	80017c2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_TIMEOUT;
 80017d4:	2003      	movs	r0, #3
 80017d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017d8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 80017dc:	68a7      	ldr	r7, [r4, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 80017de:	b9b6      	cbnz	r6, 800180e <RCCEx_PLLSAI1_Config+0xe2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80017e0:	6908      	ldr	r0, [r1, #16]
 80017e2:	fa93 f2a3 	rbit	r2, r3
 80017e6:	f04f 4678 	mov.w	r6, #4160749568	; 0xf8000000
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	fa96 f6a6 	rbit	r6, r6
 80017f2:	fa07 f302 	lsl.w	r3, r7, r2
 80017f6:	68e2      	ldr	r2, [r4, #12]
 80017f8:	fab6 f686 	clz	r6, r6
 80017fc:	40b2      	lsls	r2, r6
 80017fe:	4313      	orrs	r3, r2
 8001800:	f020 4278 	bic.w	r2, r0, #4160749568	; 0xf8000000
 8001804:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001808:	431a      	orrs	r2, r3
 800180a:	610a      	str	r2, [r1, #16]
 800180c:	e02d      	b.n	800186a <RCCEx_PLLSAI1_Config+0x13e>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800180e:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001810:	6908      	ldr	r0, [r1, #16]
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001812:	d113      	bne.n	800183c <RCCEx_PLLSAI1_Config+0x110>
 8001814:	fa93 f2a3 	rbit	r2, r3
 8001818:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800181c:	fab2 f282 	clz	r2, r2
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	6926      	ldr	r6, [r4, #16]
 8001826:	0876      	lsrs	r6, r6, #1
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	3e01      	subs	r6, #1
 800182e:	409e      	lsls	r6, r3
 8001830:	fa07 f302 	lsl.w	r3, r7, r2
 8001834:	4333      	orrs	r3, r6
 8001836:	f420 02c0 	bic.w	r2, r0, #6291456	; 0x600000
 800183a:	e012      	b.n	8001862 <RCCEx_PLLSAI1_Config+0x136>
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001844:	fab2 f282 	clz	r2, r2
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	6966      	ldr	r6, [r4, #20]
 800184e:	0876      	lsrs	r6, r6, #1
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	3e01      	subs	r6, #1
 8001856:	409e      	lsls	r6, r3
 8001858:	fa07 f302 	lsl.w	r3, r7, r2
 800185c:	4333      	orrs	r3, r6
 800185e:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 8001862:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001866:	4313      	orrs	r3, r2
 8001868:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001870:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7fe feb9 	bl	80005e8 <HAL_GetTick>
 8001876:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <RCCEx_PLLSAI1_Config+0x16c>)
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	d405      	bmi.n	800188c <RCCEx_PLLSAI1_Config+0x160>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001880:	f7fe feb2 	bl	80005e8 <HAL_GetTick>
 8001884:	1b80      	subs	r0, r0, r6
 8001886:	2802      	cmp	r0, #2
 8001888:	d9f6      	bls.n	8001878 <RCCEx_PLLSAI1_Config+0x14c>
 800188a:	e7a3      	b.n	80017d4 <RCCEx_PLLSAI1_Config+0xa8>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800188c:	6911      	ldr	r1, [r2, #16]
 800188e:	69a3      	ldr	r3, [r4, #24]
 8001890:	430b      	orrs	r3, r1
 8001892:	6113      	str	r3, [r2, #16]
 8001894:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 8001896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800189c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80018a0:	6805      	ldr	r5, [r0, #0]
 80018a2:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018a6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80018a8:	d01f      	beq.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80018aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80018ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80018b0:	d004      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x20>
 80018b2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80018b6:	d00c      	beq.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 80018b8:	b9b1      	cbnz	r1, 80018e8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80018ba:	e005      	b.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80018bc:	4a96      	ldr	r2, [pc, #600]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018be:	68d3      	ldr	r3, [r2, #12]
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018c6:	e004      	b.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x36>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018c8:	3004      	adds	r0, #4
 80018ca:	f7ff ff2f 	bl	800172c <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 80018ce:	4605      	mov	r5, r0
 80018d0:	b958      	cbnz	r0, 80018ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018d2:	4991      	ldr	r1, [pc, #580]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018d4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80018d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018de:	4313      	orrs	r3, r2
 80018e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80018e4:	2500      	movs	r5, #0
 80018e6:	e000      	b.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80018e8:	2501      	movs	r5, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	039e      	lsls	r6, r3, #14
 80018ee:	d55a      	bpl.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f0:	4e89      	ldr	r6, [pc, #548]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018f2:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80018f4:	00d8      	lsls	r0, r3, #3
 80018f6:	d40a      	bmi.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80018fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fe:	65b3      	str	r3, [r6, #88]	; 0x58
 8001900:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800190a:	2701      	movs	r7, #1
 800190c:	e000      	b.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x74>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 800190e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001910:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8001b1c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001914:	f8d8 3000 	ldr.w	r3, [r8]
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	f8c8 3000 	str.w	r3, [r8]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001920:	f7fe fe62 	bl	80005e8 <HAL_GetTick>
 8001924:	4681      	mov	r9, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001926:	f8d8 3000 	ldr.w	r3, [r8]
 800192a:	05d9      	lsls	r1, r3, #23
 800192c:	d406      	bmi.n	800193c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192e:	f7fe fe5b 	bl	80005e8 <HAL_GetTick>
 8001932:	ebc9 0000 	rsb	r0, r9, r0
 8001936:	2802      	cmp	r0, #2
 8001938:	d9f5      	bls.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800193a:	e02e      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 800193c:	bb75      	cbnz	r5, 800199c <HAL_RCCEx_PeriphCLKConfig+0x100>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800193e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001942:	4a75      	ldr	r2, [pc, #468]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001944:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001948:	d014      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800194a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800194c:	428b      	cmp	r3, r1
 800194e:	d011      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001950:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001954:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001958:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800195c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001960:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001968:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800196c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001974:	07da      	lsls	r2, r3, #31
 8001976:	f140 80c2 	bpl.w	8001afe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7fe fe35 	bl	80005e8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	4680      	mov	r8, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001984:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001988:	079b      	lsls	r3, r3, #30
 800198a:	f100 80b8 	bmi.w	8001afe <HAL_RCCEx_PeriphCLKConfig+0x262>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7fe fe2b 	bl	80005e8 <HAL_GetTick>
 8001992:	ebc8 0000 	rsb	r0, r8, r0
 8001996:	4548      	cmp	r0, r9
 8001998:	d9f4      	bls.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0xe8>

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 800199a:	2503      	movs	r5, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800199c:	b11f      	cbz	r7, 80019a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80019a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a4:	65b3      	str	r3, [r6, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	07df      	lsls	r7, r3, #31
 80019aa:	d508      	bpl.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019ac:	485a      	ldr	r0, [pc, #360]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80019ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80019b2:	f022 0103 	bic.w	r1, r2, #3
 80019b6:	6a22      	ldr	r2, [r4, #32]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019be:	079e      	lsls	r6, r3, #30
 80019c0:	d508      	bpl.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019c2:	4855      	ldr	r0, [pc, #340]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80019c4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80019c8:	f022 010c 	bic.w	r1, r2, #12
 80019cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019ce:	430a      	orrs	r2, r1
 80019d0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80019d4:	0698      	lsls	r0, r3, #26
 80019d6:	d508      	bpl.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80019d8:	484f      	ldr	r0, [pc, #316]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80019da:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80019de:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 80019e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019e4:	430a      	orrs	r2, r1
 80019e6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80019ea:	0599      	lsls	r1, r3, #22
 80019ec:	d508      	bpl.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019ee:	484a      	ldr	r0, [pc, #296]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80019f0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80019f4:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 80019f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80019fa:	430a      	orrs	r2, r1
 80019fc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a00:	055a      	lsls	r2, r3, #21
 8001a02:	d508      	bpl.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a04:	4844      	ldr	r0, [pc, #272]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a06:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001a0a:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8001a0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a10:	430a      	orrs	r2, r1
 8001a12:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a16:	065f      	lsls	r7, r3, #25
 8001a18:	d508      	bpl.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x190>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a1a:	483f      	ldr	r0, [pc, #252]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a1c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001a20:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001a24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a26:	430a      	orrs	r2, r1
 8001a28:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001a2c:	05de      	lsls	r6, r3, #23
 8001a2e:	d508      	bpl.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a30:	4839      	ldr	r0, [pc, #228]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a32:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001a36:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001a3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001a42:	0498      	lsls	r0, r3, #18
 8001a44:	d51a      	bpl.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a46:	4a34      	ldr	r2, [pc, #208]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a48:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001a4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a4e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001a52:	430b      	orrs	r3, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001a54:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001a5c:	d104      	bne.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001a5e:	68d3      	ldr	r3, [r2, #12]
 8001a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a64:	60d3      	str	r3, [r2, #12]
 8001a66:	e009      	b.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001a68:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	1d20      	adds	r0, r4, #4
 8001a72:	f7ff fe5b 	bl	800172c <RCCEx_PLLSAI1_Config>
      
        if(ret != HAL_OK)
 8001a76:	2800      	cmp	r0, #0
 8001a78:	bf18      	it	ne
 8001a7a:	4605      	movne	r5, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	0359      	lsls	r1, r3, #13
 8001a80:	d51a      	bpl.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001a82:	4a25      	ldr	r2, [pc, #148]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a84:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001a86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a8a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001a8e:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001a90:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001a98:	d104      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001a9a:	68d3      	ldr	r3, [r2, #12]
 8001a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aa0:	60d3      	str	r3, [r2, #12]
 8001aa2:	e009      	b.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001aa4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	1d20      	adds	r0, r4, #4
 8001aae:	f7ff fe3d 	bl	800172c <RCCEx_PLLSAI1_Config>
      
      if(ret != HAL_OK)
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	bf18      	it	ne
 8001ab6:	4605      	movne	r5, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	045a      	lsls	r2, r3, #17
 8001abc:	d512      	bpl.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001abe:	4916      	ldr	r1, [pc, #88]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ac0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001ac2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ac6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001aca:	4313      	orrs	r3, r2
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001acc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001ad4:	d106      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	1d20      	adds	r0, r4, #4
 8001ada:	f7ff fe27 	bl	800172c <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	bf18      	it	ne
 8001ae2:	4605      	movne	r5, r0
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	d512      	bpl.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001aea:	490b      	ldr	r1, [pc, #44]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001aec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001af0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001af4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8001afc:	e008      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001afe:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001b02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001b0e:	e745      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x100>
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 8001b10:	4628      	mov	r0, r5
 8001b12:	b003      	add	sp, #12
 8001b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40007000 	.word	0x40007000

08001b20 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b20:	6a03      	ldr	r3, [r0, #32]
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b28:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b2a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b2c:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b2e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b30:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b32:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001b36:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b3a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b3c:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001b3e:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b42:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b44:	4d12      	ldr	r5, [pc, #72]	; (8001b90 <TIM_OC1_SetConfig+0x70>)
 8001b46:	42a8      	cmp	r0, r5
 8001b48:	d006      	beq.n	8001b58 <TIM_OC1_SetConfig+0x38>
 8001b4a:	4e12      	ldr	r6, [pc, #72]	; (8001b94 <TIM_OC1_SetConfig+0x74>)
 8001b4c:	42b0      	cmp	r0, r6
 8001b4e:	d003      	beq.n	8001b58 <TIM_OC1_SetConfig+0x38>
 8001b50:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b54:	42b0      	cmp	r0, r6
 8001b56:	d114      	bne.n	8001b82 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001b58:	68ce      	ldr	r6, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b5a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001b5e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b60:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001b62:	f023 0304 	bic.w	r3, r3, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b66:	d006      	beq.n	8001b76 <TIM_OC1_SetConfig+0x56>
 8001b68:	4d0a      	ldr	r5, [pc, #40]	; (8001b94 <TIM_OC1_SetConfig+0x74>)
 8001b6a:	42a8      	cmp	r0, r5
 8001b6c:	d003      	beq.n	8001b76 <TIM_OC1_SetConfig+0x56>
 8001b6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b72:	42a8      	cmp	r0, r5
 8001b74:	d105      	bne.n	8001b82 <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b76:	694e      	ldr	r6, [r1, #20]
 8001b78:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b7e:	4335      	orrs	r5, r6
 8001b80:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b82:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b84:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b86:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b88:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b8a:	6203      	str	r3, [r0, #32]
 8001b8c:	bd70      	pop	{r4, r5, r6, pc}
 8001b8e:	bf00      	nop
 8001b90:	40012c00 	.word	0x40012c00
 8001b94:	40014000 	.word	0x40014000

08001b98 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b98:	6a03      	ldr	r3, [r0, #32]
 8001b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b9e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ba0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ba2:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ba4:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ba6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ba8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001baa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001bae:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bb2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001bb4:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001bb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001bba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bbe:	4d0f      	ldr	r5, [pc, #60]	; (8001bfc <TIM_OC3_SetConfig+0x64>)
 8001bc0:	42a8      	cmp	r0, r5
 8001bc2:	d107      	bne.n	8001bd4 <TIM_OC3_SetConfig+0x3c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001bc4:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001bca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bd2:	e005      	b.n	8001be0 <TIM_OC3_SetConfig+0x48>
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd4:	4d0a      	ldr	r5, [pc, #40]	; (8001c00 <TIM_OC3_SetConfig+0x68>)
 8001bd6:	42a8      	cmp	r0, r5
 8001bd8:	d002      	beq.n	8001be0 <TIM_OC3_SetConfig+0x48>
 8001bda:	4d0a      	ldr	r5, [pc, #40]	; (8001c04 <TIM_OC3_SetConfig+0x6c>)
 8001bdc:	42a8      	cmp	r0, r5
 8001bde:	d107      	bne.n	8001bf0 <TIM_OC3_SetConfig+0x58>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001be0:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001be2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001be6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001bea:	698d      	ldr	r5, [r1, #24]
 8001bec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bf0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001bf2:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001bf4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001bf6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bf8:	6203      	str	r3, [r0, #32]
}
 8001bfa:	bd30      	pop	{r4, r5, pc}
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	40014000 	.word	0x40014000
 8001c04:	40014400 	.word	0x40014400

08001c08 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c08:	6a03      	ldr	r3, [r0, #32]
 8001c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c0e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c10:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c12:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c16:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001c18:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001c22:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001c26:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001c2c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c30:	4d0a      	ldr	r5, [pc, #40]	; (8001c5c <TIM_OC4_SetConfig+0x54>)
 8001c32:	42a8      	cmp	r0, r5
 8001c34:	d007      	beq.n	8001c46 <TIM_OC4_SetConfig+0x3e>
 8001c36:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d003      	beq.n	8001c46 <TIM_OC4_SetConfig+0x3e>
 8001c3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c42:	42a8      	cmp	r0, r5
 8001c44:	d104      	bne.n	8001c50 <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001c46:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c48:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001c4c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c50:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c52:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c54:	684b      	ldr	r3, [r1, #4]
 8001c56:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c58:	6202      	str	r2, [r0, #32]
 8001c5a:	bd30      	pop	{r4, r5, pc}
 8001c5c:	40012c00 	.word	0x40012c00

08001c60 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001c60:	6a03      	ldr	r3, [r0, #32]
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c66:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c68:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c6a:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001c6c:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001c6e:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c70:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001c72:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001c76:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c7a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001c7c:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001c7e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001c82:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c86:	4d0b      	ldr	r5, [pc, #44]	; (8001cb4 <TIM_OC5_SetConfig+0x54>)
 8001c88:	42a8      	cmp	r0, r5
 8001c8a:	d007      	beq.n	8001c9c <TIM_OC5_SetConfig+0x3c>
 8001c8c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001c90:	42a8      	cmp	r0, r5
 8001c92:	d003      	beq.n	8001c9c <TIM_OC5_SetConfig+0x3c>
 8001c94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c98:	42a8      	cmp	r0, r5
 8001c9a:	d104      	bne.n	8001ca6 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8001c9c:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001c9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8001ca2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ca6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001ca8:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001caa:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001cac:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cae:	6203      	str	r3, [r0, #32]
 8001cb0:	bd30      	pop	{r4, r5, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40012c00 	.word	0x40012c00

08001cb8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001cb8:	6a03      	ldr	r3, [r0, #32]
 8001cba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001cbe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cc0:	6a02      	ldr	r2, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001cc2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cc4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001cc6:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001cc8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001cd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001cd6:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001cd8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001cdc:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ce0:	4d0a      	ldr	r5, [pc, #40]	; (8001d0c <TIM_OC6_SetConfig+0x54>)
 8001ce2:	42a8      	cmp	r0, r5
 8001ce4:	d007      	beq.n	8001cf6 <TIM_OC6_SetConfig+0x3e>
 8001ce6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001cea:	42a8      	cmp	r0, r5
 8001cec:	d003      	beq.n	8001cf6 <TIM_OC6_SetConfig+0x3e>
 8001cee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cf2:	42a8      	cmp	r0, r5
 8001cf4:	d104      	bne.n	8001d00 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001cf6:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001cf8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001cfc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d00:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001d02:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001d04:	684b      	ldr	r3, [r1, #4]
 8001d06:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d08:	6202      	str	r2, [r0, #32]
 8001d0a:	bd30      	pop	{r4, r5, pc}
 8001d0c:	40012c00 	.word	0x40012c00

08001d10 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8001d12:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d14:	4290      	cmp	r0, r2
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d16:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d18:	d002      	beq.n	8001d20 <TIM_Base_SetConfig+0x10>
 8001d1a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d1e:	d109      	bne.n	8001d34 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d20:	684c      	ldr	r4, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d26:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d28:	ea43 0304 	orr.w	r3, r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2c:	d009      	beq.n	8001d42 <TIM_Base_SetConfig+0x32>
 8001d2e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d32:	d006      	beq.n	8001d42 <TIM_Base_SetConfig+0x32>
 8001d34:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <TIM_Base_SetConfig+0x68>)
 8001d36:	4290      	cmp	r0, r2
 8001d38:	d003      	beq.n	8001d42 <TIM_Base_SetConfig+0x32>
 8001d3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d3e:	4290      	cmp	r0, r2
 8001d40:	d103      	bne.n	8001d4a <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d42:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d48:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001d4a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d4c:	688b      	ldr	r3, [r1, #8]
 8001d4e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d50:	680b      	ldr	r3, [r1, #0]
 8001d52:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <TIM_Base_SetConfig+0x64>)
 8001d56:	4298      	cmp	r0, r3
 8001d58:	d007      	beq.n	8001d6a <TIM_Base_SetConfig+0x5a>
 8001d5a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001d5e:	4298      	cmp	r0, r3
 8001d60:	d003      	beq.n	8001d6a <TIM_Base_SetConfig+0x5a>
 8001d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d66:	4298      	cmp	r0, r3
 8001d68:	d101      	bne.n	8001d6e <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d6a:	690b      	ldr	r3, [r1, #16]
 8001d6c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	6143      	str	r3, [r0, #20]
 8001d72:	bd10      	pop	{r4, pc}
 8001d74:	40012c00 	.word	0x40012c00
 8001d78:	40014000 	.word	0x40014000

08001d7c <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d7c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d7e:	4604      	mov	r4, r0
 8001d80:	b1a0      	cbz	r0, 8001dac <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001d82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d8a:	b91b      	cbnz	r3, 8001d94 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d90:	f000 ffa6 	bl	8002ce0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001d94:	2302      	movs	r3, #2
 8001d96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9a:	6820      	ldr	r0, [r4, #0]
 8001d9c:	1d21      	adds	r1, r4, #4
 8001d9e:	f7ff ffb7 	bl	8001d10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8001da8:	2000      	movs	r0, #0
 8001daa:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001dac:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8001dae:	bd10      	pop	{r4, pc}

08001db0 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001db0:	6a03      	ldr	r3, [r0, #32]
 8001db2:	f023 0310 	bic.w	r3, r3, #16
 8001db6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001db8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dba:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dbc:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dbe:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001dc0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001dc2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001dc6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001dca:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001dce:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001dd0:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001dd4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dd8:	4d0f      	ldr	r5, [pc, #60]	; (8001e18 <TIM_OC2_SetConfig+0x68>)
 8001dda:	42a8      	cmp	r0, r5
 8001ddc:	d107      	bne.n	8001dee <TIM_OC2_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001dde:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001de4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dec:	e005      	b.n	8001dfa <TIM_OC2_SetConfig+0x4a>

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001dee:	4d0b      	ldr	r5, [pc, #44]	; (8001e1c <TIM_OC2_SetConfig+0x6c>)
 8001df0:	42a8      	cmp	r0, r5
 8001df2:	d002      	beq.n	8001dfa <TIM_OC2_SetConfig+0x4a>
 8001df4:	4d0a      	ldr	r5, [pc, #40]	; (8001e20 <TIM_OC2_SetConfig+0x70>)
 8001df6:	42a8      	cmp	r0, r5
 8001df8:	d107      	bne.n	8001e0a <TIM_OC2_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001dfa:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001dfc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001e00:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001e04:	698d      	ldr	r5, [r1, #24]
 8001e06:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e0a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e0c:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e0e:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e10:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e12:	6203      	str	r3, [r0, #32]
}
 8001e14:	bd30      	pop	{r4, r5, pc}
 8001e16:	bf00      	nop
 8001e18:	40012c00 	.word	0x40012c00
 8001e1c:	40014000 	.word	0x40014000
 8001e20:	40014400 	.word	0x40014400

08001e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8001e24:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e26:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e2a:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8001e2c:	4604      	mov	r4, r0
 8001e2e:	460d      	mov	r5, r1
 8001e30:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e34:	d07b      	beq.n	8001f2e <HAL_TIM_PWM_ConfigChannel+0x10a>
 8001e36:	2301      	movs	r3, #1

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8001e38:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e3a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8001e3e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 8001e42:	d03c      	beq.n	8001ebe <HAL_TIM_PWM_ConfigChannel+0x9a>
 8001e44:	d813      	bhi.n	8001e6e <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001e46:	b34a      	cbz	r2, 8001e9c <HAL_TIM_PWM_ConfigChannel+0x78>
 8001e48:	2a04      	cmp	r2, #4
 8001e4a:	d16a      	bne.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e4c:	6820      	ldr	r0, [r4, #0]
 8001e4e:	f7ff ffaf 	bl	8001db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e52:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001e54:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e56:	699a      	ldr	r2, [r3, #24]
 8001e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e5e:	699a      	ldr	r2, [r3, #24]
 8001e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e6c:	e025      	b.n	8001eba <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8001e6e:	2a10      	cmp	r2, #16
 8001e70:	d036      	beq.n	8001ee0 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8001e72:	2a14      	cmp	r2, #20
 8001e74:	d044      	beq.n	8001f00 <HAL_TIM_PWM_ConfigChannel+0xdc>
 8001e76:	2a0c      	cmp	r2, #12
 8001e78:	d153      	bne.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e7a:	6820      	ldr	r0, [r4, #0]
 8001e7c:	f7ff fec4 	bl	8001c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e80:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001e82:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e8a:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e9a:	e01f      	b.n	8001edc <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e9c:	6820      	ldr	r0, [r4, #0]
 8001e9e:	f7ff fe3f 	bl	8001b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	f022 0204 	bic.w	r2, r2, #4
 8001eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001eb4:	6999      	ldr	r1, [r3, #24]
 8001eb6:	692a      	ldr	r2, [r5, #16]
 8001eb8:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001eba:	619a      	str	r2, [r3, #24]
    }
    break;
 8001ebc:	e031      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ebe:	6820      	ldr	r0, [r4, #0]
 8001ec0:	f7ff fe6a 	bl	8001b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	f042 0208 	orr.w	r2, r2, #8
 8001ecc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	f022 0204 	bic.w	r2, r2, #4
 8001ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ed6:	69d9      	ldr	r1, [r3, #28]
 8001ed8:	692a      	ldr	r2, [r5, #16]
 8001eda:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001edc:	61da      	str	r2, [r3, #28]
    }
    break;
 8001ede:	e020      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ee0:	6820      	ldr	r0, [r4, #0]
 8001ee2:	f7ff febd 	bl	8001c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ef2:	f022 0204 	bic.w	r2, r2, #4
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ef8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001efa:	692a      	ldr	r2, [r5, #16]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	e00f      	b.n	8001f20 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f00:	6820      	ldr	r0, [r4, #0]
 8001f02:	f7ff fed9 	bl	8001cb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f06:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001f08:	6909      	ldr	r1, [r1, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001f1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f22:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001f24:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001f2a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8001f2e:	bd38      	pop	{r3, r4, r5, pc}

08001f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f30:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f32:	2301      	movs	r3, #1
 8001f34:	6a04      	ldr	r4, [r0, #32]
 8001f36:	408b      	lsls	r3, r1
 8001f38:	ea24 0303 	bic.w	r3, r4, r3
 8001f3c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001f3e:	6a03      	ldr	r3, [r0, #32]
 8001f40:	408a      	lsls	r2, r1
 8001f42:	ea42 0103 	orr.w	r1, r2, r3
 8001f46:	6201      	str	r1, [r0, #32]
 8001f48:	bd10      	pop	{r4, pc}
	...

08001f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f4c:	b510      	push	{r4, lr}
 8001f4e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f50:	2201      	movs	r2, #1
 8001f52:	6800      	ldr	r0, [r0, #0]
 8001f54:	f7ff ffec 	bl	8001f30 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_TIM_PWM_Start+0x38>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d007      	beq.n	8001f70 <HAL_TIM_PWM_Start+0x24>
 8001f60:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d003      	beq.n	8001f70 <HAL_TIM_PWM_Start+0x24>
 8001f68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d103      	bne.n	8001f78 <HAL_TIM_PWM_Start+0x2c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001f80:	2000      	movs	r0, #0
 8001f82:	bd10      	pop	{r4, pc}
 8001f84:	40012c00 	.word	0x40012c00

08001f88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6800      	ldr	r0, [r0, #0]
 8001f90:	f7ff ffce 	bl	8001f30 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <HAL_TIM_PWM_Stop+0x68>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_TIM_PWM_Stop+0x24>
 8001f9c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <HAL_TIM_PWM_Stop+0x24>
 8001fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d10d      	bne.n	8001fc8 <HAL_TIM_PWM_Stop+0x40>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8001fac:	6a19      	ldr	r1, [r3, #32]
 8001fae:	f241 1211 	movw	r2, #4369	; 0x1111
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	b942      	cbnz	r2, 8001fc8 <HAL_TIM_PWM_Stop+0x40>
 8001fb6:	6a19      	ldr	r1, [r3, #32]
 8001fb8:	f240 4244 	movw	r2, #1092	; 0x444
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	b91a      	cbnz	r2, 8001fc8 <HAL_TIM_PWM_Stop+0x40>
 8001fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fc8:	6a19      	ldr	r1, [r3, #32]
 8001fca:	f241 1211 	movw	r2, #4369	; 0x1111
 8001fce:	400a      	ands	r2, r1
 8001fd0:	b942      	cbnz	r2, 8001fe4 <HAL_TIM_PWM_Stop+0x5c>
 8001fd2:	6a19      	ldr	r1, [r3, #32]
 8001fd4:	f240 4244 	movw	r2, #1092	; 0x444
 8001fd8:	400a      	ands	r2, r1
 8001fda:	b91a      	cbnz	r2, 8001fe4 <HAL_TIM_PWM_Stop+0x5c>
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
}
 8001fea:	2000      	movs	r0, #0
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	bf00      	nop
 8001ff0:	40012c00 	.word	0x40012c00

08001ff4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8001ff4:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	6a04      	ldr	r4, [r0, #32]
 8001ffa:	408b      	lsls	r3, r1
 8001ffc:	ea24 0303 	bic.w	r3, r4, r3
 8002000:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8002002:	6a03      	ldr	r3, [r0, #32]
 8002004:	408a      	lsls	r2, r1
 8002006:	ea42 0103 	orr.w	r1, r2, r3
 800200a:	6201      	str	r1, [r0, #32]
 800200c:	bd10      	pop	{r4, pc}

0800200e <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800200e:	b510      	push	{r4, lr}
 8002010:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002012:	2204      	movs	r2, #4
 8002014:	6800      	ldr	r0, [r0, #0]
 8002016:	f7ff ffed 	bl	8001ff4 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800201e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002022:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800202c:	2000      	movs	r0, #0
 800202e:	bd10      	pop	{r4, pc}

08002030 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002030:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002034:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002036:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002038:	d018      	beq.n	800206c <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800203a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800203c:	4c0c      	ldr	r4, [pc, #48]	; (8002070 <HAL_TIMEx_MasterConfigSynchronization+0x40>)

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800203e:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002040:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002042:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002044:	bf02      	ittt	eq
 8002046:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002048:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800204c:	4323      	orreq	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800204e:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002050:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002056:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002058:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800205c:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800205e:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002060:	2300      	movs	r3, #0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002062:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8002064:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002068:	4618      	mov	r0, r3
 800206a:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800206c:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 800206e:	bd30      	pop	{r4, r5, pc}
 8002070:	40012c00 	.word	0x40012c00

08002074 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002074:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002078:	2b01      	cmp	r3, #1
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800207a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800207c:	d034      	beq.n	80020e8 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800207e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002080:	6804      	ldr	r4, [r0, #0]
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002086:	688b      	ldr	r3, [r1, #8]
 8002088:	4313      	orrs	r3, r2
 800208a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800208e:	684b      	ldr	r3, [r1, #4]
 8002090:	4313      	orrs	r3, r2
 8002092:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002096:	680b      	ldr	r3, [r1, #0]
 8002098:	4313      	orrs	r3, r2
 800209a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800209e:	690b      	ldr	r3, [r1, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80020a6:	694b      	ldr	r3, [r1, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80020ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80020b0:	431a      	orrs	r2, r3
 80020b2:	698b      	ldr	r3, [r1, #24]
 80020b4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80020b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
 80020be:	4294      	cmp	r4, r2
 80020c0:	d10c      	bne.n	80020dc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80020c2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80020c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80020c8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80020cc:	69ca      	ldr	r2, [r1, #28]
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020d8:	6a0b      	ldr	r3, [r1, #32]
 80020da:	4313      	orrs	r3, r2
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80020dc:	6463      	str	r3, [r4, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80020de:	2300      	movs	r3, #0
 80020e0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80020e8:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80020ea:	bd10      	pop	{r4, pc}
 80020ec:	40012c00 	.word	0x40012c00

080020f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80020f4:	6805      	ldr	r5, [r0, #0]
 80020f6:	6923      	ldr	r3, [r4, #16]
 80020f8:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020fa:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80020fc:	6828      	ldr	r0, [r5, #0]
 80020fe:	431a      	orrs	r2, r3
 8002100:	6963      	ldr	r3, [r4, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	ea43 0201 	orr.w	r2, r3, r1
 8002108:	4b7d      	ldr	r3, [pc, #500]	; (8002300 <UART_SetConfig+0x210>)
 800210a:	4003      	ands	r3, r0
 800210c:	4313      	orrs	r3, r2
 800210e:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002110:	686b      	ldr	r3, [r5, #4]
 8002112:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002116:	68e3      	ldr	r3, [r4, #12]
 8002118:	4313      	orrs	r3, r2
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800211a:	4a7a      	ldr	r2, [pc, #488]	; (8002304 <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800211c:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800211e:	4295      	cmp	r5, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002120:	bf18      	it	ne
 8002122:	6a22      	ldrne	r2, [r4, #32]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002124:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002126:	bf18      	it	ne
 8002128:	4313      	orrne	r3, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800212a:	68aa      	ldr	r2, [r5, #8]
 800212c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002130:	4313      	orrs	r3, r2
 8002132:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002134:	4b74      	ldr	r3, [pc, #464]	; (8002308 <UART_SetConfig+0x218>)
 8002136:	429d      	cmp	r5, r3
 8002138:	d107      	bne.n	800214a <UART_SetConfig+0x5a>
 800213a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800213e:	4a73      	ldr	r2, [pc, #460]	; (800230c <UART_SetConfig+0x21c>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	e009      	b.n	800215e <UART_SetConfig+0x6e>
 800214a:	4b71      	ldr	r3, [pc, #452]	; (8002310 <UART_SetConfig+0x220>)
 800214c:	429d      	cmp	r5, r3
 800214e:	d10b      	bne.n	8002168 <UART_SetConfig+0x78>
 8002150:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002154:	4a6f      	ldr	r2, [pc, #444]	; (8002314 <UART_SetConfig+0x224>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f003 030c 	and.w	r3, r3, #12
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800215e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	d065      	beq.n	8002232 <UART_SetConfig+0x142>
 8002166:	e099      	b.n	800229c <UART_SetConfig+0x1ac>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <UART_SetConfig+0x214>)
 800216a:	429d      	cmp	r5, r3
 800216c:	f040 8089 	bne.w	8002282 <UART_SetConfig+0x192>
 8002170:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002174:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002178:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800217c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002180:	d014      	beq.n	80021ac <UART_SetConfig+0xbc>
 8002182:	d805      	bhi.n	8002190 <UART_SetConfig+0xa0>
 8002184:	2d00      	cmp	r5, #0
 8002186:	f040 80b7 	bne.w	80022f8 <UART_SetConfig+0x208>
    tmpreg = 0;

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800218a:	f7ff fa9f 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
      break;
 800218e:	e010      	b.n	80021b2 <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002190:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002194:	d007      	beq.n	80021a6 <UART_SetConfig+0xb6>
 8002196:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800219a:	f040 80ad 	bne.w	80022f8 <UART_SetConfig+0x208>
 800219e:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 80021a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021a4:	e008      	b.n	80021b8 <UART_SetConfig+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021a6:	2502      	movs	r5, #2
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 80021a8:	485b      	ldr	r0, [pc, #364]	; (8002318 <UART_SetConfig+0x228>)
 80021aa:	e005      	b.n	80021b8 <UART_SetConfig+0xc8>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 80021ac:	f7fe fec0 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
      break;
 80021b0:	2504      	movs	r5, #4
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 80021b2:	2800      	cmp	r0, #0
 80021b4:	f000 809e 	beq.w	80022f4 <UART_SetConfig+0x204>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80021b8:	6862      	ldr	r2, [r4, #4]
 80021ba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80021be:	4283      	cmp	r3, r0
 80021c0:	f200 809a 	bhi.w	80022f8 <UART_SetConfig+0x208>
 80021c4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80021c8:	f200 8096 	bhi.w	80022f8 <UART_SetConfig+0x208>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 80021cc:	2d08      	cmp	r5, #8
 80021ce:	d827      	bhi.n	8002220 <UART_SetConfig+0x130>
 80021d0:	e8df f005 	tbb	[pc, r5]
 80021d4:	26082605 	.word	0x26082605
 80021d8:	2626260e 	.word	0x2626260e
 80021dc:	1b          	.byte	0x1b
 80021dd:	00          	.byte	0x00
        {
        case UART_CLOCKSOURCE_PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80021de:	f7ff fa75 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 80021e2:	e007      	b.n	80021f4 <UART_SetConfig+0x104>
          break;
        case UART_CLOCKSOURCE_HSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80021e4:	484d      	ldr	r0, [pc, #308]	; (800231c <UART_SetConfig+0x22c>)
 80021e6:	0855      	lsrs	r5, r2, #1
 80021e8:	2300      	movs	r3, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	1940      	adds	r0, r0, r5
 80021ee:	e011      	b.n	8002214 <UART_SetConfig+0x124>
          break;
        case UART_CLOCKSOURCE_SYSCLK:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80021f0:	f7fe fe9e 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 80021f4:	6862      	ldr	r2, [r4, #4]
 80021f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021fa:	0856      	lsrs	r6, r2, #1
 80021fc:	2700      	movs	r7, #0
 80021fe:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002202:	2300      	movs	r3, #0
 8002204:	4630      	mov	r0, r6
 8002206:	4639      	mov	r1, r7
 8002208:	e006      	b.n	8002218 <UART_SetConfig+0x128>
          break;
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800220a:	0850      	lsrs	r0, r2, #1
 800220c:	2100      	movs	r1, #0
 800220e:	2300      	movs	r3, #0
 8002210:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002214:	f141 0100 	adc.w	r1, r1, #0
 8002218:	f7fe f832 	bl	8000280 <__aeabi_uldivmod>
          break;
 800221c:	2200      	movs	r2, #0
 800221e:	e000      	b.n	8002222 <UART_SetConfig+0x132>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8002220:	2201      	movs	r2, #1
          break;
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002222:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <UART_SetConfig+0x230>)
 8002224:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002228:	4299      	cmp	r1, r3
 800222a:	d865      	bhi.n	80022f8 <UART_SetConfig+0x208>
        {
           huart->Instance->BRR = tmpreg;
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	60d8      	str	r0, [r3, #12]
 8002230:	e063      	b.n	80022fa <UART_SetConfig+0x20a>
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002232:	2b08      	cmp	r3, #8
 8002234:	d828      	bhi.n	8002288 <UART_SetConfig+0x198>
 8002236:	e8df f003 	tbb	[pc, r3]
 800223a:	0805      	.short	0x0805
 800223c:	2712270b 	.word	0x2712270b
 8002240:	2727      	.short	0x2727
 8002242:	1b          	.byte	0x1b
 8002243:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002244:	f7ff fa42 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 8002248:	e00b      	b.n	8002262 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800224a:	f7ff fa57 	bl	80016fc <HAL_RCC_GetPCLK2Freq>
 800224e:	e008      	b.n	8002262 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_HSI:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002250:	6860      	ldr	r0, [r4, #4]
 8002252:	0842      	lsrs	r2, r0, #1
 8002254:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002258:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800225c:	e00c      	b.n	8002278 <UART_SetConfig+0x188>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800225e:	f7fe fe67 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 8002262:	6863      	ldr	r3, [r4, #4]
 8002264:	085a      	lsrs	r2, r3, #1
 8002266:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800226a:	fbb0 f3f3 	udiv	r3, r0, r3
 800226e:	e005      	b.n	800227c <UART_SetConfig+0x18c>
      break;
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002270:	6860      	ldr	r0, [r4, #4]
 8002272:	0843      	lsrs	r3, r0, #1
 8002274:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002278:	fbb3 f3f0 	udiv	r3, r3, r0
 800227c:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 800227e:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002280:	e004      	b.n	800228c <UART_SetConfig+0x19c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002282:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002286:	d137      	bne.n	80022f8 <UART_SetConfig+0x208>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002288:	2201      	movs	r2, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 800228a:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800228c:	f3c3 0042 	ubfx	r0, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002290:	6821      	ldr	r1, [r4, #0]
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002292:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002296:	4303      	orrs	r3, r0
 8002298:	60cb      	str	r3, [r1, #12]
 800229a:	e02e      	b.n	80022fa <UART_SetConfig+0x20a>
  }
  else
  {
    switch (clocksource)
 800229c:	2b08      	cmp	r3, #8
 800229e:	d82b      	bhi.n	80022f8 <UART_SetConfig+0x208>
 80022a0:	e8df f003 	tbb	[pc, r3]
 80022a4:	2a0b0805 	.word	0x2a0b0805
 80022a8:	2a2a2a14 	.word	0x2a2a2a14
 80022ac:	1e          	.byte	0x1e
 80022ad:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80022ae:	f7ff fa0d 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 80022b2:	e00d      	b.n	80022d0 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80022b4:	f7ff fa22 	bl	80016fc <HAL_RCC_GetPCLK2Freq>
 80022b8:	e00a      	b.n	80022d0 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_HSI:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80022ba:	6861      	ldr	r1, [r4, #4]
 80022bc:	084a      	lsrs	r2, r1, #1
 80022be:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 80022c2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	e00f      	b.n	80022ec <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022cc:	f7fe fe30 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 80022d0:	6863      	ldr	r3, [r4, #4]
 80022d2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80022d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80022da:	b280      	uxth	r0, r0
 80022dc:	60e8      	str	r0, [r5, #12]
 80022de:	e007      	b.n	80022f0 <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80022e0:	6862      	ldr	r2, [r4, #4]
 80022e2:	0853      	lsrs	r3, r2, #1
 80022e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022f0:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 80022f2:	e002      	b.n	80022fa <UART_SetConfig+0x20a>
 80022f4:	4602      	mov	r2, r0
 80022f6:	e000      	b.n	80022fa <UART_SetConfig+0x20a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80022f8:	2201      	movs	r2, #1
    }
  }

  return ret;

}
 80022fa:	4610      	mov	r0, r2
 80022fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022fe:	bf00      	nop
 8002300:	efff69f3 	.word	0xefff69f3
 8002304:	40008000 	.word	0x40008000
 8002308:	40013800 	.word	0x40013800
 800230c:	0800437c 	.word	0x0800437c
 8002310:	40004400 	.word	0x40004400
 8002314:	08004380 	.word	0x08004380
 8002318:	00f42400 	.word	0x00f42400
 800231c:	f4240000 	.word	0xf4240000
 8002320:	000ffcff 	.word	0x000ffcff

08002324 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002324:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002326:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002328:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800232a:	d506      	bpl.n	800233a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800232c:	6804      	ldr	r4, [r0, #0]
 800232e:	6862      	ldr	r2, [r4, #4]
 8002330:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002334:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002336:	430a      	orrs	r2, r1
 8002338:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800233a:	079c      	lsls	r4, r3, #30
 800233c:	d506      	bpl.n	800234c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800233e:	6804      	ldr	r4, [r0, #0]
 8002340:	6862      	ldr	r2, [r4, #4]
 8002342:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002346:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002348:	430a      	orrs	r2, r1
 800234a:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800234c:	0759      	lsls	r1, r3, #29
 800234e:	d506      	bpl.n	800235e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002350:	6804      	ldr	r4, [r0, #0]
 8002352:	6862      	ldr	r2, [r4, #4]
 8002354:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002358:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800235a:	430a      	orrs	r2, r1
 800235c:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800235e:	071a      	lsls	r2, r3, #28
 8002360:	d506      	bpl.n	8002370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002362:	6804      	ldr	r4, [r0, #0]
 8002364:	6862      	ldr	r2, [r4, #4]
 8002366:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800236a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800236c:	430a      	orrs	r2, r1
 800236e:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002370:	06dc      	lsls	r4, r3, #27
 8002372:	d506      	bpl.n	8002382 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002374:	6804      	ldr	r4, [r0, #0]
 8002376:	68a2      	ldr	r2, [r4, #8]
 8002378:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800237c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800237e:	430a      	orrs	r2, r1
 8002380:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002382:	0699      	lsls	r1, r3, #26
 8002384:	d506      	bpl.n	8002394 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002386:	6804      	ldr	r4, [r0, #0]
 8002388:	68a2      	ldr	r2, [r4, #8]
 800238a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800238e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002390:	430a      	orrs	r2, r1
 8002392:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002394:	065a      	lsls	r2, r3, #25
 8002396:	d50f      	bpl.n	80023b8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002398:	6801      	ldr	r1, [r0, #0]
 800239a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800239c:	684a      	ldr	r2, [r1, #4]
 800239e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80023a2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023a8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023aa:	d105      	bne.n	80023b8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023ac:	684a      	ldr	r2, [r1, #4]
 80023ae:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 80023b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80023b4:	4322      	orrs	r2, r4
 80023b6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	d506      	bpl.n	80023ca <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023bc:	6801      	ldr	r1, [r0, #0]
 80023be:	684b      	ldr	r3, [r1, #4]
 80023c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80023c4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
 80023ca:	bd10      	pop	{r4, pc}

080023cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023d0:	9d06      	ldr	r5, [sp, #24]
 80023d2:	4604      	mov	r4, r0
 80023d4:	460f      	mov	r7, r1
 80023d6:	4616      	mov	r6, r2
 80023d8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023da:	6821      	ldr	r1, [r4, #0]
 80023dc:	69ca      	ldr	r2, [r1, #28]
 80023de:	ea37 0302 	bics.w	r3, r7, r2
 80023e2:	bf0c      	ite	eq
 80023e4:	2201      	moveq	r2, #1
 80023e6:	2200      	movne	r2, #0
 80023e8:	42b2      	cmp	r2, r6
 80023ea:	d11d      	bne.n	8002428 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80023ec:	1c6b      	adds	r3, r5, #1
 80023ee:	d0f5      	beq.n	80023dc <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80023f0:	b99d      	cbnz	r5, 800241a <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002404:	2320      	movs	r3, #32
 8002406:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800240a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800240e:	2300      	movs	r3, #0
 8002410:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002414:	2003      	movs	r0, #3
 8002416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 800241a:	f7fe f8e5 	bl	80005e8 <HAL_GetTick>
 800241e:	ebc8 0000 	rsb	r0, r8, r0
 8002422:	4285      	cmp	r5, r0
 8002424:	d2d9      	bcs.n	80023da <UART_WaitOnFlagUntilTimeout+0xe>
 8002426:	e7e4      	b.n	80023f2 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002428:	2000      	movs	r0, #0
}
 800242a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800242e <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002432:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002434:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002438:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243a:	4604      	mov	r4, r0
 800243c:	460d      	mov	r5, r1
 800243e:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002440:	d14b      	bne.n	80024da <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0))
 8002442:	2900      	cmp	r1, #0
 8002444:	d047      	beq.n	80024d6 <HAL_UART_Transmit+0xa8>
 8002446:	2a00      	cmp	r2, #0
 8002448:	d045      	beq.n	80024d6 <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800244a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800244e:	2b01      	cmp	r3, #1
 8002450:	d043      	beq.n	80024da <HAL_UART_Transmit+0xac>
 8002452:	2301      	movs	r3, #1
 8002454:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002458:	2300      	movs	r3, #0
 800245a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800245c:	2321      	movs	r3, #33	; 0x21
 800245e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002462:	f7fe f8c1 	bl	80005e8 <HAL_GetTick>

    huart->TxXferSize = Size;
 8002466:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800246a:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 800246c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0)
 8002470:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002474:	b292      	uxth	r2, r2
 8002476:	b302      	cbz	r2, 80024ba <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 8002478:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800247c:	9700      	str	r7, [sp, #0]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 800247e:	3b01      	subs	r3, #1
 8002480:	b29b      	uxth	r3, r3
 8002482:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002486:	2200      	movs	r2, #0
 8002488:	4633      	mov	r3, r6
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	4620      	mov	r0, r4
 800248e:	f7ff ff9d 	bl	80023cc <UART_WaitOnFlagUntilTimeout>
 8002492:	b108      	cbz	r0, 8002498 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8002494:	2003      	movs	r0, #3
 8002496:	e021      	b.n	80024dc <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	68a3      	ldr	r3, [r4, #8]
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a0:	d107      	bne.n	80024b2 <HAL_UART_Transmit+0x84>
 80024a2:	6923      	ldr	r3, [r4, #16]
 80024a4:	b92b      	cbnz	r3, 80024b2 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80024a6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80024aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ae:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80024b0:	e7de      	b.n	8002470 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80024b2:	782b      	ldrb	r3, [r5, #0]
 80024b4:	8513      	strh	r3, [r2, #40]	; 0x28
 80024b6:	3501      	adds	r5, #1
 80024b8:	e7da      	b.n	8002470 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ba:	9700      	str	r7, [sp, #0]
 80024bc:	4633      	mov	r3, r6
 80024be:	2140      	movs	r1, #64	; 0x40
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7ff ff83 	bl	80023cc <UART_WaitOnFlagUntilTimeout>
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d1e4      	bne.n	8002494 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ca:	2320      	movs	r3, #32
 80024cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024d0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80024d4:	e002      	b.n	80024dc <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 80024d6:	2001      	movs	r0, #1
 80024d8:	e000      	b.n	80024dc <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80024da:	2002      	movs	r0, #2
  }
}
 80024dc:	b002      	add	sp, #8
 80024de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024e2 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80024e6:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80024e8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80024ec:	2b20      	cmp	r3, #32
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ee:	4604      	mov	r4, r0
 80024f0:	460d      	mov	r5, r1
 80024f2:	4616      	mov	r6, r2
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80024f4:	d15d      	bne.n	80025b2 <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0))
 80024f6:	2900      	cmp	r1, #0
 80024f8:	d059      	beq.n	80025ae <HAL_UART_Receive+0xcc>
 80024fa:	2a00      	cmp	r2, #0
 80024fc:	d057      	beq.n	80025ae <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024fe:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002502:	2b01      	cmp	r3, #1
 8002504:	d055      	beq.n	80025b2 <HAL_UART_Receive+0xd0>
 8002506:	2301      	movs	r3, #1
 8002508:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250c:	2300      	movs	r3, #0
 800250e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002510:	2322      	movs	r3, #34	; 0x22
 8002512:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002516:	f7fe f867 	bl	80005e8 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800251a:	68a3      	ldr	r3, [r4, #8]
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 800251c:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002524:	4607      	mov	r7, r0

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 8002526:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800252a:	d104      	bne.n	8002536 <HAL_UART_Receive+0x54>
 800252c:	6923      	ldr	r3, [r4, #16]
 800252e:	b92b      	cbnz	r3, 800253c <HAL_UART_Receive+0x5a>
 8002530:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002534:	e00d      	b.n	8002552 <HAL_UART_Receive+0x70>
 8002536:	b92b      	cbnz	r3, 8002544 <HAL_UART_Receive+0x62>
 8002538:	6923      	ldr	r3, [r4, #16]
 800253a:	b90b      	cbnz	r3, 8002540 <HAL_UART_Receive+0x5e>
 800253c:	23ff      	movs	r3, #255	; 0xff
 800253e:	e008      	b.n	8002552 <HAL_UART_Receive+0x70>
 8002540:	237f      	movs	r3, #127	; 0x7f
 8002542:	e006      	b.n	8002552 <HAL_UART_Receive+0x70>
 8002544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002548:	d105      	bne.n	8002556 <HAL_UART_Receive+0x74>
 800254a:	6923      	ldr	r3, [r4, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f7      	beq.n	8002540 <HAL_UART_Receive+0x5e>
 8002550:	233f      	movs	r3, #63	; 0x3f
 8002552:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002556:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 800255a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800255e:	b280      	uxth	r0, r0
 8002560:	b1f8      	cbz	r0, 80025a2 <HAL_UART_Receive+0xc0>
    {
      huart->RxXferCount--;
 8002562:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	f8cd 8000 	str.w	r8, [sp]
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
 800256a:	3b01      	subs	r3, #1
 800256c:	b29b      	uxth	r3, r3
 800256e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002572:	2200      	movs	r2, #0
 8002574:	463b      	mov	r3, r7
 8002576:	2120      	movs	r1, #32
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff ff27 	bl	80023cc <UART_WaitOnFlagUntilTimeout>
 800257e:	b9d0      	cbnz	r0, 80025b6 <HAL_UART_Receive+0xd4>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002580:	68a3      	ldr	r3, [r4, #8]
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	d106      	bne.n	8002598 <HAL_UART_Receive+0xb6>
 800258a:	6922      	ldr	r2, [r4, #16]
 800258c:	b922      	cbnz	r2, 8002598 <HAL_UART_Receive+0xb6>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800258e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002590:	4033      	ands	r3, r6
 8002592:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2;
 8002596:	e7e0      	b.n	800255a <HAL_UART_Receive+0x78>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800259a:	4033      	ands	r3, r6
 800259c:	702b      	strb	r3, [r5, #0]
 800259e:	3501      	adds	r5, #1
 80025a0:	e7db      	b.n	800255a <HAL_UART_Receive+0x78>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025a2:	2320      	movs	r3, #32
 80025a4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80025ac:	e004      	b.n	80025b8 <HAL_UART_Receive+0xd6>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 80025ae:	2001      	movs	r0, #1
 80025b0:	e002      	b.n	80025b8 <HAL_UART_Receive+0xd6>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80025b2:	2002      	movs	r0, #2
 80025b4:	e000      	b.n	80025b8 <HAL_UART_Receive+0xd6>
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 80025b6:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80025b8:	b002      	add	sp, #8
 80025ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025be <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025c0:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c2:	2600      	movs	r6, #0
 80025c4:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80025c6:	f7fe f80f 	bl	80005e8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80025d0:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025d2:	d404      	bmi.n	80025de <UART_CheckIdleState+0x20>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	075b      	lsls	r3, r3, #29
 80025da:	d51a      	bpl.n	8002612 <UART_CheckIdleState+0x54>
 80025dc:	e00d      	b.n	80025fa <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	4632      	mov	r2, r6
 80025e6:	4603      	mov	r3, r0
 80025e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7ff feed 	bl	80023cc <UART_WaitOnFlagUntilTimeout>
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d0ee      	beq.n	80025d4 <UART_CheckIdleState+0x16>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025f6:	2003      	movs	r0, #3
 80025f8:	e013      	b.n	8002622 <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2200      	movs	r2, #0
 8002602:	462b      	mov	r3, r5
 8002604:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff fedf 	bl	80023cc <UART_WaitOnFlagUntilTimeout>
 800260e:	2800      	cmp	r0, #0
 8002610:	d1f1      	bne.n	80025f6 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002612:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002614:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002616:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800261a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 800261e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002622:	b002      	add	sp, #8
 8002624:	bd70      	pop	{r4, r5, r6, pc}

08002626 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002626:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002628:	4604      	mov	r4, r0
 800262a:	b360      	cbz	r0, 8002686 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800262c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002630:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002634:	b91b      	cbnz	r3, 800263e <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002636:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263a:	f000 fb7f 	bl	8002d3c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800263e:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002640:	2324      	movs	r3, #36	; 0x24
 8002642:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002646:	6813      	ldr	r3, [r2, #0]
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff fd4e 	bl	80020f0 <UART_SetConfig>
 8002654:	2801      	cmp	r0, #1
 8002656:	d016      	beq.n	8002686 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800265a:	b113      	cbz	r3, 8002662 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff fe61 	bl	8002324 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800266a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002672:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800267a:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800267c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 800267e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002682:	f7ff bf9c 	b.w	80025be <UART_CheckIdleState>
}
 8002686:	2001      	movs	r0, #1
 8002688:	bd10      	pop	{r4, pc}

0800268a <GPIO_SetBits>:
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800268a:	2201      	movs	r2, #1
 800268c:	f7fe bbca 	b.w	8000e24 <HAL_GPIO_WritePin>

08002690 <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f7fe bbc7 	b.w	8000e24 <HAL_GPIO_WritePin>
	...

08002698 <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8002698:	b510      	push	{r4, lr}
 800269a:	4604      	mov	r4, r0
	if (data & 0x10) {
 800269c:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800269e:	f04f 0110 	mov.w	r1, #16
 80026a2:	481a      	ldr	r0, [pc, #104]	; (800270c <hd44780_wr_hi_nibble+0x74>)
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
	if (data & 0x10) {
 80026a4:	d502      	bpl.n	80026ac <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80026a6:	f7ff fff0 	bl	800268a <GPIO_SetBits>
 80026aa:	e001      	b.n	80026b0 <hd44780_wr_hi_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80026ac:	f7ff fff0 	bl	8002690 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 80026b0:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80026b2:	f04f 0120 	mov.w	r1, #32
 80026b6:	4815      	ldr	r0, [pc, #84]	; (800270c <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x10) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x20) {
 80026b8:	d502      	bpl.n	80026c0 <hd44780_wr_hi_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80026ba:	f7ff ffe6 	bl	800268a <GPIO_SetBits>
 80026be:	e001      	b.n	80026c4 <hd44780_wr_hi_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80026c0:	f7ff ffe6 	bl	8002690 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 80026c4:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80026c6:	f04f 0140 	mov.w	r1, #64	; 0x40
 80026ca:	4810      	ldr	r0, [pc, #64]	; (800270c <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x20) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x40) {
 80026cc:	d502      	bpl.n	80026d4 <hd44780_wr_hi_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80026ce:	f7ff ffdc 	bl	800268a <GPIO_SetBits>
 80026d2:	e001      	b.n	80026d8 <hd44780_wr_hi_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80026d4:	f7ff ffdc 	bl	8002690 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 80026d8:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80026da:	f04f 0180 	mov.w	r1, #128	; 0x80
 80026de:	480b      	ldr	r0, [pc, #44]	; (800270c <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x40) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x80) {
 80026e0:	d502      	bpl.n	80026e8 <hd44780_wr_hi_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80026e2:	f7ff ffd2 	bl	800268a <GPIO_SetBits>
 80026e6:	e001      	b.n	80026ec <hd44780_wr_hi_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80026e8:	f7ff ffd2 	bl	8002690 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80026ec:	2201      	movs	r2, #1
 80026ee:	2102      	movs	r1, #2
 80026f0:	4806      	ldr	r0, [pc, #24]	; (800270c <hd44780_wr_hi_nibble+0x74>)
 80026f2:	f7fe fb97 	bl	8000e24 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80026f6:	2002      	movs	r0, #2
 80026f8:	f7fd ff7c 	bl	80005f4 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80026fc:	2200      	movs	r2, #0
 80026fe:	2102      	movs	r1, #2
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <hd44780_wr_hi_nibble+0x74>)
}
 8002702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8002706:	f7fe bb8d 	b.w	8000e24 <HAL_GPIO_WritePin>
 800270a:	bf00      	nop
 800270c:	48000400 	.word	0x48000400

08002710 <hd44780_wr_lo_nibble>:
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8002710:	b510      	push	{r4, lr}
 8002712:	4604      	mov	r4, r0
	if (data & 0x01) {
 8002714:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002716:	f04f 0110 	mov.w	r1, #16
 800271a:	481a      	ldr	r0, [pc, #104]	; (8002784 <hd44780_wr_lo_nibble+0x74>)
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
	if (data & 0x01) {
 800271c:	d502      	bpl.n	8002724 <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800271e:	f7ff ffb4 	bl	800268a <GPIO_SetBits>
 8002722:	e001      	b.n	8002728 <hd44780_wr_lo_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002724:	f7ff ffb4 	bl	8002690 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8002728:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800272a:	f04f 0120 	mov.w	r1, #32
 800272e:	4815      	ldr	r0, [pc, #84]	; (8002784 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x01) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x02) {
 8002730:	d502      	bpl.n	8002738 <hd44780_wr_lo_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002732:	f7ff ffaa 	bl	800268a <GPIO_SetBits>
 8002736:	e001      	b.n	800273c <hd44780_wr_lo_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002738:	f7ff ffaa 	bl	8002690 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 800273c:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800273e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002742:	4810      	ldr	r0, [pc, #64]	; (8002784 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x02) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x04) {
 8002744:	d502      	bpl.n	800274c <hd44780_wr_lo_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002746:	f7ff ffa0 	bl	800268a <GPIO_SetBits>
 800274a:	e001      	b.n	8002750 <hd44780_wr_lo_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800274c:	f7ff ffa0 	bl	8002690 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 8002750:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002752:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002756:	480b      	ldr	r0, [pc, #44]	; (8002784 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x04) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x08) {
 8002758:	d502      	bpl.n	8002760 <hd44780_wr_lo_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800275a:	f7ff ff96 	bl	800268a <GPIO_SetBits>
 800275e:	e001      	b.n	8002764 <hd44780_wr_lo_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002760:	f7ff ff96 	bl	8002690 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8002764:	2201      	movs	r2, #1
 8002766:	2102      	movs	r1, #2
 8002768:	4806      	ldr	r0, [pc, #24]	; (8002784 <hd44780_wr_lo_nibble+0x74>)
 800276a:	f7fe fb5b 	bl	8000e24 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800276e:	2002      	movs	r0, #2
 8002770:	f7fd ff40 	bl	80005f4 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8002774:	2200      	movs	r2, #0
 8002776:	2102      	movs	r1, #2
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <hd44780_wr_lo_nibble+0x74>)
}
 800277a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 800277e:	f7fe bb51 	b.w	8000e24 <HAL_GPIO_WritePin>
 8002782:	bf00      	nop
 8002784:	48000400 	.word	0x48000400

08002788 <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8002788:	b510      	push	{r4, lr}
 800278a:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 800278c:	f7ff ff84 	bl	8002698 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8002790:	4620      	mov	r0, r4
}
 8002792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
	hd44780_wr_lo_nibble(data);
 8002796:	f7ff bfbb 	b.w	8002710 <hd44780_wr_lo_nibble>
	...

0800279c <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 800279c:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 800279e:	2200      	movs	r2, #0
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 80027a0:	4604      	mov	r4, r0
	hd44780_RS_Off();
 80027a2:	2101      	movs	r1, #1
 80027a4:	4803      	ldr	r0, [pc, #12]	; (80027b4 <hd44780_wr_cmd+0x18>)
 80027a6:	f7fe fb3d 	bl	8000e24 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 80027aa:	4620      	mov	r0, r4
}
 80027ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
 80027b0:	f7ff bfea 	b.w	8002788 <hd44780_write>
 80027b4:	48000400 	.word	0x48000400

080027b8 <hd44780_wr_data>:
}

void hd44780_wr_data(unsigned char data) {
 80027b8:	b510      	push	{r4, lr}
	hd44780_RS_On();
 80027ba:	2201      	movs	r2, #1
void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
 80027bc:	4604      	mov	r4, r0
	hd44780_RS_On();
 80027be:	4611      	mov	r1, r2
 80027c0:	4803      	ldr	r0, [pc, #12]	; (80027d0 <hd44780_wr_data+0x18>)
 80027c2:	f7fe fb2f 	bl	8000e24 <HAL_GPIO_WritePin>
	hd44780_write(data);
 80027c6:	4620      	mov	r0, r4
}
 80027c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
	hd44780_RS_On();
	hd44780_write(data);
 80027cc:	f7ff bfdc 	b.w	8002788 <hd44780_write>
 80027d0:	48000400 	.word	0x48000400

080027d4 <HD44780_Init>:
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <HD44780_Init+0xa8>)
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 80027d6:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 80027d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80027da:	4d29      	ldr	r5, [pc, #164]	; (8002880 <HD44780_Init+0xac>)
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 80027dc:	f042 0202 	orr.w	r2, r2, #2
 80027e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80027e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 80027e4:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	9300      	str	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80027ec:	2401      	movs	r4, #1
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 80027ee:	9b00      	ldr	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	9402      	str	r4, [sp, #8]
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 80027f2:	23f0      	movs	r3, #240	; 0xf0
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80027f4:	2603      	movs	r6, #3

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80027f6:	a901      	add	r1, sp, #4
 80027f8:	4628      	mov	r0, r5
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 80027fa:	9301      	str	r3, [sp, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80027fc:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80027fe:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002800:	f7fe fa4e 	bl	8000ca0 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8002804:	230b      	movs	r3, #11
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8002806:	a901      	add	r1, sp, #4
 8002808:	4628      	mov	r0, r5

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 800280a:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800280c:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800280e:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002810:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8002812:	f7fe fa45 	bl	8000ca0 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 8002816:	4628      	mov	r0, r5
 8002818:	2200      	movs	r2, #0
 800281a:	2102      	movs	r1, #2
 800281c:	f7fe fb02 	bl	8000e24 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 8002820:	4621      	mov	r1, r4
 8002822:	4628      	mov	r0, r5
 8002824:	2200      	movs	r2, #0
 8002826:	f7fe fafd 	bl	8000e24 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 800282a:	2200      	movs	r2, #0
 800282c:	2108      	movs	r1, #8
 800282e:	4628      	mov	r0, r5
 8002830:	f7fe faf8 	bl	8000e24 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 8002834:	2010      	movs	r0, #16
 8002836:	f7fd fedd 	bl	80005f4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800283a:	2030      	movs	r0, #48	; 0x30
 800283c:	f7ff ff2c 	bl	8002698 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 8002840:	2005      	movs	r0, #5
 8002842:	f7fd fed7 	bl	80005f4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002846:	2030      	movs	r0, #48	; 0x30
 8002848:	f7ff ff26 	bl	8002698 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 800284c:	4620      	mov	r0, r4
 800284e:	f7fd fed1 	bl	80005f4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002852:	2030      	movs	r0, #48	; 0x30
 8002854:	f7ff ff20 	bl	8002698 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8002858:	2020      	movs	r0, #32
 800285a:	f7ff ff1d 	bl	8002698 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 800285e:	2028      	movs	r0, #40	; 0x28
 8002860:	f7ff ff9c 	bl	800279c <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8002864:	200c      	movs	r0, #12
 8002866:	f7ff ff99 	bl	800279c <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff ff96 	bl	800279c <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8002870:	2006      	movs	r0, #6
 8002872:	f7ff ff93 	bl	800279c <hd44780_wr_cmd>

}
 8002876:	b006      	add	sp, #24
 8002878:	bd70      	pop	{r4, r5, r6, pc}
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	48000400 	.word	0x48000400

08002884 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8002884:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 8002886:	2300      	movs	r3, #0

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8002888:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 800288a:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 800288c:	9b01      	ldr	r3, [sp, #4]
 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
	hd44780_wr_data(c & 0xff);
 800288e:	5ce0      	ldrb	r0, [r4, r3]
 8002890:	f7ff ff92 	bl	80027b8 <hd44780_wr_data>
void HD44780_PutStr(char *str) {
	__IO unsigned int i = 0;

	do {
		HD44780_PutChar(str[i]);
		i++;
 8002894:	9b01      	ldr	r3, [sp, #4]
 8002896:	3301      	adds	r3, #1
 8002898:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 800289a:	9b01      	ldr	r3, [sp, #4]
 800289c:	5ce3      	ldrb	r3, [r4, r3]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f4      	bne.n	800288c <HD44780_PutStr+0x8>
}
 80028a2:	b002      	add	sp, #8
 80028a4:	bd10      	pop	{r4, pc}
	...

080028a8 <setPWMandTurnON>:
void 	HD44780_PutStr(char *str);

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void setPWMandTurnON(TIM_HandleTypeDef* htim1, int32_t pwmPeriod) {
 80028a8:	b570      	push	{r4, r5, r6, lr}
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
	htim1->Instance = TIM1;
 80028aa:	4b25      	ldr	r3, [pc, #148]	; (8002940 <setPWMandTurnON+0x98>)
 80028ac:	6003      	str	r3, [r0, #0]
void 	HD44780_PutStr(char *str);

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void setPWMandTurnON(TIM_HandleTypeDef* htim1, int32_t pwmPeriod) {
 80028ae:	4604      	mov	r4, r0
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
	htim1->Instance = TIM1;
	htim1->Init.Prescaler = 0;
 80028b0:	2300      	movs	r3, #0
void 	HD44780_PutStr(char *str);

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void setPWMandTurnON(TIM_HandleTypeDef* htim1, int32_t pwmPeriod) {
 80028b2:	b096      	sub	sp, #88	; 0x58
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
	htim1->Instance = TIM1;
	htim1->Init.Prescaler = 0;
 80028b4:	6043      	str	r3, [r0, #4]
	htim1->Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b6:	6083      	str	r3, [r0, #8]
	htim1->Init.Period = pwmPeriod;
 80028b8:	60e1      	str	r1, [r4, #12]
	htim1->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ba:	6103      	str	r3, [r0, #16]
	htim1->Init.RepetitionCounter = 0;
 80028bc:	6143      	str	r3, [r0, #20]
void 	HD44780_PutStr(char *str);

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void setPWMandTurnON(TIM_HandleTypeDef* htim1, int32_t pwmPeriod) {
 80028be:	460e      	mov	r6, r1
	htim1->Init.Prescaler = 0;
	htim1->Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1->Init.Period = pwmPeriod;
	htim1->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1->Init.RepetitionCounter = 0;
	if (HAL_TIM_PWM_Init(&*htim1) != HAL_OK) {
 80028c0:	f7ff fa5c 	bl	8001d7c <HAL_TIM_PWM_Init>
 80028c4:	b100      	cbz	r0, 80028c8 <setPWMandTurnON+0x20>
 80028c6:	e7fe      	b.n	80028c6 <setPWMandTurnON+0x1e>
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c8:	9001      	str	r0, [sp, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028ca:	9002      	str	r0, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028cc:	9003      	str	r0, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&*htim1, &sMasterConfig)
 80028ce:	a901      	add	r1, sp, #4
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff fbad 	bl	8002030 <HAL_TIMEx_MasterConfigSynchronization>
 80028d6:	4605      	mov	r5, r0
 80028d8:	b100      	cbz	r0, 80028dc <setPWMandTurnON+0x34>
 80028da:	e7fe      	b.n	80028da <setPWMandTurnON+0x32>
	}
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&*htim1, TIM_CHANNEL_1);
 80028dc:	4601      	mov	r1, r0
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff fb52 	bl	8001f88 <HAL_TIM_PWM_Stop>
	/*************************************/
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028e4:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&*htim1, &sConfigOC, TIM_CHANNEL_1)
 80028e6:	462a      	mov	r2, r5
 80028e8:	a904      	add	r1, sp, #16
 80028ea:	4620      	mov	r0, r4
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&*htim1, TIM_CHANNEL_1);
	/*************************************/
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ec:	9304      	str	r3, [sp, #16]
	sConfigOC.Pulse = pwmPeriod / 2;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ee:	9506      	str	r5, [sp, #24]
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&*htim1, TIM_CHANNEL_1);
	/*************************************/
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = pwmPeriod / 2;
 80028f0:	2302      	movs	r3, #2
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028f2:	9507      	str	r5, [sp, #28]
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&*htim1, TIM_CHANNEL_1);
	/*************************************/
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = pwmPeriod / 2;
 80028f4:	fb96 f6f3 	sdiv	r6, r6, r3
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028f8:	9508      	str	r5, [sp, #32]
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&*htim1, TIM_CHANNEL_1);
	/*************************************/
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = pwmPeriod / 2;
 80028fa:	9605      	str	r6, [sp, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028fc:	9509      	str	r5, [sp, #36]	; 0x24
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028fe:	950a      	str	r5, [sp, #40]	; 0x28
	if (HAL_TIM_PWM_ConfigChannel(&*htim1, &sConfigOC, TIM_CHANNEL_1)
 8002900:	f7ff fa90 	bl	8001e24 <HAL_TIM_PWM_ConfigChannel>
 8002904:	b100      	cbz	r0, 8002908 <setPWMandTurnON+0x60>
 8002906:	e7fe      	b.n	8002906 <setPWMandTurnON+0x5e>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&*htim1, &sConfigOC, TIM_CHANNEL_1)
			!= HAL_OK) {
		Error_Handler();
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800290c:	900b      	str	r0, [sp, #44]	; 0x2c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800290e:	900c      	str	r0, [sp, #48]	; 0x30
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002910:	900d      	str	r0, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.DeadTime = 0;
 8002912:	900e      	str	r0, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002914:	900f      	str	r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002916:	9310      	str	r3, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002918:	9011      	str	r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800291a:	9012      	str	r0, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800291c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002920:	9014      	str	r0, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002922:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_ConfigBreakDeadTime(&*htim1, &sBreakDeadTimeConfig)
 8002924:	a90b      	add	r1, sp, #44	; 0x2c
 8002926:	4620      	mov	r0, r4
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002928:	9313      	str	r3, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&*htim1, &sBreakDeadTimeConfig)
 800292a:	f7ff fba3 	bl	8002074 <HAL_TIMEx_ConfigBreakDeadTime>
 800292e:	4601      	mov	r1, r0
 8002930:	b100      	cbz	r0, 8002934 <setPWMandTurnON+0x8c>
 8002932:	e7fe      	b.n	8002932 <setPWMandTurnON+0x8a>
			!= HAL_OK) {
		Error_Handler();
	}
	HAL_TIMEx_PWMN_Start(&*htim1, TIM_CHANNEL_1);
 8002934:	4620      	mov	r0, r4
 8002936:	f7ff fb6a 	bl	800200e <HAL_TIMEx_PWMN_Start>
}
 800293a:	b016      	add	sp, #88	; 0x58
 800293c:	bd70      	pop	{r4, r5, r6, pc}
 800293e:	bf00      	nop
 8002940:	40012c00 	.word	0x40012c00

08002944 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002946:	b0ad      	sub	sp, #180	; 0xb4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002948:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800294a:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800294c:	2502      	movs	r5, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800294e:	2610      	movs	r6, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002950:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002952:	2707      	movs	r7, #7
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002954:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002956:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002958:	9606      	str	r6, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800295a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800295c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800295e:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002960:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002962:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002964:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002966:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002968:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800296a:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800296c:	f7fe fb7e 	bl	800106c <HAL_RCC_OscConfig>
 8002970:	b100      	cbz	r0, 8002974 <SystemClock_Config+0x30>
 8002972:	e7fe      	b.n	8002972 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002974:	230f      	movs	r3, #15
 8002976:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002978:	2303      	movs	r3, #3
 800297a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800297c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800297e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8002980:	f44f 63e0 	mov.w	r3, #1792	; 0x700

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002984:	4621      	mov	r1, r4
 8002986:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8002988:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800298a:	f7fe fde1 	bl	8001550 <HAL_RCC_ClockConfig>
 800298e:	b100      	cbz	r0, 8002992 <SystemClock_Config+0x4e>
 8002990:	e7fe      	b.n	8002990 <SystemClock_Config+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8002992:	f244 0302 	movw	r3, #16386	; 0x4002
 8002996:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800299c:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800299e:	9329      	str	r3, [sp, #164]	; 0xa4
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029a0:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80029a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80029a6:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80029a8:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80029aa:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80029ac:	971b      	str	r7, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80029ae:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80029b0:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80029b2:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029b4:	f7fe ff72 	bl	800189c <HAL_RCCEx_PeriphCLKConfig>
 80029b8:	b100      	cbz	r0, 80029bc <SystemClock_Config+0x78>
 80029ba:	e7fe      	b.n	80029ba <SystemClock_Config+0x76>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80029bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029c0:	f7fe fa3e 	bl	8000e40 <HAL_PWREx_ControlVoltageScaling>
 80029c4:	4604      	mov	r4, r0
 80029c6:	b100      	cbz	r0, 80029ca <SystemClock_Config+0x86>
 80029c8:	e7fe      	b.n	80029c8 <SystemClock_Config+0x84>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80029ca:	f7fe fe79 	bl	80016c0 <HAL_RCC_GetHCLKFreq>
 80029ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029d6:	f7fe f93b 	bl	8000c50 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80029da:	2004      	movs	r0, #4
 80029dc:	f7fe f94e 	bl	8000c7c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029e0:	4622      	mov	r2, r4
 80029e2:	4621      	mov	r1, r4
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f7fe f8fe 	bl	8000be8 <HAL_NVIC_SetPriority>
}
 80029ec:	b02d      	add	sp, #180	; 0xb4
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029f0 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 80029f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029f4:	b098      	sub	sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029f6:	f7fd fde3 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029fa:	f7ff ffa3 	bl	8002944 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	4b79      	ldr	r3, [pc, #484]	; (8002be4 <main+0x1f4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a00:	4879      	ldr	r0, [pc, #484]	; (8002be8 <main+0x1f8>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a04:	f042 0204 	orr.w	r2, r2, #4
 8002a08:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a0c:	f002 0204 	and.w	r2, r2, #4
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1e:	f002 0201 	and.w	r2, r2, #1
 8002a22:	9201      	str	r2, [sp, #4]
 8002a24:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a28:	f042 0202 	orr.w	r2, r2, #2
 8002a2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a30:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a34:	2200      	movs	r2, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a36:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a38:	2108      	movs	r1, #8

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3a:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a40:	f7fe f9f0 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8002a44:	2342      	movs	r3, #66	; 0x42
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a46:	a90d      	add	r1, sp, #52	; 0x34
 8002a48:	4867      	ldr	r0, [pc, #412]	; (8002be8 <main+0x1f8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8002a4a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4e:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a50:	2608      	movs	r6, #8

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a52:	f7fe f925 	bl	8000ca0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	a90d      	add	r1, sp, #52	; 0x34
 8002a58:	4863      	ldr	r0, [pc, #396]	; (8002be8 <main+0x1f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a5a:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5c:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a62:	f7fe f91d 	bl	8000ca0 <HAL_GPIO_Init>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002a66:	4861      	ldr	r0, [pc, #388]	; (8002bec <main+0x1fc>)
  huart2.Init.BaudRate = 9600;
 8002a68:	4961      	ldr	r1, [pc, #388]	; (8002bf0 <main+0x200>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6a:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
 8002a6c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a70:	250c      	movs	r5, #12
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
 8002a72:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a76:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a78:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a7a:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7e:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a80:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a82:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a84:	f7ff fdcf 	bl	8002626 <HAL_UART_Init>
 8002a88:	b100      	cbz	r0, 8002a8c <main+0x9c>
 8002a8a:	e7fe      	b.n	8002a8a <main+0x9a>

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8002a8c:	4c59      	ldr	r4, [pc, #356]	; (8002bf4 <main+0x204>)
 8002a8e:	4b5a      	ldr	r3, [pc, #360]	; (8002bf8 <main+0x208>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a90:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a92:	60a0      	str	r0, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a94:	60e0      	str	r0, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a96:	6120      	str	r0, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a98:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a9c:	61a0      	str	r0, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a9e:	61e0      	str	r0, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002aa0:	6260      	str	r0, [r4, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002aa2:	6320      	str	r0, [r4, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002aa4:	6360      	str	r0, [r4, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002aa6:	63a0      	str	r0, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002aa8:	63e0      	str	r0, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aaa:	4620      	mov	r0, r4

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8002aac:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002aae:	f8c4 8014 	str.w	r8, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8002ab2:	6227      	str	r7, [r4, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 1;
 8002ab4:	62a7      	str	r7, [r4, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ab6:	62e7      	str	r7, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ab8:	f7fd fdaa 	bl	8000610 <HAL_ADC_Init>
 8002abc:	b100      	cbz	r0, 8002ac0 <main+0xd0>
 8002abe:	e7fe      	b.n	8002abe <main+0xce>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 8002ac0:	2305      	movs	r3, #5
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ac2:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ac4:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ac6:	9011      	str	r0, [sp, #68]	; 0x44
  sConfig.Offset = 0;
 8002ac8:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002aca:	a90d      	add	r1, sp, #52	; 0x34
 8002acc:	4620      	mov	r0, r4
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 8002ace:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = 1;
 8002ad0:	970e      	str	r7, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ad2:	f7fd fe7d 	bl	80007d0 <HAL_ADC_ConfigChannel>
 8002ad6:	b100      	cbz	r0, 8002ada <main+0xea>
 8002ad8:	e7fe      	b.n	8002ad8 <main+0xe8>

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8002ada:	4c48      	ldr	r4, [pc, #288]	; (8002bfc <main+0x20c>)
  htim1.Init.Prescaler = 15;
 8002adc:	4a48      	ldr	r2, [pc, #288]	; (8002c00 <main+0x210>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ade:	60a0      	str	r0, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 15;
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	e884 000c 	stmia.w	r4, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 200;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae6:	6120      	str	r0, [r4, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 15;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 200;
 8002ae8:	23c8      	movs	r3, #200	; 0xc8
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
 8002aea:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002aec:	4620      	mov	r0, r4
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 15;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 200;
 8002aee:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002af0:	f7ff f944 	bl	8001d7c <HAL_TIM_PWM_Init>
 8002af4:	4627      	mov	r7, r4
 8002af6:	b100      	cbz	r0, 8002afa <main+0x10a>
 8002af8:	e7fe      	b.n	8002af8 <main+0x108>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afa:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002afc:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afe:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b00:	a903      	add	r1, sp, #12
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7ff fa94 	bl	8002030 <HAL_TIMEx_MasterConfigSynchronization>
 8002b08:	b100      	cbz	r0, 8002b0c <main+0x11c>
 8002b0a:	e7fe      	b.n	8002b0a <main+0x11a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b0c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002b0e:	9007      	str	r0, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b10:	9008      	str	r0, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b12:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b14:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b16:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b18:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b1a:	4642      	mov	r2, r8
 8002b1c:	a906      	add	r1, sp, #24
 8002b1e:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b20:	9306      	str	r3, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b22:	f7ff f97f 	bl	8001e24 <HAL_TIM_PWM_ConfigChannel>
 8002b26:	b100      	cbz	r0, 8002b2a <main+0x13a>
 8002b28:	e7fe      	b.n	8002b28 <main+0x138>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b2a:	4632      	mov	r2, r6
 8002b2c:	a906      	add	r1, sp, #24
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff f978 	bl	8001e24 <HAL_TIM_PWM_ConfigChannel>
 8002b34:	b100      	cbz	r0, 8002b38 <main+0x148>
 8002b36:	e7fe      	b.n	8002b36 <main+0x146>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b38:	462a      	mov	r2, r5
 8002b3a:	a906      	add	r1, sp, #24
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7ff f971 	bl	8001e24 <HAL_TIM_PWM_ConfigChannel>
 8002b42:	b100      	cbz	r0, 8002b46 <main+0x156>
 8002b44:	e7fe      	b.n	8002b44 <main+0x154>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b4a:	900d      	str	r0, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b4c:	900e      	str	r0, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b4e:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b50:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b52:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b54:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b56:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b58:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b5e:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b60:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b62:	a90d      	add	r1, sp, #52	; 0x34
 8002b64:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b66:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b68:	f7ff fa84 	bl	8002074 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	b100      	cbz	r0, 8002b72 <main+0x182>
 8002b70:	e7fe      	b.n	8002b70 <main+0x180>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_TIM_MspPostInit(&htim1);
 8002b72:	4638      	mov	r0, r7
 8002b74:	f000 f8c8 	bl	8002d08 <HAL_TIM_MspPostInit>
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_TIM1_Init();

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002b78:	4641      	mov	r1, r8
 8002b7a:	4638      	mov	r0, r7
 8002b7c:	f7ff f9e6 	bl	8001f4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002b80:	4631      	mov	r1, r6
 8002b82:	4638      	mov	r0, r7
 8002b84:	f7ff f9e2 	bl	8001f4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8002b88:	4629      	mov	r1, r5
 8002b8a:	4638      	mov	r0, r7
 8002b8c:	f7ff f9de 	bl	8001f4c <HAL_TIM_PWM_Start>
  printf("ADC code\r\n");
 8002b90:	481c      	ldr	r0, [pc, #112]	; (8002c04 <main+0x214>)
 8002b92:	f000 fa1b 	bl	8002fcc <puts>
  HD44780_Init();
 8002b96:	f7ff fe1d 	bl	80027d4 <HD44780_Init>
  HD44780_PutStr("Hello World");
 8002b9a:	481b      	ldr	r0, [pc, #108]	; (8002c08 <main+0x218>)
 8002b9c:	f7ff fe72 	bl	8002884 <HD44780_PutStr>

  int32_t	freq = 440;
  int32_t	pwmPeriod = 1000000000/(freq * 250);  //value can vary between 2 and 65535

  setPWMandTurnON(&htim1, pwmPeriod);
 8002ba0:	f242 3182 	movw	r1, #9090	; 0x2382
 8002ba4:	4638      	mov	r0, r7
 8002ba6:	f7ff fe7f 	bl	80028a8 <setPWMandTurnON>

  __IO uint16_t uhADCxConvertedValue = 0; //_IO is a macro
 8002baa:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
	{

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		sw1=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6);
 8002bae:	2140      	movs	r1, #64	; 0x40
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <main+0x1f8>)
 8002bb2:	f7fe f931 	bl	8000e18 <HAL_GPIO_ReadPin>
		sw2=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1);
 8002bb6:	2102      	movs	r1, #2
	{

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		sw1=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6);
 8002bb8:	4604      	mov	r4, r0
		sw2=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1);
 8002bba:	480b      	ldr	r0, [pc, #44]	; (8002be8 <main+0x1f8>)
 8002bbc:	f7fe f92c 	bl	8000e18 <HAL_GPIO_ReadPin>
//		}
//		printf("ADC 12bit Value: %X\r\n", uhADCxConvertedValue);
//		HAL_Delay(100);
//
		if(sw1){
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,200);
 8002bc0:	683b      	ldr	r3, [r7, #0]
//			uhADCxConvertedValue = HAL_ADC_GetValue(&hadc1);
//		}
//		printf("ADC 12bit Value: %X\r\n", uhADCxConvertedValue);
//		HAL_Delay(100);
//
		if(sw1){
 8002bc2:	b124      	cbz	r4, 8002bce <main+0x1de>
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,200);
 8002bc4:	22c8      	movs	r2, #200	; 0xc8
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,0);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bcc:	e003      	b.n	8002bd6 <main+0x1e6>
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,0);
		}
		else if(sw2){
 8002bce:	b120      	cbz	r0, 8002bda <main+0x1ea>
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,0);
 8002bd0:	639c      	str	r4, [r3, #56]	; 0x38
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,0);
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,200);
 8002bd2:	22c8      	movs	r2, #200	; 0xc8
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,0);
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,0);
		}
		else if(sw2){
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,0);
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,0);
 8002bd4:	63dc      	str	r4, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,200);
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
 8002bd8:	e7e9      	b.n	8002bae <main+0x1be>
		}
		else{
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2,100);
 8002bda:	2264      	movs	r2, #100	; 0x64
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3,100);
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,0);
 8002be0:	6418      	str	r0, [r3, #64]	; 0x40
 8002be2:	e7e4      	b.n	8002bae <main+0x1be>
 8002be4:	40021000 	.word	0x40021000
 8002be8:	48000400 	.word	0x48000400
 8002bec:	20000604 	.word	0x20000604
 8002bf0:	40004400 	.word	0x40004400
 8002bf4:	20000560 	.word	0x20000560
 8002bf8:	50040000 	.word	0x50040000
 8002bfc:	200005c8 	.word	0x200005c8
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	0800438d 	.word	0x0800438d
 8002c08:	08004397 	.word	0x08004397

08002c0c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002c0c:	e7fe      	b.n	8002c0c <_Error_Handler>
	...

08002c10 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c12:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	661a      	str	r2, [r3, #96]	; 0x60
 8002c1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c1e:	f002 0201 	and.w	r2, r2, #1
 8002c22:	9200      	str	r2, [sp, #0]
 8002c24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c2c:	659a      	str	r2, [r3, #88]	; 0x58
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c36:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c38:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3a:	f7fd ffc3 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	4611      	mov	r1, r2
 8002c42:	f06f 000b 	mvn.w	r0, #11
 8002c46:	f7fd ffcf 	bl	8000be8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	f06f 000a 	mvn.w	r0, #10
 8002c52:	f7fd ffc9 	bl	8000be8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	4611      	mov	r1, r2
 8002c5a:	f06f 0009 	mvn.w	r0, #9
 8002c5e:	f7fd ffc3 	bl	8000be8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	4611      	mov	r1, r2
 8002c66:	f06f 0004 	mvn.w	r0, #4
 8002c6a:	f7fd ffbd 	bl	8000be8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4611      	mov	r1, r2
 8002c72:	f06f 0003 	mvn.w	r0, #3
 8002c76:	f7fd ffb7 	bl	8000be8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	f06f 0001 	mvn.w	r0, #1
 8002c82:	f7fd ffb1 	bl	8000be8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	4611      	mov	r1, r2
 8002c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8e:	f7fd ffab 	bl	8000be8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c92:	b003      	add	sp, #12
 8002c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c98:	40021000 	.word	0x40021000

08002c9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002c9e:	6802      	ldr	r2, [r0, #0]
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_ADC_MspInit+0x40>)
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d117      	bne.n	8002cd6 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002ca6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002caa:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002cc6:	230b      	movs	r3, #11
 8002cc8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f7fd ffe5 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cd6:	b007      	add	sp, #28
 8002cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cdc:	50040000 	.word	0x50040000

08002ce0 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8002ce0:	6802      	ldr	r2, [r0, #0]
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_TIM_PWM_MspInit+0x24>)
 8002ce4:	429a      	cmp	r2, r3
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ce6:	b082      	sub	sp, #8

  if(htim_pwm->Instance==TIM1)
 8002ce8:	d10a      	bne.n	8002d00 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cea:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002cee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cf4:	661a      	str	r2, [r3, #96]	; 0x60
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d00:	b002      	add	sp, #8
 8002d02:	4770      	bx	lr
 8002d04:	40012c00 	.word	0x40012c00

08002d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8002d0a:	6802      	ldr	r2, [r0, #0]
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_TIM_MspPostInit+0x30>)
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_MspPostInit+0x28>
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002d12:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002d16:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d24:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d2a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2c:	f7fd ffb8 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d30:	b007      	add	sp, #28
 8002d32:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d36:	bf00      	nop
 8002d38:	40012c00 	.word	0x40012c00

08002d3c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d3c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002d3e:	6802      	ldr	r2, [r0, #0]
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_UART_MspInit+0x5c>)
 8002d42:	429a      	cmp	r2, r3
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d44:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002d46:	d125      	bne.n	8002d94 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d48:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d50:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d54:	659a      	str	r2, [r3, #88]	; 0x58
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d58:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002d62:	2304      	movs	r3, #4
 8002d64:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d68:	2307      	movs	r3, #7
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d6a:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d6c:	a901      	add	r1, sp, #4
 8002d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d72:	9305      	str	r3, [sp, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d76:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d78:	f7fd ff92 	bl	8000ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	a901      	add	r1, sp, #4
 8002d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d86:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002d8e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d90:	f7fd ff86 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d94:	b006      	add	sp, #24
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	40004400 	.word	0x40004400

08002d9c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d9e:	f7fd fc1b 	bl	80005d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8002da6:	f7fd bf76 	b.w	8000c96 <HAL_SYSTICK_IRQHandler>
	...

08002dac <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002dac:	b510      	push	{r4, lr}
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8002dae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002db2:	4614      	mov	r4, r2
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8002db4:	4806      	ldr	r0, [pc, #24]	; (8002dd0 <_write+0x24>)
 8002db6:	b292      	uxth	r2, r2
 8002db8:	f7ff fb39 	bl	800242e <HAL_UART_Transmit>
	if(result == HAL_ERROR|| result == HAL_BUSY)
 8002dbc:	3801      	subs	r0, #1
 8002dbe:	b2c0      	uxtb	r0, r0
 8002dc0:	2801      	cmp	r0, #1
 8002dc2:	d803      	bhi.n	8002dcc <_write+0x20>
	{
		Error_Handler();
 8002dc4:	2156      	movs	r1, #86	; 0x56
 8002dc6:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <_write+0x28>)
 8002dc8:	f7ff ff20 	bl	8002c0c <_Error_Handler>
	}
	return len;
}
 8002dcc:	4620      	mov	r0, r4
 8002dce:	bd10      	pop	{r4, pc}
 8002dd0:	20000604 	.word	0x20000604
 8002dd4:	080043a3 	.word	0x080043a3

08002dd8 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <_sbrk+0x14>)
 8002dda:	6819      	ldr	r1, [r3, #0]
	}
	return len;
}

void * _sbrk(int32_t incr)
{
 8002ddc:	4602      	mov	r2, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002dde:	b909      	cbnz	r1, 8002de4 <_sbrk+0xc>
		heap_end = & end;
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <_sbrk+0x18>)
 8002de2:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8002de4:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8002de6:	4402      	add	r2, r0
 8002de8:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 8002dea:	4770      	bx	lr
 8002dec:	20000524 	.word	0x20000524
 8002df0:	20000678 	.word	0x20000678

08002df4 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <_close+0xc>)
 8002df6:	2258      	movs	r2, #88	; 0x58
 8002df8:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfe:	4770      	bx	lr
 8002e00:	20000674 	.word	0x20000674

08002e04 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <_fstat+0xc>)
 8002e06:	2258      	movs	r2, #88	; 0x58
 8002e08:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0e:	4770      	bx	lr
 8002e10:	20000674 	.word	0x20000674

08002e14 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8002e14:	4b02      	ldr	r3, [pc, #8]	; (8002e20 <_isatty+0xc>)
 8002e16:	2258      	movs	r2, #88	; 0x58
 8002e18:	601a      	str	r2, [r3, #0]
	return 0;
}
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000674 	.word	0x20000674

08002e24 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8002e24:	4b02      	ldr	r3, [pc, #8]	; (8002e30 <_lseek+0xc>)
 8002e26:	2258      	movs	r2, #88	; 0x58
 8002e28:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2e:	4770      	bx	lr
 8002e30:	20000674 	.word	0x20000674

08002e34 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8002e34:	b508      	push	{r3, lr}
	HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 8002e36:	2201      	movs	r2, #1
 8002e38:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <_read+0x14>)
 8002e3e:	f7ff fb50 	bl	80024e2 <HAL_UART_Receive>
	return 1;
}
 8002e42:	2001      	movs	r0, #1
 8002e44:	bd08      	pop	{r3, pc}
 8002e46:	bf00      	nop
 8002e48:	20000604 	.word	0x20000604

08002e4c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e4c:	490f      	ldr	r1, [pc, #60]	; (8002e8c <SystemInit+0x40>)
 8002e4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <SystemInit+0x44>)
 8002e5c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e5e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e66:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002e6e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002e72:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e78:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e80:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e82:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e88:	608b      	str	r3, [r1, #8]
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00
 8002e90:	40021000 	.word	0x40021000

08002e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ecc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e9a:	e003      	b.n	8002ea4 <LoopCopyDataInit>

08002e9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002e9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ea0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ea2:	3104      	adds	r1, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ea4:	480b      	ldr	r0, [pc, #44]	; (8002ed4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ea8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002eaa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002eac:	d3f6      	bcc.n	8002e9c <CopyDataInit>
	ldr	r2, =_sbss
 8002eae:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002eb0:	e002      	b.n	8002eb8 <LoopFillZerobss>

08002eb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002eb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002eb4:	f842 3b04 	str.w	r3, [r2], #4

08002eb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <LoopForever+0x16>)
	cmp	r2, r3
 8002eba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ebc:	d3f9      	bcc.n	8002eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ebe:	f7ff ffc5 	bl	8002e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ec2:	f000 f811 	bl	8002ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ec6:	f7ff fd93 	bl	80029f0 <main>

08002eca <LoopForever>:

LoopForever:
    b LoopForever
 8002eca:	e7fe      	b.n	8002eca <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ecc:	2000c000 	.word	0x2000c000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8002ed0:	0800447c 	.word	0x0800447c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ed4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ed8:	20000508 	.word	0x20000508
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8002edc:	20000508 	.word	0x20000508
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ee0:	20000678 	.word	0x20000678

08002ee4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ee4:	e7fe      	b.n	8002ee4 <ADC1_IRQHandler>
	...

08002ee8 <__libc_init_array>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <__libc_init_array+0x3c>)
 8002eec:	4c0e      	ldr	r4, [pc, #56]	; (8002f28 <__libc_init_array+0x40>)
 8002eee:	1ae4      	subs	r4, r4, r3
 8002ef0:	10a4      	asrs	r4, r4, #2
 8002ef2:	2500      	movs	r5, #0
 8002ef4:	461e      	mov	r6, r3
 8002ef6:	42a5      	cmp	r5, r4
 8002ef8:	d004      	beq.n	8002f04 <__libc_init_array+0x1c>
 8002efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002efe:	4798      	blx	r3
 8002f00:	3501      	adds	r5, #1
 8002f02:	e7f8      	b.n	8002ef6 <__libc_init_array+0xe>
 8002f04:	f001 fa2e 	bl	8004364 <_init>
 8002f08:	4c08      	ldr	r4, [pc, #32]	; (8002f2c <__libc_init_array+0x44>)
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <__libc_init_array+0x48>)
 8002f0c:	1ae4      	subs	r4, r4, r3
 8002f0e:	10a4      	asrs	r4, r4, #2
 8002f10:	2500      	movs	r5, #0
 8002f12:	461e      	mov	r6, r3
 8002f14:	42a5      	cmp	r5, r4
 8002f16:	d004      	beq.n	8002f22 <__libc_init_array+0x3a>
 8002f18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f1c:	4798      	blx	r3
 8002f1e:	3501      	adds	r5, #1
 8002f20:	e7f8      	b.n	8002f14 <__libc_init_array+0x2c>
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	08004474 	.word	0x08004474
 8002f28:	08004474 	.word	0x08004474
 8002f2c:	08004478 	.word	0x08004478
 8002f30:	08004474 	.word	0x08004474

08002f34 <_puts_r>:
 8002f34:	b530      	push	{r4, r5, lr}
 8002f36:	4605      	mov	r5, r0
 8002f38:	b089      	sub	sp, #36	; 0x24
 8002f3a:	4608      	mov	r0, r1
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	f7fd f947 	bl	80001d0 <strlen>
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <_puts_r+0x88>)
 8002f44:	9306      	str	r3, [sp, #24]
 8002f46:	2301      	movs	r3, #1
 8002f48:	9005      	str	r0, [sp, #20]
 8002f4a:	9307      	str	r3, [sp, #28]
 8002f4c:	4418      	add	r0, r3
 8002f4e:	ab04      	add	r3, sp, #16
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	2302      	movs	r3, #2
 8002f54:	9404      	str	r4, [sp, #16]
 8002f56:	9003      	str	r0, [sp, #12]
 8002f58:	9302      	str	r3, [sp, #8]
 8002f5a:	b125      	cbz	r5, 8002f66 <_puts_r+0x32>
 8002f5c:	69ab      	ldr	r3, [r5, #24]
 8002f5e:	b913      	cbnz	r3, 8002f66 <_puts_r+0x32>
 8002f60:	4628      	mov	r0, r5
 8002f62:	f000 f87b 	bl	800305c <__sinit>
 8002f66:	69ab      	ldr	r3, [r5, #24]
 8002f68:	68ac      	ldr	r4, [r5, #8]
 8002f6a:	b913      	cbnz	r3, 8002f72 <_puts_r+0x3e>
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	f000 f875 	bl	800305c <__sinit>
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <_puts_r+0x8c>)
 8002f74:	429c      	cmp	r4, r3
 8002f76:	d101      	bne.n	8002f7c <_puts_r+0x48>
 8002f78:	686c      	ldr	r4, [r5, #4]
 8002f7a:	e008      	b.n	8002f8e <_puts_r+0x5a>
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <_puts_r+0x90>)
 8002f7e:	429c      	cmp	r4, r3
 8002f80:	d101      	bne.n	8002f86 <_puts_r+0x52>
 8002f82:	68ac      	ldr	r4, [r5, #8]
 8002f84:	e003      	b.n	8002f8e <_puts_r+0x5a>
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <_puts_r+0x94>)
 8002f88:	429c      	cmp	r4, r3
 8002f8a:	bf08      	it	eq
 8002f8c:	68ec      	ldreq	r4, [r5, #12]
 8002f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f92:	049a      	lsls	r2, r3, #18
 8002f94:	d406      	bmi.n	8002fa4 <_puts_r+0x70>
 8002f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa0:	81a3      	strh	r3, [r4, #12]
 8002fa2:	6662      	str	r2, [r4, #100]	; 0x64
 8002fa4:	aa01      	add	r2, sp, #4
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f000 f9dd 	bl	8003368 <__sfvwrite_r>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	f04f 30ff 	movne.w	r0, #4294967295
 8002fb6:	200a      	moveq	r0, #10
 8002fb8:	b009      	add	sp, #36	; 0x24
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	08004400 	.word	0x08004400
 8002fc0:	08004404 	.word	0x08004404
 8002fc4:	08004424 	.word	0x08004424
 8002fc8:	08004444 	.word	0x08004444

08002fcc <puts>:
 8002fcc:	4b02      	ldr	r3, [pc, #8]	; (8002fd8 <puts+0xc>)
 8002fce:	4601      	mov	r1, r0
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	f7ff bfaf 	b.w	8002f34 <_puts_r>
 8002fd6:	bf00      	nop
 8002fd8:	200000f4 	.word	0x200000f4

08002fdc <_cleanup_r>:
 8002fdc:	4901      	ldr	r1, [pc, #4]	; (8002fe4 <_cleanup_r+0x8>)
 8002fde:	f000 bb0d 	b.w	80035fc <_fwalk_reent>
 8002fe2:	bf00      	nop
 8002fe4:	08003ff1 	.word	0x08003ff1

08002fe8 <std.isra.0>:
 8002fe8:	2300      	movs	r3, #0
 8002fea:	b510      	push	{r4, lr}
 8002fec:	4604      	mov	r4, r0
 8002fee:	6003      	str	r3, [r0, #0]
 8002ff0:	6043      	str	r3, [r0, #4]
 8002ff2:	6083      	str	r3, [r0, #8]
 8002ff4:	8181      	strh	r1, [r0, #12]
 8002ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ff8:	81c2      	strh	r2, [r0, #14]
 8002ffa:	6103      	str	r3, [r0, #16]
 8002ffc:	6143      	str	r3, [r0, #20]
 8002ffe:	6183      	str	r3, [r0, #24]
 8003000:	4619      	mov	r1, r3
 8003002:	2208      	movs	r2, #8
 8003004:	305c      	adds	r0, #92	; 0x5c
 8003006:	f000 fd5d 	bl	8003ac4 <memset>
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <std.isra.0+0x38>)
 800300c:	6263      	str	r3, [r4, #36]	; 0x24
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <std.isra.0+0x3c>)
 8003010:	62a3      	str	r3, [r4, #40]	; 0x28
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <std.isra.0+0x40>)
 8003014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <std.isra.0+0x44>)
 8003018:	6224      	str	r4, [r4, #32]
 800301a:	6323      	str	r3, [r4, #48]	; 0x30
 800301c:	bd10      	pop	{r4, pc}
 800301e:	bf00      	nop
 8003020:	08003e49 	.word	0x08003e49
 8003024:	08003e6b 	.word	0x08003e6b
 8003028:	08003ea3 	.word	0x08003ea3
 800302c:	08003ec7 	.word	0x08003ec7

08003030 <__sfmoreglue>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	2368      	movs	r3, #104	; 0x68
 8003034:	1e4d      	subs	r5, r1, #1
 8003036:	435d      	muls	r5, r3
 8003038:	460e      	mov	r6, r1
 800303a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800303e:	f000 fafb 	bl	8003638 <_malloc_r>
 8003042:	4604      	mov	r4, r0
 8003044:	b140      	cbz	r0, 8003058 <__sfmoreglue+0x28>
 8003046:	2100      	movs	r1, #0
 8003048:	e880 0042 	stmia.w	r0, {r1, r6}
 800304c:	300c      	adds	r0, #12
 800304e:	60a0      	str	r0, [r4, #8]
 8003050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003054:	f000 fd36 	bl	8003ac4 <memset>
 8003058:	4620      	mov	r0, r4
 800305a:	bd70      	pop	{r4, r5, r6, pc}

0800305c <__sinit>:
 800305c:	6983      	ldr	r3, [r0, #24]
 800305e:	b510      	push	{r4, lr}
 8003060:	4604      	mov	r4, r0
 8003062:	bb4b      	cbnz	r3, 80030b8 <__sinit+0x5c>
 8003064:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8003068:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 800306c:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <__sinit+0x60>)
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <__sinit+0x64>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6282      	str	r2, [r0, #40]	; 0x28
 8003078:	4298      	cmp	r0, r3
 800307a:	bf04      	itt	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	6183      	streq	r3, [r0, #24]
 8003080:	f000 f820 	bl	80030c4 <__sfp>
 8003084:	6060      	str	r0, [r4, #4]
 8003086:	4620      	mov	r0, r4
 8003088:	f000 f81c 	bl	80030c4 <__sfp>
 800308c:	60a0      	str	r0, [r4, #8]
 800308e:	4620      	mov	r0, r4
 8003090:	f000 f818 	bl	80030c4 <__sfp>
 8003094:	2200      	movs	r2, #0
 8003096:	60e0      	str	r0, [r4, #12]
 8003098:	2104      	movs	r1, #4
 800309a:	6860      	ldr	r0, [r4, #4]
 800309c:	f7ff ffa4 	bl	8002fe8 <std.isra.0>
 80030a0:	2201      	movs	r2, #1
 80030a2:	2109      	movs	r1, #9
 80030a4:	68a0      	ldr	r0, [r4, #8]
 80030a6:	f7ff ff9f 	bl	8002fe8 <std.isra.0>
 80030aa:	2202      	movs	r2, #2
 80030ac:	2112      	movs	r1, #18
 80030ae:	68e0      	ldr	r0, [r4, #12]
 80030b0:	f7ff ff9a 	bl	8002fe8 <std.isra.0>
 80030b4:	2301      	movs	r3, #1
 80030b6:	61a3      	str	r3, [r4, #24]
 80030b8:	bd10      	pop	{r4, pc}
 80030ba:	bf00      	nop
 80030bc:	08004468 	.word	0x08004468
 80030c0:	08002fdd 	.word	0x08002fdd

080030c4 <__sfp>:
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <__sfp+0x74>)
 80030c8:	681e      	ldr	r6, [r3, #0]
 80030ca:	69b3      	ldr	r3, [r6, #24]
 80030cc:	4607      	mov	r7, r0
 80030ce:	b913      	cbnz	r3, 80030d6 <__sfp+0x12>
 80030d0:	4630      	mov	r0, r6
 80030d2:	f7ff ffc3 	bl	800305c <__sinit>
 80030d6:	36d8      	adds	r6, #216	; 0xd8
 80030d8:	68b4      	ldr	r4, [r6, #8]
 80030da:	6873      	ldr	r3, [r6, #4]
 80030dc:	3b01      	subs	r3, #1
 80030de:	d404      	bmi.n	80030ea <__sfp+0x26>
 80030e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030e4:	b17d      	cbz	r5, 8003106 <__sfp+0x42>
 80030e6:	3468      	adds	r4, #104	; 0x68
 80030e8:	e7f8      	b.n	80030dc <__sfp+0x18>
 80030ea:	6833      	ldr	r3, [r6, #0]
 80030ec:	b10b      	cbz	r3, 80030f2 <__sfp+0x2e>
 80030ee:	6836      	ldr	r6, [r6, #0]
 80030f0:	e7f2      	b.n	80030d8 <__sfp+0x14>
 80030f2:	2104      	movs	r1, #4
 80030f4:	4638      	mov	r0, r7
 80030f6:	f7ff ff9b 	bl	8003030 <__sfmoreglue>
 80030fa:	6030      	str	r0, [r6, #0]
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d1f6      	bne.n	80030ee <__sfp+0x2a>
 8003100:	230c      	movs	r3, #12
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003106:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800310a:	81e3      	strh	r3, [r4, #14]
 800310c:	2301      	movs	r3, #1
 800310e:	81a3      	strh	r3, [r4, #12]
 8003110:	6665      	str	r5, [r4, #100]	; 0x64
 8003112:	6025      	str	r5, [r4, #0]
 8003114:	60a5      	str	r5, [r4, #8]
 8003116:	6065      	str	r5, [r4, #4]
 8003118:	6125      	str	r5, [r4, #16]
 800311a:	6165      	str	r5, [r4, #20]
 800311c:	61a5      	str	r5, [r4, #24]
 800311e:	2208      	movs	r2, #8
 8003120:	4629      	mov	r1, r5
 8003122:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003126:	f000 fccd 	bl	8003ac4 <memset>
 800312a:	6365      	str	r5, [r4, #52]	; 0x34
 800312c:	63a5      	str	r5, [r4, #56]	; 0x38
 800312e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003130:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003132:	4620      	mov	r0, r4
 8003134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003136:	bf00      	nop
 8003138:	08004468 	.word	0x08004468

0800313c <__sfp_lock_acquire>:
 800313c:	4770      	bx	lr

0800313e <__sfp_lock_release>:
 800313e:	4770      	bx	lr

08003140 <_malloc_trim_r>:
 8003140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003144:	4f25      	ldr	r7, [pc, #148]	; (80031dc <_malloc_trim_r+0x9c>)
 8003146:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80031e8 <_malloc_trim_r+0xa8>
 800314a:	4689      	mov	r9, r1
 800314c:	4606      	mov	r6, r0
 800314e:	f000 fcc1 	bl	8003ad4 <__malloc_lock>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	685d      	ldr	r5, [r3, #4]
 8003156:	f1a8 0411 	sub.w	r4, r8, #17
 800315a:	f025 0503 	bic.w	r5, r5, #3
 800315e:	442c      	add	r4, r5
 8003160:	ebc9 0404 	rsb	r4, r9, r4
 8003164:	fbb4 f4f8 	udiv	r4, r4, r8
 8003168:	3c01      	subs	r4, #1
 800316a:	fb08 f404 	mul.w	r4, r8, r4
 800316e:	4544      	cmp	r4, r8
 8003170:	da05      	bge.n	800317e <_malloc_trim_r+0x3e>
 8003172:	4630      	mov	r0, r6
 8003174:	f000 fcaf 	bl	8003ad6 <__malloc_unlock>
 8003178:	2000      	movs	r0, #0
 800317a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800317e:	2100      	movs	r1, #0
 8003180:	4630      	mov	r0, r6
 8003182:	f000 fe51 	bl	8003e28 <_sbrk_r>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	442b      	add	r3, r5
 800318a:	4298      	cmp	r0, r3
 800318c:	d1f1      	bne.n	8003172 <_malloc_trim_r+0x32>
 800318e:	4261      	negs	r1, r4
 8003190:	4630      	mov	r0, r6
 8003192:	f000 fe49 	bl	8003e28 <_sbrk_r>
 8003196:	3001      	adds	r0, #1
 8003198:	d110      	bne.n	80031bc <_malloc_trim_r+0x7c>
 800319a:	2100      	movs	r1, #0
 800319c:	4630      	mov	r0, r6
 800319e:	f000 fe43 	bl	8003e28 <_sbrk_r>
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	1a83      	subs	r3, r0, r2
 80031a6:	2b0f      	cmp	r3, #15
 80031a8:	dde3      	ble.n	8003172 <_malloc_trim_r+0x32>
 80031aa:	490d      	ldr	r1, [pc, #52]	; (80031e0 <_malloc_trim_r+0xa0>)
 80031ac:	6809      	ldr	r1, [r1, #0]
 80031ae:	1a40      	subs	r0, r0, r1
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <_malloc_trim_r+0xa4>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6008      	str	r0, [r1, #0]
 80031b8:	6053      	str	r3, [r2, #4]
 80031ba:	e7da      	b.n	8003172 <_malloc_trim_r+0x32>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <_malloc_trim_r+0xa4>)
 80031c0:	1b2d      	subs	r5, r5, r4
 80031c2:	f045 0501 	orr.w	r5, r5, #1
 80031c6:	605d      	str	r5, [r3, #4]
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	4630      	mov	r0, r6
 80031cc:	1b1c      	subs	r4, r3, r4
 80031ce:	6014      	str	r4, [r2, #0]
 80031d0:	f000 fc81 	bl	8003ad6 <__malloc_unlock>
 80031d4:	2001      	movs	r0, #1
 80031d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031da:	bf00      	nop
 80031dc:	200000f8 	.word	0x200000f8
 80031e0:	20000504 	.word	0x20000504
 80031e4:	20000534 	.word	0x20000534
 80031e8:	00000080 	.word	0x00000080

080031ec <_free_r>:
 80031ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f0:	4604      	mov	r4, r0
 80031f2:	4688      	mov	r8, r1
 80031f4:	2900      	cmp	r1, #0
 80031f6:	f000 80ad 	beq.w	8003354 <_free_r+0x168>
 80031fa:	f000 fc6b 	bl	8003ad4 <__malloc_lock>
 80031fe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8003202:	4d55      	ldr	r5, [pc, #340]	; (8003358 <_free_r+0x16c>)
 8003204:	f022 0001 	bic.w	r0, r2, #1
 8003208:	f1a8 0308 	sub.w	r3, r8, #8
 800320c:	181f      	adds	r7, r3, r0
 800320e:	68a9      	ldr	r1, [r5, #8]
 8003210:	687e      	ldr	r6, [r7, #4]
 8003212:	428f      	cmp	r7, r1
 8003214:	f026 0603 	bic.w	r6, r6, #3
 8003218:	f002 0201 	and.w	r2, r2, #1
 800321c:	d11b      	bne.n	8003256 <_free_r+0x6a>
 800321e:	4430      	add	r0, r6
 8003220:	b93a      	cbnz	r2, 8003232 <_free_r+0x46>
 8003222:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	4410      	add	r0, r2
 800322a:	6899      	ldr	r1, [r3, #8]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	60ca      	str	r2, [r1, #12]
 8003230:	6091      	str	r1, [r2, #8]
 8003232:	f040 0201 	orr.w	r2, r0, #1
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	60ab      	str	r3, [r5, #8]
 800323a:	4b48      	ldr	r3, [pc, #288]	; (800335c <_free_r+0x170>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4298      	cmp	r0, r3
 8003240:	d304      	bcc.n	800324c <_free_r+0x60>
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <_free_r+0x174>)
 8003244:	4620      	mov	r0, r4
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	f7ff ff7a 	bl	8003140 <_malloc_trim_r>
 800324c:	4620      	mov	r0, r4
 800324e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003252:	f000 bc40 	b.w	8003ad6 <__malloc_unlock>
 8003256:	607e      	str	r6, [r7, #4]
 8003258:	b97a      	cbnz	r2, 800327a <_free_r+0x8e>
 800325a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800325e:	1a5b      	subs	r3, r3, r1
 8003260:	4408      	add	r0, r1
 8003262:	6899      	ldr	r1, [r3, #8]
 8003264:	f105 0e08 	add.w	lr, r5, #8
 8003268:	4571      	cmp	r1, lr
 800326a:	d008      	beq.n	800327e <_free_r+0x92>
 800326c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8003270:	f8c1 e00c 	str.w	lr, [r1, #12]
 8003274:	f8ce 1008 	str.w	r1, [lr, #8]
 8003278:	e002      	b.n	8003280 <_free_r+0x94>
 800327a:	2200      	movs	r2, #0
 800327c:	e000      	b.n	8003280 <_free_r+0x94>
 800327e:	2201      	movs	r2, #1
 8003280:	19b9      	adds	r1, r7, r6
 8003282:	6849      	ldr	r1, [r1, #4]
 8003284:	07c9      	lsls	r1, r1, #31
 8003286:	d40e      	bmi.n	80032a6 <_free_r+0xba>
 8003288:	4430      	add	r0, r6
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	b942      	cbnz	r2, 80032a0 <_free_r+0xb4>
 800328e:	4e35      	ldr	r6, [pc, #212]	; (8003364 <_free_r+0x178>)
 8003290:	42b1      	cmp	r1, r6
 8003292:	d105      	bne.n	80032a0 <_free_r+0xb4>
 8003294:	616b      	str	r3, [r5, #20]
 8003296:	612b      	str	r3, [r5, #16]
 8003298:	2201      	movs	r2, #1
 800329a:	60d9      	str	r1, [r3, #12]
 800329c:	6099      	str	r1, [r3, #8]
 800329e:	e002      	b.n	80032a6 <_free_r+0xba>
 80032a0:	68fe      	ldr	r6, [r7, #12]
 80032a2:	60ce      	str	r6, [r1, #12]
 80032a4:	60b1      	str	r1, [r6, #8]
 80032a6:	f040 0101 	orr.w	r1, r0, #1
 80032aa:	6059      	str	r1, [r3, #4]
 80032ac:	5018      	str	r0, [r3, r0]
 80032ae:	2a00      	cmp	r2, #0
 80032b0:	d1cc      	bne.n	800324c <_free_r+0x60>
 80032b2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80032b6:	d212      	bcs.n	80032de <_free_r+0xf2>
 80032b8:	08c0      	lsrs	r0, r0, #3
 80032ba:	1081      	asrs	r1, r0, #2
 80032bc:	2201      	movs	r2, #1
 80032be:	fa02 f101 	lsl.w	r1, r2, r1
 80032c2:	686a      	ldr	r2, [r5, #4]
 80032c4:	3001      	adds	r0, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	606a      	str	r2, [r5, #4]
 80032ca:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80032ce:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80032d2:	6099      	str	r1, [r3, #8]
 80032d4:	3a08      	subs	r2, #8
 80032d6:	60da      	str	r2, [r3, #12]
 80032d8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80032dc:	e038      	b.n	8003350 <_free_r+0x164>
 80032de:	0a42      	lsrs	r2, r0, #9
 80032e0:	2a04      	cmp	r2, #4
 80032e2:	d802      	bhi.n	80032ea <_free_r+0xfe>
 80032e4:	0982      	lsrs	r2, r0, #6
 80032e6:	3238      	adds	r2, #56	; 0x38
 80032e8:	e015      	b.n	8003316 <_free_r+0x12a>
 80032ea:	2a14      	cmp	r2, #20
 80032ec:	d801      	bhi.n	80032f2 <_free_r+0x106>
 80032ee:	325b      	adds	r2, #91	; 0x5b
 80032f0:	e011      	b.n	8003316 <_free_r+0x12a>
 80032f2:	2a54      	cmp	r2, #84	; 0x54
 80032f4:	d802      	bhi.n	80032fc <_free_r+0x110>
 80032f6:	0b02      	lsrs	r2, r0, #12
 80032f8:	326e      	adds	r2, #110	; 0x6e
 80032fa:	e00c      	b.n	8003316 <_free_r+0x12a>
 80032fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003300:	d802      	bhi.n	8003308 <_free_r+0x11c>
 8003302:	0bc2      	lsrs	r2, r0, #15
 8003304:	3277      	adds	r2, #119	; 0x77
 8003306:	e006      	b.n	8003316 <_free_r+0x12a>
 8003308:	f240 5154 	movw	r1, #1364	; 0x554
 800330c:	428a      	cmp	r2, r1
 800330e:	bf9a      	itte	ls
 8003310:	0c82      	lsrls	r2, r0, #18
 8003312:	327c      	addls	r2, #124	; 0x7c
 8003314:	227e      	movhi	r2, #126	; 0x7e
 8003316:	1c51      	adds	r1, r2, #1
 8003318:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800331c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8003320:	4f0d      	ldr	r7, [pc, #52]	; (8003358 <_free_r+0x16c>)
 8003322:	428e      	cmp	r6, r1
 8003324:	d10b      	bne.n	800333e <_free_r+0x152>
 8003326:	2101      	movs	r1, #1
 8003328:	1092      	asrs	r2, r2, #2
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4311      	orrs	r1, r2
 8003332:	6079      	str	r1, [r7, #4]
 8003334:	4631      	mov	r1, r6
 8003336:	e008      	b.n	800334a <_free_r+0x15e>
 8003338:	6889      	ldr	r1, [r1, #8]
 800333a:	428e      	cmp	r6, r1
 800333c:	d004      	beq.n	8003348 <_free_r+0x15c>
 800333e:	684a      	ldr	r2, [r1, #4]
 8003340:	f022 0203 	bic.w	r2, r2, #3
 8003344:	4290      	cmp	r0, r2
 8003346:	d3f7      	bcc.n	8003338 <_free_r+0x14c>
 8003348:	68ce      	ldr	r6, [r1, #12]
 800334a:	60de      	str	r6, [r3, #12]
 800334c:	6099      	str	r1, [r3, #8]
 800334e:	60b3      	str	r3, [r6, #8]
 8003350:	60cb      	str	r3, [r1, #12]
 8003352:	e77b      	b.n	800324c <_free_r+0x60>
 8003354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003358:	200000f8 	.word	0x200000f8
 800335c:	20000500 	.word	0x20000500
 8003360:	20000530 	.word	0x20000530
 8003364:	20000100 	.word	0x20000100

08003368 <__sfvwrite_r>:
 8003368:	6893      	ldr	r3, [r2, #8]
 800336a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336e:	4606      	mov	r6, r0
 8003370:	460c      	mov	r4, r1
 8003372:	4690      	mov	r8, r2
 8003374:	b90b      	cbnz	r3, 800337a <__sfvwrite_r+0x12>
 8003376:	2000      	movs	r0, #0
 8003378:	e13b      	b.n	80035f2 <__sfvwrite_r+0x28a>
 800337a:	898b      	ldrh	r3, [r1, #12]
 800337c:	0718      	lsls	r0, r3, #28
 800337e:	d50f      	bpl.n	80033a0 <__sfvwrite_r+0x38>
 8003380:	690b      	ldr	r3, [r1, #16]
 8003382:	b16b      	cbz	r3, 80033a0 <__sfvwrite_r+0x38>
 8003384:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 8003388:	f8d8 b000 	ldr.w	fp, [r8]
 800338c:	f009 0502 	and.w	r5, r9, #2
 8003390:	b2ad      	uxth	r5, r5
 8003392:	b355      	cbz	r5, 80033ea <__sfvwrite_r+0x82>
 8003394:	f04f 0900 	mov.w	r9, #0
 8003398:	464f      	mov	r7, r9
 800339a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80035f8 <__sfvwrite_r+0x290>
 800339e:	e01b      	b.n	80033d8 <__sfvwrite_r+0x70>
 80033a0:	4621      	mov	r1, r4
 80033a2:	4630      	mov	r0, r6
 80033a4:	f000 fda6 	bl	8003ef4 <__swsetup_r>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d0eb      	beq.n	8003384 <__sfvwrite_r+0x1c>
 80033ac:	e11f      	b.n	80035ee <__sfvwrite_r+0x286>
 80033ae:	4557      	cmp	r7, sl
 80033b0:	463b      	mov	r3, r7
 80033b2:	464a      	mov	r2, r9
 80033b4:	bf28      	it	cs
 80033b6:	4653      	movcs	r3, sl
 80033b8:	6a21      	ldr	r1, [r4, #32]
 80033ba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80033bc:	4630      	mov	r0, r6
 80033be:	47a8      	blx	r5
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f340 8110 	ble.w	80035e6 <__sfvwrite_r+0x27e>
 80033c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80033ca:	4481      	add	r9, r0
 80033cc:	1a3f      	subs	r7, r7, r0
 80033ce:	1a18      	subs	r0, r3, r0
 80033d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d0ce      	beq.n	8003376 <__sfvwrite_r+0xe>
 80033d8:	2f00      	cmp	r7, #0
 80033da:	d1e8      	bne.n	80033ae <__sfvwrite_r+0x46>
 80033dc:	f8db 9000 	ldr.w	r9, [fp]
 80033e0:	f8db 7004 	ldr.w	r7, [fp, #4]
 80033e4:	f10b 0b08 	add.w	fp, fp, #8
 80033e8:	e7f6      	b.n	80033d8 <__sfvwrite_r+0x70>
 80033ea:	f019 0901 	ands.w	r9, r9, #1
 80033ee:	d003      	beq.n	80033f8 <__sfvwrite_r+0x90>
 80033f0:	9500      	str	r5, [sp, #0]
 80033f2:	46a9      	mov	r9, r5
 80033f4:	46aa      	mov	sl, r5
 80033f6:	e0bd      	b.n	8003574 <__sfvwrite_r+0x20c>
 80033f8:	464f      	mov	r7, r9
 80033fa:	b937      	cbnz	r7, 800340a <__sfvwrite_r+0xa2>
 80033fc:	f8db 9000 	ldr.w	r9, [fp]
 8003400:	f8db 7004 	ldr.w	r7, [fp, #4]
 8003404:	f10b 0b08 	add.w	fp, fp, #8
 8003408:	e7f7      	b.n	80033fa <__sfvwrite_r+0x92>
 800340a:	89a2      	ldrh	r2, [r4, #12]
 800340c:	68a5      	ldr	r5, [r4, #8]
 800340e:	0591      	lsls	r1, r2, #22
 8003410:	d552      	bpl.n	80034b8 <__sfvwrite_r+0x150>
 8003412:	42af      	cmp	r7, r5
 8003414:	d342      	bcc.n	800349c <__sfvwrite_r+0x134>
 8003416:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800341a:	d03d      	beq.n	8003498 <__sfvwrite_r+0x130>
 800341c:	6921      	ldr	r1, [r4, #16]
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	1a5b      	subs	r3, r3, r1
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	6963      	ldr	r3, [r4, #20]
 8003426:	2002      	movs	r0, #2
 8003428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800342c:	fb93 faf0 	sdiv	sl, r3, r0
 8003430:	9b00      	ldr	r3, [sp, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	443b      	add	r3, r7
 8003436:	459a      	cmp	sl, r3
 8003438:	bf38      	it	cc
 800343a:	469a      	movcc	sl, r3
 800343c:	0553      	lsls	r3, r2, #21
 800343e:	d510      	bpl.n	8003462 <__sfvwrite_r+0xfa>
 8003440:	4651      	mov	r1, sl
 8003442:	4630      	mov	r0, r6
 8003444:	f000 f8f8 	bl	8003638 <_malloc_r>
 8003448:	4605      	mov	r5, r0
 800344a:	b1c0      	cbz	r0, 800347e <__sfvwrite_r+0x116>
 800344c:	9a00      	ldr	r2, [sp, #0]
 800344e:	6921      	ldr	r1, [r4, #16]
 8003450:	f000 fb12 	bl	8003a78 <memcpy>
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800345a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345e:	81a3      	strh	r3, [r4, #12]
 8003460:	e010      	b.n	8003484 <__sfvwrite_r+0x11c>
 8003462:	4652      	mov	r2, sl
 8003464:	4630      	mov	r0, r6
 8003466:	f000 fb37 	bl	8003ad8 <_realloc_r>
 800346a:	4605      	mov	r5, r0
 800346c:	b950      	cbnz	r0, 8003484 <__sfvwrite_r+0x11c>
 800346e:	6921      	ldr	r1, [r4, #16]
 8003470:	4630      	mov	r0, r6
 8003472:	f7ff febb 	bl	80031ec <_free_r>
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	230c      	movs	r3, #12
 8003480:	6033      	str	r3, [r6, #0]
 8003482:	e0b0      	b.n	80035e6 <__sfvwrite_r+0x27e>
 8003484:	9b00      	ldr	r3, [sp, #0]
 8003486:	6125      	str	r5, [r4, #16]
 8003488:	441d      	add	r5, r3
 800348a:	ebc3 030a 	rsb	r3, r3, sl
 800348e:	6025      	str	r5, [r4, #0]
 8003490:	f8c4 a014 	str.w	sl, [r4, #20]
 8003494:	463d      	mov	r5, r7
 8003496:	60a3      	str	r3, [r4, #8]
 8003498:	42af      	cmp	r7, r5
 800349a:	d200      	bcs.n	800349e <__sfvwrite_r+0x136>
 800349c:	463d      	mov	r5, r7
 800349e:	462a      	mov	r2, r5
 80034a0:	4649      	mov	r1, r9
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	f000 faf3 	bl	8003a8e <memmove>
 80034a8:	68a3      	ldr	r3, [r4, #8]
 80034aa:	1b5b      	subs	r3, r3, r5
 80034ac:	60a3      	str	r3, [r4, #8]
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	441d      	add	r5, r3
 80034b2:	6025      	str	r5, [r4, #0]
 80034b4:	463d      	mov	r5, r7
 80034b6:	e029      	b.n	800350c <__sfvwrite_r+0x1a4>
 80034b8:	6820      	ldr	r0, [r4, #0]
 80034ba:	6923      	ldr	r3, [r4, #16]
 80034bc:	4298      	cmp	r0, r3
 80034be:	d802      	bhi.n	80034c6 <__sfvwrite_r+0x15e>
 80034c0:	6962      	ldr	r2, [r4, #20]
 80034c2:	4297      	cmp	r7, r2
 80034c4:	d213      	bcs.n	80034ee <__sfvwrite_r+0x186>
 80034c6:	42bd      	cmp	r5, r7
 80034c8:	bf28      	it	cs
 80034ca:	463d      	movcs	r5, r7
 80034cc:	462a      	mov	r2, r5
 80034ce:	4649      	mov	r1, r9
 80034d0:	f000 fadd 	bl	8003a8e <memmove>
 80034d4:	68a3      	ldr	r3, [r4, #8]
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	1b5b      	subs	r3, r3, r5
 80034da:	442a      	add	r2, r5
 80034dc:	60a3      	str	r3, [r4, #8]
 80034de:	6022      	str	r2, [r4, #0]
 80034e0:	b9a3      	cbnz	r3, 800350c <__sfvwrite_r+0x1a4>
 80034e2:	4621      	mov	r1, r4
 80034e4:	4630      	mov	r0, r6
 80034e6:	f000 fe65 	bl	80041b4 <_fflush_r>
 80034ea:	b178      	cbz	r0, 800350c <__sfvwrite_r+0x1a4>
 80034ec:	e07b      	b.n	80035e6 <__sfvwrite_r+0x27e>
 80034ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80034f2:	42bb      	cmp	r3, r7
 80034f4:	bf28      	it	cs
 80034f6:	463b      	movcs	r3, r7
 80034f8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80034fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80034fe:	6a21      	ldr	r1, [r4, #32]
 8003500:	4353      	muls	r3, r2
 8003502:	4630      	mov	r0, r6
 8003504:	464a      	mov	r2, r9
 8003506:	47a8      	blx	r5
 8003508:	1e05      	subs	r5, r0, #0
 800350a:	dd6c      	ble.n	80035e6 <__sfvwrite_r+0x27e>
 800350c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003510:	44a9      	add	r9, r5
 8003512:	1b7f      	subs	r7, r7, r5
 8003514:	1b5d      	subs	r5, r3, r5
 8003516:	f8c8 5008 	str.w	r5, [r8, #8]
 800351a:	2d00      	cmp	r5, #0
 800351c:	f47f af6d 	bne.w	80033fa <__sfvwrite_r+0x92>
 8003520:	e729      	b.n	8003376 <__sfvwrite_r+0xe>
 8003522:	9b00      	ldr	r3, [sp, #0]
 8003524:	b383      	cbz	r3, 8003588 <__sfvwrite_r+0x220>
 8003526:	6820      	ldr	r0, [r4, #0]
 8003528:	6921      	ldr	r1, [r4, #16]
 800352a:	6962      	ldr	r2, [r4, #20]
 800352c:	4555      	cmp	r5, sl
 800352e:	462b      	mov	r3, r5
 8003530:	bf28      	it	cs
 8003532:	4653      	movcs	r3, sl
 8003534:	4288      	cmp	r0, r1
 8003536:	d936      	bls.n	80035a6 <__sfvwrite_r+0x23e>
 8003538:	68a7      	ldr	r7, [r4, #8]
 800353a:	4417      	add	r7, r2
 800353c:	42bb      	cmp	r3, r7
 800353e:	dd32      	ble.n	80035a6 <__sfvwrite_r+0x23e>
 8003540:	4649      	mov	r1, r9
 8003542:	463a      	mov	r2, r7
 8003544:	f000 faa3 	bl	8003a8e <memmove>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	443b      	add	r3, r7
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	4621      	mov	r1, r4
 8003550:	4630      	mov	r0, r6
 8003552:	f000 fe2f 	bl	80041b4 <_fflush_r>
 8003556:	2800      	cmp	r0, #0
 8003558:	d145      	bne.n	80035e6 <__sfvwrite_r+0x27e>
 800355a:	1bed      	subs	r5, r5, r7
 800355c:	d03c      	beq.n	80035d8 <__sfvwrite_r+0x270>
 800355e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003562:	44b9      	add	r9, r7
 8003564:	ebc7 0a0a 	rsb	sl, r7, sl
 8003568:	1bdf      	subs	r7, r3, r7
 800356a:	f8c8 7008 	str.w	r7, [r8, #8]
 800356e:	2f00      	cmp	r7, #0
 8003570:	f43f af01 	beq.w	8003376 <__sfvwrite_r+0xe>
 8003574:	f1ba 0f00 	cmp.w	sl, #0
 8003578:	d1d3      	bne.n	8003522 <__sfvwrite_r+0x1ba>
 800357a:	2300      	movs	r3, #0
 800357c:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	f10b 0b08 	add.w	fp, fp, #8
 8003586:	e7f5      	b.n	8003574 <__sfvwrite_r+0x20c>
 8003588:	4652      	mov	r2, sl
 800358a:	210a      	movs	r1, #10
 800358c:	4648      	mov	r0, r9
 800358e:	f7fc fe27 	bl	80001e0 <memchr>
 8003592:	b118      	cbz	r0, 800359c <__sfvwrite_r+0x234>
 8003594:	3001      	adds	r0, #1
 8003596:	ebc9 0500 	rsb	r5, r9, r0
 800359a:	e001      	b.n	80035a0 <__sfvwrite_r+0x238>
 800359c:	f10a 0501 	add.w	r5, sl, #1
 80035a0:	2301      	movs	r3, #1
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	e7bf      	b.n	8003526 <__sfvwrite_r+0x1be>
 80035a6:	4293      	cmp	r3, r2
 80035a8:	db08      	blt.n	80035bc <__sfvwrite_r+0x254>
 80035aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80035ac:	6a21      	ldr	r1, [r4, #32]
 80035ae:	4613      	mov	r3, r2
 80035b0:	4630      	mov	r0, r6
 80035b2:	464a      	mov	r2, r9
 80035b4:	47b8      	blx	r7
 80035b6:	1e07      	subs	r7, r0, #0
 80035b8:	dccf      	bgt.n	800355a <__sfvwrite_r+0x1f2>
 80035ba:	e014      	b.n	80035e6 <__sfvwrite_r+0x27e>
 80035bc:	461a      	mov	r2, r3
 80035be:	4649      	mov	r1, r9
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	f000 fa64 	bl	8003a8e <memmove>
 80035c6:	9b01      	ldr	r3, [sp, #4]
 80035c8:	68a2      	ldr	r2, [r4, #8]
 80035ca:	1ad2      	subs	r2, r2, r3
 80035cc:	60a2      	str	r2, [r4, #8]
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	441a      	add	r2, r3
 80035d2:	6022      	str	r2, [r4, #0]
 80035d4:	461f      	mov	r7, r3
 80035d6:	e7c0      	b.n	800355a <__sfvwrite_r+0x1f2>
 80035d8:	4621      	mov	r1, r4
 80035da:	4630      	mov	r0, r6
 80035dc:	f000 fdea 	bl	80041b4 <_fflush_r>
 80035e0:	b908      	cbnz	r0, 80035e6 <__sfvwrite_r+0x27e>
 80035e2:	9500      	str	r5, [sp, #0]
 80035e4:	e7bb      	b.n	800355e <__sfvwrite_r+0x1f6>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295
 80035f2:	b003      	add	sp, #12
 80035f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f8:	7ffffc00 	.word	0x7ffffc00

080035fc <_fwalk_reent>:
 80035fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003600:	4680      	mov	r8, r0
 8003602:	4689      	mov	r9, r1
 8003604:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8003608:	2600      	movs	r6, #0
 800360a:	b194      	cbz	r4, 8003632 <_fwalk_reent+0x36>
 800360c:	68a5      	ldr	r5, [r4, #8]
 800360e:	6867      	ldr	r7, [r4, #4]
 8003610:	3f01      	subs	r7, #1
 8003612:	d40c      	bmi.n	800362e <_fwalk_reent+0x32>
 8003614:	89ab      	ldrh	r3, [r5, #12]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d907      	bls.n	800362a <_fwalk_reent+0x2e>
 800361a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800361e:	3301      	adds	r3, #1
 8003620:	d003      	beq.n	800362a <_fwalk_reent+0x2e>
 8003622:	4629      	mov	r1, r5
 8003624:	4640      	mov	r0, r8
 8003626:	47c8      	blx	r9
 8003628:	4306      	orrs	r6, r0
 800362a:	3568      	adds	r5, #104	; 0x68
 800362c:	e7f0      	b.n	8003610 <_fwalk_reent+0x14>
 800362e:	6824      	ldr	r4, [r4, #0]
 8003630:	e7eb      	b.n	800360a <_fwalk_reent+0xe>
 8003632:	4630      	mov	r0, r6
 8003634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003638 <_malloc_r>:
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	f101 040b 	add.w	r4, r1, #11
 8003640:	2c16      	cmp	r4, #22
 8003642:	b085      	sub	sp, #20
 8003644:	4681      	mov	r9, r0
 8003646:	d903      	bls.n	8003650 <_malloc_r+0x18>
 8003648:	f034 0407 	bics.w	r4, r4, #7
 800364c:	d501      	bpl.n	8003652 <_malloc_r+0x1a>
 800364e:	e002      	b.n	8003656 <_malloc_r+0x1e>
 8003650:	2410      	movs	r4, #16
 8003652:	428c      	cmp	r4, r1
 8003654:	d203      	bcs.n	800365e <_malloc_r+0x26>
 8003656:	230c      	movs	r3, #12
 8003658:	f8c9 3000 	str.w	r3, [r9]
 800365c:	e1ea      	b.n	8003a34 <_malloc_r+0x3fc>
 800365e:	4648      	mov	r0, r9
 8003660:	f000 fa38 	bl	8003ad4 <__malloc_lock>
 8003664:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003668:	4d9e      	ldr	r5, [pc, #632]	; (80038e4 <_malloc_r+0x2ac>)
 800366a:	d217      	bcs.n	800369c <_malloc_r+0x64>
 800366c:	f104 0208 	add.w	r2, r4, #8
 8003670:	442a      	add	r2, r5
 8003672:	f1a2 0108 	sub.w	r1, r2, #8
 8003676:	6856      	ldr	r6, [r2, #4]
 8003678:	428e      	cmp	r6, r1
 800367a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800367e:	d102      	bne.n	8003686 <_malloc_r+0x4e>
 8003680:	68d6      	ldr	r6, [r2, #12]
 8003682:	42b2      	cmp	r2, r6
 8003684:	d008      	beq.n	8003698 <_malloc_r+0x60>
 8003686:	6873      	ldr	r3, [r6, #4]
 8003688:	68f2      	ldr	r2, [r6, #12]
 800368a:	68b1      	ldr	r1, [r6, #8]
 800368c:	f023 0303 	bic.w	r3, r3, #3
 8003690:	60ca      	str	r2, [r1, #12]
 8003692:	4433      	add	r3, r6
 8003694:	6091      	str	r1, [r2, #8]
 8003696:	e02f      	b.n	80036f8 <_malloc_r+0xc0>
 8003698:	3302      	adds	r3, #2
 800369a:	e03d      	b.n	8003718 <_malloc_r+0xe0>
 800369c:	0a63      	lsrs	r3, r4, #9
 800369e:	d01a      	beq.n	80036d6 <_malloc_r+0x9e>
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d802      	bhi.n	80036aa <_malloc_r+0x72>
 80036a4:	09a3      	lsrs	r3, r4, #6
 80036a6:	3338      	adds	r3, #56	; 0x38
 80036a8:	e018      	b.n	80036dc <_malloc_r+0xa4>
 80036aa:	2b14      	cmp	r3, #20
 80036ac:	d801      	bhi.n	80036b2 <_malloc_r+0x7a>
 80036ae:	335b      	adds	r3, #91	; 0x5b
 80036b0:	e014      	b.n	80036dc <_malloc_r+0xa4>
 80036b2:	2b54      	cmp	r3, #84	; 0x54
 80036b4:	d802      	bhi.n	80036bc <_malloc_r+0x84>
 80036b6:	0b23      	lsrs	r3, r4, #12
 80036b8:	336e      	adds	r3, #110	; 0x6e
 80036ba:	e00f      	b.n	80036dc <_malloc_r+0xa4>
 80036bc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80036c0:	d802      	bhi.n	80036c8 <_malloc_r+0x90>
 80036c2:	0be3      	lsrs	r3, r4, #15
 80036c4:	3377      	adds	r3, #119	; 0x77
 80036c6:	e009      	b.n	80036dc <_malloc_r+0xa4>
 80036c8:	f240 5254 	movw	r2, #1364	; 0x554
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d804      	bhi.n	80036da <_malloc_r+0xa2>
 80036d0:	0ca3      	lsrs	r3, r4, #18
 80036d2:	337c      	adds	r3, #124	; 0x7c
 80036d4:	e002      	b.n	80036dc <_malloc_r+0xa4>
 80036d6:	233f      	movs	r3, #63	; 0x3f
 80036d8:	e000      	b.n	80036dc <_malloc_r+0xa4>
 80036da:	237e      	movs	r3, #126	; 0x7e
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80036e2:	f1a2 0008 	sub.w	r0, r2, #8
 80036e6:	6856      	ldr	r6, [r2, #4]
 80036e8:	e00c      	b.n	8003704 <_malloc_r+0xcc>
 80036ea:	2900      	cmp	r1, #0
 80036ec:	68f1      	ldr	r1, [r6, #12]
 80036ee:	db08      	blt.n	8003702 <_malloc_r+0xca>
 80036f0:	68b3      	ldr	r3, [r6, #8]
 80036f2:	60d9      	str	r1, [r3, #12]
 80036f4:	608b      	str	r3, [r1, #8]
 80036f6:	18b3      	adds	r3, r6, r2
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	e1a3      	b.n	8003a4a <_malloc_r+0x412>
 8003702:	460e      	mov	r6, r1
 8003704:	4286      	cmp	r6, r0
 8003706:	d006      	beq.n	8003716 <_malloc_r+0xde>
 8003708:	6872      	ldr	r2, [r6, #4]
 800370a:	f022 0203 	bic.w	r2, r2, #3
 800370e:	1b11      	subs	r1, r2, r4
 8003710:	290f      	cmp	r1, #15
 8003712:	ddea      	ble.n	80036ea <_malloc_r+0xb2>
 8003714:	3b01      	subs	r3, #1
 8003716:	3301      	adds	r3, #1
 8003718:	4a72      	ldr	r2, [pc, #456]	; (80038e4 <_malloc_r+0x2ac>)
 800371a:	692e      	ldr	r6, [r5, #16]
 800371c:	f102 0708 	add.w	r7, r2, #8
 8003720:	42be      	cmp	r6, r7
 8003722:	4639      	mov	r1, r7
 8003724:	d079      	beq.n	800381a <_malloc_r+0x1e2>
 8003726:	6870      	ldr	r0, [r6, #4]
 8003728:	f020 0003 	bic.w	r0, r0, #3
 800372c:	ebc4 0e00 	rsb	lr, r4, r0
 8003730:	f1be 0f0f 	cmp.w	lr, #15
 8003734:	dd0d      	ble.n	8003752 <_malloc_r+0x11a>
 8003736:	1933      	adds	r3, r6, r4
 8003738:	f044 0401 	orr.w	r4, r4, #1
 800373c:	6074      	str	r4, [r6, #4]
 800373e:	6153      	str	r3, [r2, #20]
 8003740:	6113      	str	r3, [r2, #16]
 8003742:	f04e 0201 	orr.w	r2, lr, #1
 8003746:	60df      	str	r7, [r3, #12]
 8003748:	609f      	str	r7, [r3, #8]
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	f843 e00e 	str.w	lr, [r3, lr]
 8003750:	e17b      	b.n	8003a4a <_malloc_r+0x412>
 8003752:	f1be 0f00 	cmp.w	lr, #0
 8003756:	6157      	str	r7, [r2, #20]
 8003758:	6117      	str	r7, [r2, #16]
 800375a:	db05      	blt.n	8003768 <_malloc_r+0x130>
 800375c:	4430      	add	r0, r6
 800375e:	6843      	ldr	r3, [r0, #4]
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6043      	str	r3, [r0, #4]
 8003766:	e170      	b.n	8003a4a <_malloc_r+0x412>
 8003768:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800376c:	d215      	bcs.n	800379a <_malloc_r+0x162>
 800376e:	08c0      	lsrs	r0, r0, #3
 8003770:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8003774:	2701      	movs	r7, #1
 8003776:	fa07 fe0e 	lsl.w	lr, r7, lr
 800377a:	6857      	ldr	r7, [r2, #4]
 800377c:	3001      	adds	r0, #1
 800377e:	ea4e 0707 	orr.w	r7, lr, r7
 8003782:	6057      	str	r7, [r2, #4]
 8003784:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8003788:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 800378c:	f8c6 e008 	str.w	lr, [r6, #8]
 8003790:	3f08      	subs	r7, #8
 8003792:	60f7      	str	r7, [r6, #12]
 8003794:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8003798:	e03d      	b.n	8003816 <_malloc_r+0x1de>
 800379a:	0a42      	lsrs	r2, r0, #9
 800379c:	2a04      	cmp	r2, #4
 800379e:	d802      	bhi.n	80037a6 <_malloc_r+0x16e>
 80037a0:	0982      	lsrs	r2, r0, #6
 80037a2:	3238      	adds	r2, #56	; 0x38
 80037a4:	e015      	b.n	80037d2 <_malloc_r+0x19a>
 80037a6:	2a14      	cmp	r2, #20
 80037a8:	d801      	bhi.n	80037ae <_malloc_r+0x176>
 80037aa:	325b      	adds	r2, #91	; 0x5b
 80037ac:	e011      	b.n	80037d2 <_malloc_r+0x19a>
 80037ae:	2a54      	cmp	r2, #84	; 0x54
 80037b0:	d802      	bhi.n	80037b8 <_malloc_r+0x180>
 80037b2:	0b02      	lsrs	r2, r0, #12
 80037b4:	326e      	adds	r2, #110	; 0x6e
 80037b6:	e00c      	b.n	80037d2 <_malloc_r+0x19a>
 80037b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80037bc:	d802      	bhi.n	80037c4 <_malloc_r+0x18c>
 80037be:	0bc2      	lsrs	r2, r0, #15
 80037c0:	3277      	adds	r2, #119	; 0x77
 80037c2:	e006      	b.n	80037d2 <_malloc_r+0x19a>
 80037c4:	f240 5754 	movw	r7, #1364	; 0x554
 80037c8:	42ba      	cmp	r2, r7
 80037ca:	bf9a      	itte	ls
 80037cc:	0c82      	lsrls	r2, r0, #18
 80037ce:	327c      	addls	r2, #124	; 0x7c
 80037d0:	227e      	movhi	r2, #126	; 0x7e
 80037d2:	1c57      	adds	r7, r2, #1
 80037d4:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80037d8:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80037dc:	f8df c104 	ldr.w	ip, [pc, #260]	; 80038e4 <_malloc_r+0x2ac>
 80037e0:	45be      	cmp	lr, r7
 80037e2:	d10d      	bne.n	8003800 <_malloc_r+0x1c8>
 80037e4:	2001      	movs	r0, #1
 80037e6:	1092      	asrs	r2, r2, #2
 80037e8:	fa00 f202 	lsl.w	r2, r0, r2
 80037ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80037f0:	4310      	orrs	r0, r2
 80037f2:	f8cc 0004 	str.w	r0, [ip, #4]
 80037f6:	4672      	mov	r2, lr
 80037f8:	e009      	b.n	800380e <_malloc_r+0x1d6>
 80037fa:	68bf      	ldr	r7, [r7, #8]
 80037fc:	45be      	cmp	lr, r7
 80037fe:	d004      	beq.n	800380a <_malloc_r+0x1d2>
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f022 0203 	bic.w	r2, r2, #3
 8003806:	4290      	cmp	r0, r2
 8003808:	d3f7      	bcc.n	80037fa <_malloc_r+0x1c2>
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	46be      	mov	lr, r7
 800380e:	60f2      	str	r2, [r6, #12]
 8003810:	f8c6 e008 	str.w	lr, [r6, #8]
 8003814:	6096      	str	r6, [r2, #8]
 8003816:	f8ce 600c 	str.w	r6, [lr, #12]
 800381a:	2001      	movs	r0, #1
 800381c:	109a      	asrs	r2, r3, #2
 800381e:	fa00 f202 	lsl.w	r2, r0, r2
 8003822:	6868      	ldr	r0, [r5, #4]
 8003824:	4282      	cmp	r2, r0
 8003826:	d85f      	bhi.n	80038e8 <_malloc_r+0x2b0>
 8003828:	4202      	tst	r2, r0
 800382a:	d106      	bne.n	800383a <_malloc_r+0x202>
 800382c:	f023 0303 	bic.w	r3, r3, #3
 8003830:	0052      	lsls	r2, r2, #1
 8003832:	4202      	tst	r2, r0
 8003834:	f103 0304 	add.w	r3, r3, #4
 8003838:	d0fa      	beq.n	8003830 <_malloc_r+0x1f8>
 800383a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800383e:	46c2      	mov	sl, r8
 8003840:	469c      	mov	ip, r3
 8003842:	f8da 600c 	ldr.w	r6, [sl, #12]
 8003846:	4556      	cmp	r6, sl
 8003848:	d02c      	beq.n	80038a4 <_malloc_r+0x26c>
 800384a:	6870      	ldr	r0, [r6, #4]
 800384c:	68f7      	ldr	r7, [r6, #12]
 800384e:	f020 0003 	bic.w	r0, r0, #3
 8003852:	ebc4 0e00 	rsb	lr, r4, r0
 8003856:	f1be 0f0f 	cmp.w	lr, #15
 800385a:	dd11      	ble.n	8003880 <_malloc_r+0x248>
 800385c:	1933      	adds	r3, r6, r4
 800385e:	f044 0401 	orr.w	r4, r4, #1
 8003862:	6074      	str	r4, [r6, #4]
 8003864:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8003868:	60d7      	str	r7, [r2, #12]
 800386a:	60ba      	str	r2, [r7, #8]
 800386c:	f04e 0201 	orr.w	r2, lr, #1
 8003870:	616b      	str	r3, [r5, #20]
 8003872:	612b      	str	r3, [r5, #16]
 8003874:	60d9      	str	r1, [r3, #12]
 8003876:	6099      	str	r1, [r3, #8]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	f843 e00e 	str.w	lr, [r3, lr]
 800387e:	e00b      	b.n	8003898 <_malloc_r+0x260>
 8003880:	f1be 0f00 	cmp.w	lr, #0
 8003884:	db0c      	blt.n	80038a0 <_malloc_r+0x268>
 8003886:	1833      	adds	r3, r6, r0
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003894:	60df      	str	r7, [r3, #12]
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	4648      	mov	r0, r9
 800389a:	f000 f91c 	bl	8003ad6 <__malloc_unlock>
 800389e:	e0d8      	b.n	8003a52 <_malloc_r+0x41a>
 80038a0:	463e      	mov	r6, r7
 80038a2:	e7d0      	b.n	8003846 <_malloc_r+0x20e>
 80038a4:	f10c 0c01 	add.w	ip, ip, #1
 80038a8:	f01c 0f03 	tst.w	ip, #3
 80038ac:	f10a 0a08 	add.w	sl, sl, #8
 80038b0:	d1c7      	bne.n	8003842 <_malloc_r+0x20a>
 80038b2:	0798      	lsls	r0, r3, #30
 80038b4:	d104      	bne.n	80038c0 <_malloc_r+0x288>
 80038b6:	686b      	ldr	r3, [r5, #4]
 80038b8:	ea23 0302 	bic.w	r3, r3, r2
 80038bc:	606b      	str	r3, [r5, #4]
 80038be:	e005      	b.n	80038cc <_malloc_r+0x294>
 80038c0:	f858 0908 	ldr.w	r0, [r8], #-8
 80038c4:	4580      	cmp	r8, r0
 80038c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80038ca:	d0f2      	beq.n	80038b2 <_malloc_r+0x27a>
 80038cc:	6868      	ldr	r0, [r5, #4]
 80038ce:	0052      	lsls	r2, r2, #1
 80038d0:	4282      	cmp	r2, r0
 80038d2:	d809      	bhi.n	80038e8 <_malloc_r+0x2b0>
 80038d4:	b142      	cbz	r2, 80038e8 <_malloc_r+0x2b0>
 80038d6:	4663      	mov	r3, ip
 80038d8:	4202      	tst	r2, r0
 80038da:	d1ae      	bne.n	800383a <_malloc_r+0x202>
 80038dc:	3304      	adds	r3, #4
 80038de:	0052      	lsls	r2, r2, #1
 80038e0:	e7fa      	b.n	80038d8 <_malloc_r+0x2a0>
 80038e2:	bf00      	nop
 80038e4:	200000f8 	.word	0x200000f8
 80038e8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80038ec:	f8db 6004 	ldr.w	r6, [fp, #4]
 80038f0:	f026 0603 	bic.w	r6, r6, #3
 80038f4:	42b4      	cmp	r4, r6
 80038f6:	d803      	bhi.n	8003900 <_malloc_r+0x2c8>
 80038f8:	1b33      	subs	r3, r6, r4
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	f300 809c 	bgt.w	8003a38 <_malloc_r+0x400>
 8003900:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <_malloc_r+0x424>)
 8003902:	4957      	ldr	r1, [pc, #348]	; (8003a60 <_malloc_r+0x428>)
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	6808      	ldr	r0, [r1, #0]
 8003908:	9101      	str	r1, [sp, #4]
 800390a:	f102 0810 	add.w	r8, r2, #16
 800390e:	4a55      	ldr	r2, [pc, #340]	; (8003a64 <_malloc_r+0x42c>)
 8003910:	9203      	str	r2, [sp, #12]
 8003912:	3001      	adds	r0, #1
 8003914:	bf18      	it	ne
 8003916:	f102 31ff 	addne.w	r1, r2, #4294967295
 800391a:	44a0      	add	r8, r4
 800391c:	bf1e      	ittt	ne
 800391e:	4488      	addne	r8, r1
 8003920:	4251      	negne	r1, r2
 8003922:	ea01 0808 	andne.w	r8, r1, r8
 8003926:	eb0b 0306 	add.w	r3, fp, r6
 800392a:	4641      	mov	r1, r8
 800392c:	4648      	mov	r0, r9
 800392e:	9302      	str	r3, [sp, #8]
 8003930:	f000 fa7a 	bl	8003e28 <_sbrk_r>
 8003934:	1c42      	adds	r2, r0, #1
 8003936:	4607      	mov	r7, r0
 8003938:	d06f      	beq.n	8003a1a <_malloc_r+0x3e2>
 800393a:	9b02      	ldr	r3, [sp, #8]
 800393c:	9a03      	ldr	r2, [sp, #12]
 800393e:	4283      	cmp	r3, r0
 8003940:	d901      	bls.n	8003946 <_malloc_r+0x30e>
 8003942:	45ab      	cmp	fp, r5
 8003944:	d169      	bne.n	8003a1a <_malloc_r+0x3e2>
 8003946:	f8df a128 	ldr.w	sl, [pc, #296]	; 8003a70 <_malloc_r+0x438>
 800394a:	f8df c128 	ldr.w	ip, [pc, #296]	; 8003a74 <_malloc_r+0x43c>
 800394e:	f8da 0000 	ldr.w	r0, [sl]
 8003952:	42bb      	cmp	r3, r7
 8003954:	4440      	add	r0, r8
 8003956:	f8ca 0000 	str.w	r0, [sl]
 800395a:	d108      	bne.n	800396e <_malloc_r+0x336>
 800395c:	ea13 0f0c 	tst.w	r3, ip
 8003960:	d105      	bne.n	800396e <_malloc_r+0x336>
 8003962:	68ab      	ldr	r3, [r5, #8]
 8003964:	4446      	add	r6, r8
 8003966:	f046 0601 	orr.w	r6, r6, #1
 800396a:	605e      	str	r6, [r3, #4]
 800396c:	e049      	b.n	8003a02 <_malloc_r+0x3ca>
 800396e:	9901      	ldr	r1, [sp, #4]
 8003970:	f8d1 e000 	ldr.w	lr, [r1]
 8003974:	f1be 3fff 	cmp.w	lr, #4294967295
 8003978:	bf15      	itete	ne
 800397a:	1afb      	subne	r3, r7, r3
 800397c:	4b38      	ldreq	r3, [pc, #224]	; (8003a60 <_malloc_r+0x428>)
 800397e:	181b      	addne	r3, r3, r0
 8003980:	601f      	streq	r7, [r3, #0]
 8003982:	bf18      	it	ne
 8003984:	f8ca 3000 	strne.w	r3, [sl]
 8003988:	f017 0307 	ands.w	r3, r7, #7
 800398c:	bf1c      	itt	ne
 800398e:	f1c3 0308 	rsbne	r3, r3, #8
 8003992:	18ff      	addne	r7, r7, r3
 8003994:	44b8      	add	r8, r7
 8003996:	441a      	add	r2, r3
 8003998:	ea08 080c 	and.w	r8, r8, ip
 800399c:	ebc8 0802 	rsb	r8, r8, r2
 80039a0:	4641      	mov	r1, r8
 80039a2:	4648      	mov	r0, r9
 80039a4:	f000 fa40 	bl	8003e28 <_sbrk_r>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	bf04      	itt	eq
 80039ac:	4638      	moveq	r0, r7
 80039ae:	f04f 0800 	moveq.w	r8, #0
 80039b2:	f8da 3000 	ldr.w	r3, [sl]
 80039b6:	60af      	str	r7, [r5, #8]
 80039b8:	1bc2      	subs	r2, r0, r7
 80039ba:	4442      	add	r2, r8
 80039bc:	4443      	add	r3, r8
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	45ab      	cmp	fp, r5
 80039c4:	f8ca 3000 	str.w	r3, [sl]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	d01a      	beq.n	8003a02 <_malloc_r+0x3ca>
 80039cc:	2e0f      	cmp	r6, #15
 80039ce:	d802      	bhi.n	80039d6 <_malloc_r+0x39e>
 80039d0:	2301      	movs	r3, #1
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	e021      	b.n	8003a1a <_malloc_r+0x3e2>
 80039d6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80039da:	3e0c      	subs	r6, #12
 80039dc:	f026 0607 	bic.w	r6, r6, #7
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	4333      	orrs	r3, r6
 80039e6:	f8cb 3004 	str.w	r3, [fp, #4]
 80039ea:	eb0b 0306 	add.w	r3, fp, r6
 80039ee:	2205      	movs	r2, #5
 80039f0:	2e0f      	cmp	r6, #15
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	d904      	bls.n	8003a02 <_malloc_r+0x3ca>
 80039f8:	f10b 0108 	add.w	r1, fp, #8
 80039fc:	4648      	mov	r0, r9
 80039fe:	f7ff fbf5 	bl	80031ec <_free_r>
 8003a02:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <_malloc_r+0x430>)
 8003a04:	f8da 3000 	ldr.w	r3, [sl]
 8003a08:	6811      	ldr	r1, [r2, #0]
 8003a0a:	428b      	cmp	r3, r1
 8003a0c:	bf88      	it	hi
 8003a0e:	6013      	strhi	r3, [r2, #0]
 8003a10:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <_malloc_r+0x434>)
 8003a12:	6811      	ldr	r1, [r2, #0]
 8003a14:	428b      	cmp	r3, r1
 8003a16:	bf88      	it	hi
 8003a18:	6013      	strhi	r3, [r2, #0]
 8003a1a:	68ab      	ldr	r3, [r5, #8]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	f022 0203 	bic.w	r2, r2, #3
 8003a22:	4294      	cmp	r4, r2
 8003a24:	eba2 0304 	sub.w	r3, r2, r4
 8003a28:	d801      	bhi.n	8003a2e <_malloc_r+0x3f6>
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	dc04      	bgt.n	8003a38 <_malloc_r+0x400>
 8003a2e:	4648      	mov	r0, r9
 8003a30:	f000 f851 	bl	8003ad6 <__malloc_unlock>
 8003a34:	2600      	movs	r6, #0
 8003a36:	e00c      	b.n	8003a52 <_malloc_r+0x41a>
 8003a38:	68ae      	ldr	r6, [r5, #8]
 8003a3a:	f044 0201 	orr.w	r2, r4, #1
 8003a3e:	4434      	add	r4, r6
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6072      	str	r2, [r6, #4]
 8003a46:	60ac      	str	r4, [r5, #8]
 8003a48:	6063      	str	r3, [r4, #4]
 8003a4a:	4648      	mov	r0, r9
 8003a4c:	f000 f843 	bl	8003ad6 <__malloc_unlock>
 8003a50:	3608      	adds	r6, #8
 8003a52:	4630      	mov	r0, r6
 8003a54:	b005      	add	sp, #20
 8003a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000530 	.word	0x20000530
 8003a60:	20000504 	.word	0x20000504
 8003a64:	00000080 	.word	0x00000080
 8003a68:	2000052c 	.word	0x2000052c
 8003a6c:	20000528 	.word	0x20000528
 8003a70:	20000534 	.word	0x20000534
 8003a74:	0000007f 	.word	0x0000007f

08003a78 <memcpy>:
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	1e43      	subs	r3, r0, #1
 8003a7c:	440a      	add	r2, r1
 8003a7e:	4291      	cmp	r1, r2
 8003a80:	d004      	beq.n	8003a8c <memcpy+0x14>
 8003a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a8a:	e7f8      	b.n	8003a7e <memcpy+0x6>
 8003a8c:	bd10      	pop	{r4, pc}

08003a8e <memmove>:
 8003a8e:	4288      	cmp	r0, r1
 8003a90:	b510      	push	{r4, lr}
 8003a92:	eb01 0302 	add.w	r3, r1, r2
 8003a96:	d801      	bhi.n	8003a9c <memmove+0xe>
 8003a98:	1e42      	subs	r2, r0, #1
 8003a9a:	e00b      	b.n	8003ab4 <memmove+0x26>
 8003a9c:	4298      	cmp	r0, r3
 8003a9e:	d2fb      	bcs.n	8003a98 <memmove+0xa>
 8003aa0:	1881      	adds	r1, r0, r2
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	42d3      	cmn	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <memmove+0x24>
 8003aa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ab0:	e7f8      	b.n	8003aa4 <memmove+0x16>
 8003ab2:	bd10      	pop	{r4, pc}
 8003ab4:	4299      	cmp	r1, r3
 8003ab6:	d004      	beq.n	8003ac2 <memmove+0x34>
 8003ab8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003abc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ac0:	e7f8      	b.n	8003ab4 <memmove+0x26>
 8003ac2:	bd10      	pop	{r4, pc}

08003ac4 <memset>:
 8003ac4:	4402      	add	r2, r0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d002      	beq.n	8003ad2 <memset+0xe>
 8003acc:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad0:	e7fa      	b.n	8003ac8 <memset+0x4>
 8003ad2:	4770      	bx	lr

08003ad4 <__malloc_lock>:
 8003ad4:	4770      	bx	lr

08003ad6 <__malloc_unlock>:
 8003ad6:	4770      	bx	lr

08003ad8 <_realloc_r>:
 8003ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	4681      	mov	r9, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	b929      	cbnz	r1, 8003aee <_realloc_r+0x16>
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	b003      	add	sp, #12
 8003ae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aea:	f7ff bda5 	b.w	8003638 <_malloc_r>
 8003aee:	9201      	str	r2, [sp, #4]
 8003af0:	f7ff fff0 	bl	8003ad4 <__malloc_lock>
 8003af4:	9a01      	ldr	r2, [sp, #4]
 8003af6:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8003afa:	f102 080b 	add.w	r8, r2, #11
 8003afe:	f1b8 0f16 	cmp.w	r8, #22
 8003b02:	f1a4 0b08 	sub.w	fp, r4, #8
 8003b06:	f02e 0503 	bic.w	r5, lr, #3
 8003b0a:	d903      	bls.n	8003b14 <_realloc_r+0x3c>
 8003b0c:	f038 0807 	bics.w	r8, r8, #7
 8003b10:	d502      	bpl.n	8003b18 <_realloc_r+0x40>
 8003b12:	e003      	b.n	8003b1c <_realloc_r+0x44>
 8003b14:	f04f 0810 	mov.w	r8, #16
 8003b18:	4590      	cmp	r8, r2
 8003b1a:	d204      	bcs.n	8003b26 <_realloc_r+0x4e>
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	f8c9 3000 	str.w	r3, [r9]
 8003b22:	2000      	movs	r0, #0
 8003b24:	e17d      	b.n	8003e22 <_realloc_r+0x34a>
 8003b26:	45a8      	cmp	r8, r5
 8003b28:	f340 8150 	ble.w	8003dcc <_realloc_r+0x2f4>
 8003b2c:	4ba6      	ldr	r3, [pc, #664]	; (8003dc8 <_realloc_r+0x2f0>)
 8003b2e:	6898      	ldr	r0, [r3, #8]
 8003b30:	eb0b 0105 	add.w	r1, fp, r5
 8003b34:	4281      	cmp	r1, r0
 8003b36:	684f      	ldr	r7, [r1, #4]
 8003b38:	d005      	beq.n	8003b46 <_realloc_r+0x6e>
 8003b3a:	f027 0601 	bic.w	r6, r7, #1
 8003b3e:	440e      	add	r6, r1
 8003b40:	6876      	ldr	r6, [r6, #4]
 8003b42:	07f6      	lsls	r6, r6, #31
 8003b44:	d426      	bmi.n	8003b94 <_realloc_r+0xbc>
 8003b46:	f027 0a03 	bic.w	sl, r7, #3
 8003b4a:	4281      	cmp	r1, r0
 8003b4c:	eb05 070a 	add.w	r7, r5, sl
 8003b50:	d118      	bne.n	8003b84 <_realloc_r+0xac>
 8003b52:	f108 0610 	add.w	r6, r8, #16
 8003b56:	42b7      	cmp	r7, r6
 8003b58:	db1f      	blt.n	8003b9a <_realloc_r+0xc2>
 8003b5a:	eb0b 0008 	add.w	r0, fp, r8
 8003b5e:	ebc8 0707 	rsb	r7, r8, r7
 8003b62:	f047 0701 	orr.w	r7, r7, #1
 8003b66:	6098      	str	r0, [r3, #8]
 8003b68:	6047      	str	r7, [r0, #4]
 8003b6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	ea43 0308 	orr.w	r3, r3, r8
 8003b76:	4648      	mov	r0, r9
 8003b78:	f844 3c04 	str.w	r3, [r4, #-4]
 8003b7c:	f7ff ffab 	bl	8003ad6 <__malloc_unlock>
 8003b80:	4620      	mov	r0, r4
 8003b82:	e14e      	b.n	8003e22 <_realloc_r+0x34a>
 8003b84:	45b8      	cmp	r8, r7
 8003b86:	dc08      	bgt.n	8003b9a <_realloc_r+0xc2>
 8003b88:	68cb      	ldr	r3, [r1, #12]
 8003b8a:	688a      	ldr	r2, [r1, #8]
 8003b8c:	463d      	mov	r5, r7
 8003b8e:	60d3      	str	r3, [r2, #12]
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	e11b      	b.n	8003dcc <_realloc_r+0x2f4>
 8003b94:	f04f 0a00 	mov.w	sl, #0
 8003b98:	4651      	mov	r1, sl
 8003b9a:	f01e 0f01 	tst.w	lr, #1
 8003b9e:	f040 80c3 	bne.w	8003d28 <_realloc_r+0x250>
 8003ba2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8003ba6:	ebc7 070b 	rsb	r7, r7, fp
 8003baa:	687e      	ldr	r6, [r7, #4]
 8003bac:	f026 0603 	bic.w	r6, r6, #3
 8003bb0:	442e      	add	r6, r5
 8003bb2:	2900      	cmp	r1, #0
 8003bb4:	f000 8083 	beq.w	8003cbe <_realloc_r+0x1e6>
 8003bb8:	4281      	cmp	r1, r0
 8003bba:	44b2      	add	sl, r6
 8003bbc:	d147      	bne.n	8003c4e <_realloc_r+0x176>
 8003bbe:	f108 0110 	add.w	r1, r8, #16
 8003bc2:	458a      	cmp	sl, r1
 8003bc4:	db7b      	blt.n	8003cbe <_realloc_r+0x1e6>
 8003bc6:	463e      	mov	r6, r7
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8003bce:	60ca      	str	r2, [r1, #12]
 8003bd0:	6091      	str	r1, [r2, #8]
 8003bd2:	1f2a      	subs	r2, r5, #4
 8003bd4:	2a24      	cmp	r2, #36	; 0x24
 8003bd6:	d825      	bhi.n	8003c24 <_realloc_r+0x14c>
 8003bd8:	2a13      	cmp	r2, #19
 8003bda:	d91b      	bls.n	8003c14 <_realloc_r+0x13c>
 8003bdc:	6821      	ldr	r1, [r4, #0]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	6861      	ldr	r1, [r4, #4]
 8003be2:	60f9      	str	r1, [r7, #12]
 8003be4:	2a1b      	cmp	r2, #27
 8003be6:	d803      	bhi.n	8003bf0 <_realloc_r+0x118>
 8003be8:	f107 0210 	add.w	r2, r7, #16
 8003bec:	3408      	adds	r4, #8
 8003bee:	e012      	b.n	8003c16 <_realloc_r+0x13e>
 8003bf0:	68a1      	ldr	r1, [r4, #8]
 8003bf2:	6139      	str	r1, [r7, #16]
 8003bf4:	68e1      	ldr	r1, [r4, #12]
 8003bf6:	6179      	str	r1, [r7, #20]
 8003bf8:	2a24      	cmp	r2, #36	; 0x24
 8003bfa:	bf01      	itttt	eq
 8003bfc:	6922      	ldreq	r2, [r4, #16]
 8003bfe:	61ba      	streq	r2, [r7, #24]
 8003c00:	6961      	ldreq	r1, [r4, #20]
 8003c02:	61f9      	streq	r1, [r7, #28]
 8003c04:	bf19      	ittee	ne
 8003c06:	f107 0218 	addne.w	r2, r7, #24
 8003c0a:	3410      	addne	r4, #16
 8003c0c:	f107 0220 	addeq.w	r2, r7, #32
 8003c10:	3418      	addeq	r4, #24
 8003c12:	e000      	b.n	8003c16 <_realloc_r+0x13e>
 8003c14:	4632      	mov	r2, r6
 8003c16:	6821      	ldr	r1, [r4, #0]
 8003c18:	6011      	str	r1, [r2, #0]
 8003c1a:	6861      	ldr	r1, [r4, #4]
 8003c1c:	6051      	str	r1, [r2, #4]
 8003c1e:	68a1      	ldr	r1, [r4, #8]
 8003c20:	6091      	str	r1, [r2, #8]
 8003c22:	e005      	b.n	8003c30 <_realloc_r+0x158>
 8003c24:	4621      	mov	r1, r4
 8003c26:	4630      	mov	r0, r6
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	f7ff ff30 	bl	8003a8e <memmove>
 8003c2e:	9b01      	ldr	r3, [sp, #4]
 8003c30:	eb07 0208 	add.w	r2, r7, r8
 8003c34:	ebc8 0a0a 	rsb	sl, r8, sl
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	f04a 0301 	orr.w	r3, sl, #1
 8003c3e:	6053      	str	r3, [r2, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	ea43 0308 	orr.w	r3, r3, r8
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	e0b6      	b.n	8003dbc <_realloc_r+0x2e4>
 8003c4e:	45d0      	cmp	r8, sl
 8003c50:	dc35      	bgt.n	8003cbe <_realloc_r+0x1e6>
 8003c52:	68cb      	ldr	r3, [r1, #12]
 8003c54:	688a      	ldr	r2, [r1, #8]
 8003c56:	4638      	mov	r0, r7
 8003c58:	60d3      	str	r3, [r2, #12]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	60d3      	str	r3, [r2, #12]
 8003c64:	609a      	str	r2, [r3, #8]
 8003c66:	1f2a      	subs	r2, r5, #4
 8003c68:	2a24      	cmp	r2, #36	; 0x24
 8003c6a:	d823      	bhi.n	8003cb4 <_realloc_r+0x1dc>
 8003c6c:	2a13      	cmp	r2, #19
 8003c6e:	d91a      	bls.n	8003ca6 <_realloc_r+0x1ce>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	6863      	ldr	r3, [r4, #4]
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	2a1b      	cmp	r2, #27
 8003c7a:	d803      	bhi.n	8003c84 <_realloc_r+0x1ac>
 8003c7c:	f107 0010 	add.w	r0, r7, #16
 8003c80:	3408      	adds	r4, #8
 8003c82:	e010      	b.n	8003ca6 <_realloc_r+0x1ce>
 8003c84:	68a3      	ldr	r3, [r4, #8]
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	68e3      	ldr	r3, [r4, #12]
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	2a24      	cmp	r2, #36	; 0x24
 8003c8e:	bf01      	itttt	eq
 8003c90:	6923      	ldreq	r3, [r4, #16]
 8003c92:	61bb      	streq	r3, [r7, #24]
 8003c94:	6963      	ldreq	r3, [r4, #20]
 8003c96:	61fb      	streq	r3, [r7, #28]
 8003c98:	bf19      	ittee	ne
 8003c9a:	f107 0018 	addne.w	r0, r7, #24
 8003c9e:	3410      	addne	r4, #16
 8003ca0:	f107 0020 	addeq.w	r0, r7, #32
 8003ca4:	3418      	addeq	r4, #24
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	6003      	str	r3, [r0, #0]
 8003caa:	6863      	ldr	r3, [r4, #4]
 8003cac:	6043      	str	r3, [r0, #4]
 8003cae:	68a3      	ldr	r3, [r4, #8]
 8003cb0:	6083      	str	r3, [r0, #8]
 8003cb2:	e002      	b.n	8003cba <_realloc_r+0x1e2>
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	f7ff feea 	bl	8003a8e <memmove>
 8003cba:	4655      	mov	r5, sl
 8003cbc:	e02e      	b.n	8003d1c <_realloc_r+0x244>
 8003cbe:	45b0      	cmp	r8, r6
 8003cc0:	dc32      	bgt.n	8003d28 <_realloc_r+0x250>
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8003cca:	60d3      	str	r3, [r2, #12]
 8003ccc:	609a      	str	r2, [r3, #8]
 8003cce:	1f2a      	subs	r2, r5, #4
 8003cd0:	2a24      	cmp	r2, #36	; 0x24
 8003cd2:	d825      	bhi.n	8003d20 <_realloc_r+0x248>
 8003cd4:	2a13      	cmp	r2, #19
 8003cd6:	d91a      	bls.n	8003d0e <_realloc_r+0x236>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	6863      	ldr	r3, [r4, #4]
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	2a1b      	cmp	r2, #27
 8003ce2:	d803      	bhi.n	8003cec <_realloc_r+0x214>
 8003ce4:	f107 0010 	add.w	r0, r7, #16
 8003ce8:	3408      	adds	r4, #8
 8003cea:	e010      	b.n	8003d0e <_realloc_r+0x236>
 8003cec:	68a3      	ldr	r3, [r4, #8]
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	68e3      	ldr	r3, [r4, #12]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	2a24      	cmp	r2, #36	; 0x24
 8003cf6:	bf01      	itttt	eq
 8003cf8:	6923      	ldreq	r3, [r4, #16]
 8003cfa:	61bb      	streq	r3, [r7, #24]
 8003cfc:	6963      	ldreq	r3, [r4, #20]
 8003cfe:	61fb      	streq	r3, [r7, #28]
 8003d00:	bf19      	ittee	ne
 8003d02:	f107 0018 	addne.w	r0, r7, #24
 8003d06:	3410      	addne	r4, #16
 8003d08:	f107 0020 	addeq.w	r0, r7, #32
 8003d0c:	3418      	addeq	r4, #24
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	6003      	str	r3, [r0, #0]
 8003d12:	6863      	ldr	r3, [r4, #4]
 8003d14:	6043      	str	r3, [r0, #4]
 8003d16:	68a3      	ldr	r3, [r4, #8]
 8003d18:	6083      	str	r3, [r0, #8]
 8003d1a:	4635      	mov	r5, r6
 8003d1c:	46bb      	mov	fp, r7
 8003d1e:	e055      	b.n	8003dcc <_realloc_r+0x2f4>
 8003d20:	4621      	mov	r1, r4
 8003d22:	f7ff feb4 	bl	8003a8e <memmove>
 8003d26:	e7f8      	b.n	8003d1a <_realloc_r+0x242>
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4648      	mov	r0, r9
 8003d2c:	f7ff fc84 	bl	8003638 <_malloc_r>
 8003d30:	4606      	mov	r6, r0
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d042      	beq.n	8003dbc <_realloc_r+0x2e4>
 8003d36:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	f1a0 0208 	sub.w	r2, r0, #8
 8003d42:	445b      	add	r3, fp
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d105      	bne.n	8003d54 <_realloc_r+0x27c>
 8003d48:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003d4c:	f023 0303 	bic.w	r3, r3, #3
 8003d50:	441d      	add	r5, r3
 8003d52:	e03b      	b.n	8003dcc <_realloc_r+0x2f4>
 8003d54:	1f2a      	subs	r2, r5, #4
 8003d56:	2a24      	cmp	r2, #36	; 0x24
 8003d58:	d829      	bhi.n	8003dae <_realloc_r+0x2d6>
 8003d5a:	2a13      	cmp	r2, #19
 8003d5c:	d91e      	bls.n	8003d9c <_realloc_r+0x2c4>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	6003      	str	r3, [r0, #0]
 8003d62:	6863      	ldr	r3, [r4, #4]
 8003d64:	6043      	str	r3, [r0, #4]
 8003d66:	2a1b      	cmp	r2, #27
 8003d68:	d804      	bhi.n	8003d74 <_realloc_r+0x29c>
 8003d6a:	f100 0308 	add.w	r3, r0, #8
 8003d6e:	f104 0208 	add.w	r2, r4, #8
 8003d72:	e015      	b.n	8003da0 <_realloc_r+0x2c8>
 8003d74:	68a3      	ldr	r3, [r4, #8]
 8003d76:	6083      	str	r3, [r0, #8]
 8003d78:	68e3      	ldr	r3, [r4, #12]
 8003d7a:	60c3      	str	r3, [r0, #12]
 8003d7c:	2a24      	cmp	r2, #36	; 0x24
 8003d7e:	bf01      	itttt	eq
 8003d80:	6923      	ldreq	r3, [r4, #16]
 8003d82:	6103      	streq	r3, [r0, #16]
 8003d84:	6961      	ldreq	r1, [r4, #20]
 8003d86:	6141      	streq	r1, [r0, #20]
 8003d88:	bf19      	ittee	ne
 8003d8a:	f100 0310 	addne.w	r3, r0, #16
 8003d8e:	f104 0210 	addne.w	r2, r4, #16
 8003d92:	f100 0318 	addeq.w	r3, r0, #24
 8003d96:	f104 0218 	addeq.w	r2, r4, #24
 8003d9a:	e001      	b.n	8003da0 <_realloc_r+0x2c8>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4622      	mov	r2, r4
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	6019      	str	r1, [r3, #0]
 8003da4:	6851      	ldr	r1, [r2, #4]
 8003da6:	6059      	str	r1, [r3, #4]
 8003da8:	6892      	ldr	r2, [r2, #8]
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	e002      	b.n	8003db4 <_realloc_r+0x2dc>
 8003dae:	4621      	mov	r1, r4
 8003db0:	f7ff fe6d 	bl	8003a8e <memmove>
 8003db4:	4621      	mov	r1, r4
 8003db6:	4648      	mov	r0, r9
 8003db8:	f7ff fa18 	bl	80031ec <_free_r>
 8003dbc:	4648      	mov	r0, r9
 8003dbe:	f7ff fe8a 	bl	8003ad6 <__malloc_unlock>
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	e02d      	b.n	8003e22 <_realloc_r+0x34a>
 8003dc6:	bf00      	nop
 8003dc8:	200000f8 	.word	0x200000f8
 8003dcc:	ebc8 0205 	rsb	r2, r8, r5
 8003dd0:	2a0f      	cmp	r2, #15
 8003dd2:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003dd6:	d914      	bls.n	8003e02 <_realloc_r+0x32a>
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	eb0b 0108 	add.w	r1, fp, r8
 8003de0:	ea43 0308 	orr.w	r3, r3, r8
 8003de4:	f8cb 3004 	str.w	r3, [fp, #4]
 8003de8:	f042 0301 	orr.w	r3, r2, #1
 8003dec:	440a      	add	r2, r1
 8003dee:	604b      	str	r3, [r1, #4]
 8003df0:	6853      	ldr	r3, [r2, #4]
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6053      	str	r3, [r2, #4]
 8003df8:	3108      	adds	r1, #8
 8003dfa:	4648      	mov	r0, r9
 8003dfc:	f7ff f9f6 	bl	80031ec <_free_r>
 8003e00:	e00a      	b.n	8003e18 <_realloc_r+0x340>
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	432b      	orrs	r3, r5
 8003e08:	eb0b 0205 	add.w	r2, fp, r5
 8003e0c:	f8cb 3004 	str.w	r3, [fp, #4]
 8003e10:	6853      	ldr	r3, [r2, #4]
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6053      	str	r3, [r2, #4]
 8003e18:	4648      	mov	r0, r9
 8003e1a:	f7ff fe5c 	bl	8003ad6 <__malloc_unlock>
 8003e1e:	f10b 0008 	add.w	r0, fp, #8
 8003e22:	b003      	add	sp, #12
 8003e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003e28 <_sbrk_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4c06      	ldr	r4, [pc, #24]	; (8003e44 <_sbrk_r+0x1c>)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	4605      	mov	r5, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	f7fe ffd0 	bl	8002dd8 <_sbrk>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_sbrk_r+0x1a>
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_sbrk_r+0x1a>
 8003e40:	602b      	str	r3, [r5, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	20000674 	.word	0x20000674

08003e48 <__sread>:
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	f000 fa54 	bl	80042fc <_read_r>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	bfab      	itete	ge
 8003e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e5c:	181b      	addge	r3, r3, r0
 8003e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e62:	bfac      	ite	ge
 8003e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e66:	81a3      	strhlt	r3, [r4, #12]
 8003e68:	bd10      	pop	{r4, pc}

08003e6a <__swrite>:
 8003e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6e:	461f      	mov	r7, r3
 8003e70:	898b      	ldrh	r3, [r1, #12]
 8003e72:	05db      	lsls	r3, r3, #23
 8003e74:	4605      	mov	r5, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	4616      	mov	r6, r2
 8003e7a:	d505      	bpl.n	8003e88 <__swrite+0x1e>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	f000 f9c0 	bl	8004208 <_lseek_r>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	4632      	mov	r2, r6
 8003e96:	463b      	mov	r3, r7
 8003e98:	4628      	mov	r0, r5
 8003e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9e:	f000 b817 	b.w	8003ed0 <_write_r>

08003ea2 <__sseek>:
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eaa:	f000 f9ad 	bl	8004208 <_lseek_r>
 8003eae:	1c43      	adds	r3, r0, #1
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	bf15      	itete	ne
 8003eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ebe:	81a3      	strheq	r3, [r4, #12]
 8003ec0:	bf18      	it	ne
 8003ec2:	81a3      	strhne	r3, [r4, #12]
 8003ec4:	bd10      	pop	{r4, pc}

08003ec6 <__sclose>:
 8003ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eca:	f000 b881 	b.w	8003fd0 <_close_r>
	...

08003ed0 <_write_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4c07      	ldr	r4, [pc, #28]	; (8003ef0 <_write_r+0x20>)
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	4611      	mov	r1, r2
 8003eda:	2200      	movs	r2, #0
 8003edc:	6022      	str	r2, [r4, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f7fe ff64 	bl	8002dac <_write>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_write_r+0x1e>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_write_r+0x1e>
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	20000674 	.word	0x20000674

08003ef4 <__swsetup_r>:
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <__swsetup_r+0xcc>)
 8003ef6:	b570      	push	{r4, r5, r6, lr}
 8003ef8:	681d      	ldr	r5, [r3, #0]
 8003efa:	4606      	mov	r6, r0
 8003efc:	460c      	mov	r4, r1
 8003efe:	b125      	cbz	r5, 8003f0a <__swsetup_r+0x16>
 8003f00:	69ab      	ldr	r3, [r5, #24]
 8003f02:	b913      	cbnz	r3, 8003f0a <__swsetup_r+0x16>
 8003f04:	4628      	mov	r0, r5
 8003f06:	f7ff f8a9 	bl	800305c <__sinit>
 8003f0a:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <__swsetup_r+0xd0>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	d101      	bne.n	8003f14 <__swsetup_r+0x20>
 8003f10:	686c      	ldr	r4, [r5, #4]
 8003f12:	e008      	b.n	8003f26 <__swsetup_r+0x32>
 8003f14:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <__swsetup_r+0xd4>)
 8003f16:	429c      	cmp	r4, r3
 8003f18:	d101      	bne.n	8003f1e <__swsetup_r+0x2a>
 8003f1a:	68ac      	ldr	r4, [r5, #8]
 8003f1c:	e003      	b.n	8003f26 <__swsetup_r+0x32>
 8003f1e:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <__swsetup_r+0xd8>)
 8003f20:	429c      	cmp	r4, r3
 8003f22:	bf08      	it	eq
 8003f24:	68ec      	ldreq	r4, [r5, #12]
 8003f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	0715      	lsls	r5, r2, #28
 8003f2e:	d41d      	bmi.n	8003f6c <__swsetup_r+0x78>
 8003f30:	06d0      	lsls	r0, r2, #27
 8003f32:	d402      	bmi.n	8003f3a <__swsetup_r+0x46>
 8003f34:	2209      	movs	r2, #9
 8003f36:	6032      	str	r2, [r6, #0]
 8003f38:	e03a      	b.n	8003fb0 <__swsetup_r+0xbc>
 8003f3a:	0751      	lsls	r1, r2, #29
 8003f3c:	d512      	bpl.n	8003f64 <__swsetup_r+0x70>
 8003f3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f40:	b141      	cbz	r1, 8003f54 <__swsetup_r+0x60>
 8003f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f46:	4299      	cmp	r1, r3
 8003f48:	d002      	beq.n	8003f50 <__swsetup_r+0x5c>
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	f7ff f94e 	bl	80031ec <_free_r>
 8003f50:	2300      	movs	r3, #0
 8003f52:	6363      	str	r3, [r4, #52]	; 0x34
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f5a:	81a3      	strh	r3, [r4, #12]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6063      	str	r3, [r4, #4]
 8003f60:	6923      	ldr	r3, [r4, #16]
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	f043 0308 	orr.w	r3, r3, #8
 8003f6a:	81a3      	strh	r3, [r4, #12]
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	b94b      	cbnz	r3, 8003f84 <__swsetup_r+0x90>
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7a:	d003      	beq.n	8003f84 <__swsetup_r+0x90>
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	4630      	mov	r0, r6
 8003f80:	f000 f980 	bl	8004284 <__smakebuf_r>
 8003f84:	89a2      	ldrh	r2, [r4, #12]
 8003f86:	f012 0301 	ands.w	r3, r2, #1
 8003f8a:	d005      	beq.n	8003f98 <__swsetup_r+0xa4>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60a3      	str	r3, [r4, #8]
 8003f90:	6963      	ldr	r3, [r4, #20]
 8003f92:	425b      	negs	r3, r3
 8003f94:	61a3      	str	r3, [r4, #24]
 8003f96:	e003      	b.n	8003fa0 <__swsetup_r+0xac>
 8003f98:	0792      	lsls	r2, r2, #30
 8003f9a:	bf58      	it	pl
 8003f9c:	6963      	ldrpl	r3, [r4, #20]
 8003f9e:	60a3      	str	r3, [r4, #8]
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	b95b      	cbnz	r3, 8003fbc <__swsetup_r+0xc8>
 8003fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa8:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8003fac:	b280      	uxth	r0, r0
 8003fae:	b130      	cbz	r0, 8003fbe <__swsetup_r+0xca>
 8003fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb4:	81a3      	strh	r3, [r4, #12]
 8003fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	200000f4 	.word	0x200000f4
 8003fc4:	08004404 	.word	0x08004404
 8003fc8:	08004424 	.word	0x08004424
 8003fcc:	08004444 	.word	0x08004444

08003fd0 <_close_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4c06      	ldr	r4, [pc, #24]	; (8003fec <_close_r+0x1c>)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	f7fe ff0a 	bl	8002df4 <_close>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_close_r+0x1a>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_close_r+0x1a>
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	20000674 	.word	0x20000674

08003ff0 <_fclose_r>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	b909      	cbnz	r1, 8003ffc <_fclose_r+0xc>
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	b118      	cbz	r0, 8004006 <_fclose_r+0x16>
 8003ffe:	6983      	ldr	r3, [r0, #24]
 8004000:	b90b      	cbnz	r3, 8004006 <_fclose_r+0x16>
 8004002:	f7ff f82b 	bl	800305c <__sinit>
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <_fclose_r+0x98>)
 8004008:	429c      	cmp	r4, r3
 800400a:	d101      	bne.n	8004010 <_fclose_r+0x20>
 800400c:	686c      	ldr	r4, [r5, #4]
 800400e:	e008      	b.n	8004022 <_fclose_r+0x32>
 8004010:	4b1e      	ldr	r3, [pc, #120]	; (800408c <_fclose_r+0x9c>)
 8004012:	429c      	cmp	r4, r3
 8004014:	d101      	bne.n	800401a <_fclose_r+0x2a>
 8004016:	68ac      	ldr	r4, [r5, #8]
 8004018:	e003      	b.n	8004022 <_fclose_r+0x32>
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <_fclose_r+0xa0>)
 800401c:	429c      	cmp	r4, r3
 800401e:	bf08      	it	eq
 8004020:	68ec      	ldreq	r4, [r5, #12]
 8004022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0e6      	beq.n	8003ff8 <_fclose_r+0x8>
 800402a:	4621      	mov	r1, r4
 800402c:	4628      	mov	r0, r5
 800402e:	f000 f831 	bl	8004094 <__sflush_r>
 8004032:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004034:	4606      	mov	r6, r0
 8004036:	b133      	cbz	r3, 8004046 <_fclose_r+0x56>
 8004038:	6a21      	ldr	r1, [r4, #32]
 800403a:	4628      	mov	r0, r5
 800403c:	4798      	blx	r3
 800403e:	2800      	cmp	r0, #0
 8004040:	bfb8      	it	lt
 8004042:	f04f 36ff 	movlt.w	r6, #4294967295
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	d503      	bpl.n	8004054 <_fclose_r+0x64>
 800404c:	6921      	ldr	r1, [r4, #16]
 800404e:	4628      	mov	r0, r5
 8004050:	f7ff f8cc 	bl	80031ec <_free_r>
 8004054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004056:	b141      	cbz	r1, 800406a <_fclose_r+0x7a>
 8004058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800405c:	4299      	cmp	r1, r3
 800405e:	d002      	beq.n	8004066 <_fclose_r+0x76>
 8004060:	4628      	mov	r0, r5
 8004062:	f7ff f8c3 	bl	80031ec <_free_r>
 8004066:	2300      	movs	r3, #0
 8004068:	6363      	str	r3, [r4, #52]	; 0x34
 800406a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800406c:	b121      	cbz	r1, 8004078 <_fclose_r+0x88>
 800406e:	4628      	mov	r0, r5
 8004070:	f7ff f8bc 	bl	80031ec <_free_r>
 8004074:	2300      	movs	r3, #0
 8004076:	64a3      	str	r3, [r4, #72]	; 0x48
 8004078:	f7ff f860 	bl	800313c <__sfp_lock_acquire>
 800407c:	2300      	movs	r3, #0
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	f7ff f85d 	bl	800313e <__sfp_lock_release>
 8004084:	4630      	mov	r0, r6
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	08004404 	.word	0x08004404
 800408c:	08004424 	.word	0x08004424
 8004090:	08004444 	.word	0x08004444

08004094 <__sflush_r>:
 8004094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004098:	b293      	uxth	r3, r2
 800409a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409e:	4605      	mov	r5, r0
 80040a0:	0718      	lsls	r0, r3, #28
 80040a2:	460c      	mov	r4, r1
 80040a4:	d460      	bmi.n	8004168 <__sflush_r+0xd4>
 80040a6:	684b      	ldr	r3, [r1, #4]
 80040a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	818a      	strh	r2, [r1, #12]
 80040b0:	dc02      	bgt.n	80040b8 <__sflush_r+0x24>
 80040b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	dd17      	ble.n	80040e8 <__sflush_r+0x54>
 80040b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ba:	b1ae      	cbz	r6, 80040e8 <__sflush_r+0x54>
 80040bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040c0:	2300      	movs	r3, #0
 80040c2:	b292      	uxth	r2, r2
 80040c4:	682f      	ldr	r7, [r5, #0]
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	b10a      	cbz	r2, 80040ce <__sflush_r+0x3a>
 80040ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040cc:	e015      	b.n	80040fa <__sflush_r+0x66>
 80040ce:	6a21      	ldr	r1, [r4, #32]
 80040d0:	2301      	movs	r3, #1
 80040d2:	4628      	mov	r0, r5
 80040d4:	47b0      	blx	r6
 80040d6:	1c41      	adds	r1, r0, #1
 80040d8:	d10f      	bne.n	80040fa <__sflush_r+0x66>
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	b16b      	cbz	r3, 80040fa <__sflush_r+0x66>
 80040de:	2b1d      	cmp	r3, #29
 80040e0:	d001      	beq.n	80040e6 <__sflush_r+0x52>
 80040e2:	2b16      	cmp	r3, #22
 80040e4:	d103      	bne.n	80040ee <__sflush_r+0x5a>
 80040e6:	602f      	str	r7, [r5, #0]
 80040e8:	2000      	movs	r0, #0
 80040ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f4:	81a3      	strh	r3, [r4, #12]
 80040f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	075a      	lsls	r2, r3, #29
 80040fe:	d505      	bpl.n	800410c <__sflush_r+0x78>
 8004100:	6863      	ldr	r3, [r4, #4]
 8004102:	1ac0      	subs	r0, r0, r3
 8004104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004106:	b10b      	cbz	r3, 800410c <__sflush_r+0x78>
 8004108:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800410a:	1ac0      	subs	r0, r0, r3
 800410c:	2300      	movs	r3, #0
 800410e:	4602      	mov	r2, r0
 8004110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004112:	6a21      	ldr	r1, [r4, #32]
 8004114:	4628      	mov	r0, r5
 8004116:	47b0      	blx	r6
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	d106      	bne.n	800412c <__sflush_r+0x98>
 800411e:	6829      	ldr	r1, [r5, #0]
 8004120:	291d      	cmp	r1, #29
 8004122:	d83e      	bhi.n	80041a2 <__sflush_r+0x10e>
 8004124:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <__sflush_r+0x11c>)
 8004126:	40ca      	lsrs	r2, r1
 8004128:	07d6      	lsls	r6, r2, #31
 800412a:	d53a      	bpl.n	80041a2 <__sflush_r+0x10e>
 800412c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004130:	b21b      	sxth	r3, r3
 8004132:	2200      	movs	r2, #0
 8004134:	6062      	str	r2, [r4, #4]
 8004136:	04d9      	lsls	r1, r3, #19
 8004138:	6922      	ldr	r2, [r4, #16]
 800413a:	81a3      	strh	r3, [r4, #12]
 800413c:	6022      	str	r2, [r4, #0]
 800413e:	d504      	bpl.n	800414a <__sflush_r+0xb6>
 8004140:	1c42      	adds	r2, r0, #1
 8004142:	d101      	bne.n	8004148 <__sflush_r+0xb4>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	b903      	cbnz	r3, 800414a <__sflush_r+0xb6>
 8004148:	6560      	str	r0, [r4, #84]	; 0x54
 800414a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414c:	602f      	str	r7, [r5, #0]
 800414e:	2900      	cmp	r1, #0
 8004150:	d0ca      	beq.n	80040e8 <__sflush_r+0x54>
 8004152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004156:	4299      	cmp	r1, r3
 8004158:	d002      	beq.n	8004160 <__sflush_r+0xcc>
 800415a:	4628      	mov	r0, r5
 800415c:	f7ff f846 	bl	80031ec <_free_r>
 8004160:	2000      	movs	r0, #0
 8004162:	6360      	str	r0, [r4, #52]	; 0x34
 8004164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004168:	690f      	ldr	r7, [r1, #16]
 800416a:	2f00      	cmp	r7, #0
 800416c:	d0bc      	beq.n	80040e8 <__sflush_r+0x54>
 800416e:	079b      	lsls	r3, r3, #30
 8004170:	680e      	ldr	r6, [r1, #0]
 8004172:	bf08      	it	eq
 8004174:	694b      	ldreq	r3, [r1, #20]
 8004176:	600f      	str	r7, [r1, #0]
 8004178:	bf18      	it	ne
 800417a:	2300      	movne	r3, #0
 800417c:	ebc7 0806 	rsb	r8, r7, r6
 8004180:	608b      	str	r3, [r1, #8]
 8004182:	e002      	b.n	800418a <__sflush_r+0xf6>
 8004184:	4407      	add	r7, r0
 8004186:	ebc0 0808 	rsb	r8, r0, r8
 800418a:	f1b8 0f00 	cmp.w	r8, #0
 800418e:	ddab      	ble.n	80040e8 <__sflush_r+0x54>
 8004190:	4643      	mov	r3, r8
 8004192:	463a      	mov	r2, r7
 8004194:	6a21      	ldr	r1, [r4, #32]
 8004196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004198:	4628      	mov	r0, r5
 800419a:	47b0      	blx	r6
 800419c:	2800      	cmp	r0, #0
 800419e:	dcf1      	bgt.n	8004184 <__sflush_r+0xf0>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b0:	20400001 	.word	0x20400001

080041b4 <_fflush_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	690b      	ldr	r3, [r1, #16]
 80041b8:	4605      	mov	r5, r0
 80041ba:	460c      	mov	r4, r1
 80041bc:	b1db      	cbz	r3, 80041f6 <_fflush_r+0x42>
 80041be:	b118      	cbz	r0, 80041c8 <_fflush_r+0x14>
 80041c0:	6983      	ldr	r3, [r0, #24]
 80041c2:	b90b      	cbnz	r3, 80041c8 <_fflush_r+0x14>
 80041c4:	f7fe ff4a 	bl	800305c <__sinit>
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <_fflush_r+0x48>)
 80041ca:	429c      	cmp	r4, r3
 80041cc:	d101      	bne.n	80041d2 <_fflush_r+0x1e>
 80041ce:	686c      	ldr	r4, [r5, #4]
 80041d0:	e008      	b.n	80041e4 <_fflush_r+0x30>
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <_fflush_r+0x4c>)
 80041d4:	429c      	cmp	r4, r3
 80041d6:	d101      	bne.n	80041dc <_fflush_r+0x28>
 80041d8:	68ac      	ldr	r4, [r5, #8]
 80041da:	e003      	b.n	80041e4 <_fflush_r+0x30>
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <_fflush_r+0x50>)
 80041de:	429c      	cmp	r4, r3
 80041e0:	bf08      	it	eq
 80041e2:	68ec      	ldreq	r4, [r5, #12]
 80041e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e8:	b12b      	cbz	r3, 80041f6 <_fflush_r+0x42>
 80041ea:	4621      	mov	r1, r4
 80041ec:	4628      	mov	r0, r5
 80041ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041f2:	f7ff bf4f 	b.w	8004094 <__sflush_r>
 80041f6:	2000      	movs	r0, #0
 80041f8:	bd38      	pop	{r3, r4, r5, pc}
 80041fa:	bf00      	nop
 80041fc:	08004404 	.word	0x08004404
 8004200:	08004424 	.word	0x08004424
 8004204:	08004444 	.word	0x08004444

08004208 <_lseek_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4c07      	ldr	r4, [pc, #28]	; (8004228 <_lseek_r+0x20>)
 800420c:	4605      	mov	r5, r0
 800420e:	4608      	mov	r0, r1
 8004210:	4611      	mov	r1, r2
 8004212:	2200      	movs	r2, #0
 8004214:	6022      	str	r2, [r4, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	f7fe fe04 	bl	8002e24 <_lseek>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_lseek_r+0x1e>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	b103      	cbz	r3, 8004226 <_lseek_r+0x1e>
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	20000674 	.word	0x20000674

0800422c <__swhatbuf_r>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	460e      	mov	r6, r1
 8004230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004234:	2900      	cmp	r1, #0
 8004236:	b090      	sub	sp, #64	; 0x40
 8004238:	4614      	mov	r4, r2
 800423a:	461d      	mov	r5, r3
 800423c:	da0a      	bge.n	8004254 <__swhatbuf_r+0x28>
 800423e:	89b3      	ldrh	r3, [r6, #12]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2200      	movs	r2, #0
 8004246:	b298      	uxth	r0, r3
 8004248:	602a      	str	r2, [r5, #0]
 800424a:	b1b0      	cbz	r0, 800427a <__swhatbuf_r+0x4e>
 800424c:	2340      	movs	r3, #64	; 0x40
 800424e:	6023      	str	r3, [r4, #0]
 8004250:	4610      	mov	r0, r2
 8004252:	e015      	b.n	8004280 <__swhatbuf_r+0x54>
 8004254:	aa01      	add	r2, sp, #4
 8004256:	f000 f863 	bl	8004320 <_fstat_r>
 800425a:	2800      	cmp	r0, #0
 800425c:	dbef      	blt.n	800423e <__swhatbuf_r+0x12>
 800425e:	9a02      	ldr	r2, [sp, #8]
 8004260:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004264:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004268:	425a      	negs	r2, r3
 800426a:	415a      	adcs	r2, r3
 800426c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004270:	602a      	str	r2, [r5, #0]
 8004272:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004276:	6023      	str	r3, [r4, #0]
 8004278:	e002      	b.n	8004280 <__swhatbuf_r+0x54>
 800427a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	b010      	add	sp, #64	; 0x40
 8004282:	bd70      	pop	{r4, r5, r6, pc}

08004284 <__smakebuf_r>:
 8004284:	898b      	ldrh	r3, [r1, #12]
 8004286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004288:	079e      	lsls	r6, r3, #30
 800428a:	4605      	mov	r5, r0
 800428c:	460c      	mov	r4, r1
 800428e:	d410      	bmi.n	80042b2 <__smakebuf_r+0x2e>
 8004290:	ab01      	add	r3, sp, #4
 8004292:	466a      	mov	r2, sp
 8004294:	f7ff ffca 	bl	800422c <__swhatbuf_r>
 8004298:	9900      	ldr	r1, [sp, #0]
 800429a:	4606      	mov	r6, r0
 800429c:	4628      	mov	r0, r5
 800429e:	f7ff f9cb 	bl	8003638 <_malloc_r>
 80042a2:	b968      	cbnz	r0, 80042c0 <__smakebuf_r+0x3c>
 80042a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042a8:	059a      	lsls	r2, r3, #22
 80042aa:	d422      	bmi.n	80042f2 <__smakebuf_r+0x6e>
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042b6:	6023      	str	r3, [r4, #0]
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	2301      	movs	r3, #1
 80042bc:	6163      	str	r3, [r4, #20]
 80042be:	e018      	b.n	80042f2 <__smakebuf_r+0x6e>
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <__smakebuf_r+0x74>)
 80042c2:	62ab      	str	r3, [r5, #40]	; 0x28
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	6020      	str	r0, [r4, #0]
 80042c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	9b00      	ldr	r3, [sp, #0]
 80042d0:	6163      	str	r3, [r4, #20]
 80042d2:	9b01      	ldr	r3, [sp, #4]
 80042d4:	6120      	str	r0, [r4, #16]
 80042d6:	b14b      	cbz	r3, 80042ec <__smakebuf_r+0x68>
 80042d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042dc:	4628      	mov	r0, r5
 80042de:	f000 f831 	bl	8004344 <_isatty_r>
 80042e2:	b118      	cbz	r0, 80042ec <__smakebuf_r+0x68>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	89a0      	ldrh	r0, [r4, #12]
 80042ee:	4330      	orrs	r0, r6
 80042f0:	81a0      	strh	r0, [r4, #12]
 80042f2:	b002      	add	sp, #8
 80042f4:	bd70      	pop	{r4, r5, r6, pc}
 80042f6:	bf00      	nop
 80042f8:	08002fdd 	.word	0x08002fdd

080042fc <_read_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4c07      	ldr	r4, [pc, #28]	; (800431c <_read_r+0x20>)
 8004300:	4605      	mov	r5, r0
 8004302:	4608      	mov	r0, r1
 8004304:	4611      	mov	r1, r2
 8004306:	2200      	movs	r2, #0
 8004308:	6022      	str	r2, [r4, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f7fe fd92 	bl	8002e34 <_read>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d102      	bne.n	800431a <_read_r+0x1e>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	b103      	cbz	r3, 800431a <_read_r+0x1e>
 8004318:	602b      	str	r3, [r5, #0]
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	20000674 	.word	0x20000674

08004320 <_fstat_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4c07      	ldr	r4, [pc, #28]	; (8004340 <_fstat_r+0x20>)
 8004324:	2300      	movs	r3, #0
 8004326:	4605      	mov	r5, r0
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	f7fe fd69 	bl	8002e04 <_fstat>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	d102      	bne.n	800433c <_fstat_r+0x1c>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	b103      	cbz	r3, 800433c <_fstat_r+0x1c>
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	bd38      	pop	{r3, r4, r5, pc}
 800433e:	bf00      	nop
 8004340:	20000674 	.word	0x20000674

08004344 <_isatty_r>:
 8004344:	b538      	push	{r3, r4, r5, lr}
 8004346:	4c06      	ldr	r4, [pc, #24]	; (8004360 <_isatty_r+0x1c>)
 8004348:	2300      	movs	r3, #0
 800434a:	4605      	mov	r5, r0
 800434c:	4608      	mov	r0, r1
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	f7fe fd60 	bl	8002e14 <_isatty>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_isatty_r+0x1a>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	b103      	cbz	r3, 800435e <_isatty_r+0x1a>
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000674 	.word	0x20000674

08004364 <_init>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr

08004370 <_fini>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	bf00      	nop
 8004374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004376:	bc08      	pop	{r3}
 8004378:	469e      	mov	lr, r3
 800437a:	4770      	bx	lr
